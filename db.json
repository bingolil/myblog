{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/angular-file.png","path":"images/angular-file.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/angular-verison.png","path":"images/angular-verison.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/csh-angular.png","path":"images/csh-angular.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/git-cmd.png","path":"images/git-cmd.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/git-config.png","path":"images/git-config.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/git-key.png","path":"images/git-key.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/git-validate.png","path":"images/git-validate.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/github-join.png","path":"images/github-join.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/github-new.png","path":"images/github-new.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/github-newssh-2.png","path":"images/github-newssh-2.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/hexo-config1.png","path":"images/hexo-config1.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/hexo-deploy.png","path":"images/hexo-deploy.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/hexo-init.png","path":"images/hexo-init.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/hexo-version.png","path":"images/hexo-version.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/ng-help.png","path":"images/ng-help.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/ng-zorro-ant.png","path":"images/ng-zorro-ant.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/node-down.png","path":"images/node-down.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/node-msi.png","path":"images/node-msi.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/node-validate.png","path":"images/node-validate.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/theme-name.png","path":"images/theme-name.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/update-1.png","path":"images/update-1.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/update-2.png","path":"images/update-2.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/update-3.png","path":"images/update-3.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/update-4.png","path":"images/update-4.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/github-newssh-1.png","path":"images/github-newssh-1.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/hexo-g-d.png","path":"images/hexo-g-d.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/git-down.png","path":"images/git-down.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/github-csh.png","path":"images/github-csh.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/github-themes.png","path":"images/github-themes.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/hexo-index.png","path":"images/hexo-index.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/indigo/source/images/polyfill.png","path":"images/polyfill.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"9496ebbfd93eb286080422e150f53db8d2b6c962","modified":1539934218495},{"_id":"themes/indigo/.editorconfig","hash":"67a03b88eadd7810f2e01866e73814074ecd3b87","modified":1539929660550},{"_id":"themes/indigo/LICENSE","hash":"9dd0f70bc72c9d575447655526aded395bb93754","modified":1539929660551},{"_id":"themes/indigo/_config.yml","hash":"ad8138da1b5af301a79b98f09183665263a5f994","modified":1540549818023},{"_id":"themes/indigo/README.md","hash":"cfc7d09fc2ce26003954d647e3bbf98f71574eb7","modified":1539929660552},{"_id":"themes/indigo/package.json","hash":"3ad9b9ccb1ddaad3136f179a7ebff7d7b1c193f7","modified":1539929660595},{"_id":"source/categories/index.md","hash":"8dd1c5f347ae8fc92658a11cfe71536e533f758a","modified":1539929513798},{"_id":"source/tags/index.md","hash":"66054fbb13e98bc5b4a4a431a39ad657078892cc","modified":1539928512126},{"_id":"themes/indigo/languages/en.yml","hash":"ba78def0453d08172248e220a1f9e145e99b4f23","modified":1539929660554},{"_id":"themes/indigo/languages/ja.yml","hash":"65a32717335211a45771a21fb7d7778808c6f0aa","modified":1539929660555},{"_id":"themes/indigo/languages/nl-NL","hash":"b540b76af76c1a180c517089ed2ad770cbded170","modified":1539929660555},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"6806e4c305facf19cbe4e37ccc5d6b00cb56e199","modified":1539929660556},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"9b8bdd9c8b68716f364503926dca6ba8571ee5ff","modified":1539929660557},{"_id":"themes/indigo/layout/archive.ejs","hash":"6897178ba358379d6a4b7c0ba1bc2ab97ad5303a","modified":1539929660587},{"_id":"themes/indigo/layout/categories.ejs","hash":"efae06b4d83aaf73ab93260381e891825bf404ac","modified":1539929660588},{"_id":"themes/indigo/layout/category.ejs","hash":"e5ba5cc2e092c199285b8097ef12ffe70bf84c91","modified":1539929660589},{"_id":"themes/indigo/layout/index.ejs","hash":"772c1985c7743e101598b4eddc253f9174c5605b","modified":1539929660590},{"_id":"themes/indigo/layout/layout.ejs","hash":"770af84fff104c398ce8b6c995130cddd3e9a1e9","modified":1539929660591},{"_id":"themes/indigo/layout/page.ejs","hash":"567c42b978da4c39b8b4982df19b940c26bc32a4","modified":1539929660592},{"_id":"themes/indigo/layout/post.ejs","hash":"efc3352828351f8574c51e8a93dc56c66660c3b1","modified":1539929660592},{"_id":"themes/indigo/layout/tag.ejs","hash":"90a231dea3a364b329a740e5d6c49c8cf5664fe9","modified":1539929660593},{"_id":"themes/indigo/layout/tags.ejs","hash":"1fc0461e9602b53899ec756e4361beb8cce74740","modified":1539929660594},{"_id":"themes/indigo/scripts/plugins.js","hash":"00ea278ea77733f546439aed507ce69a298da362","modified":1539936527472},{"_id":"source/_posts/angular/learn-1.md","hash":"9be161b828f2ac24c90782576c950aefa2ceead6","modified":1541385025536},{"_id":"source/_posts/angular/tags_ [angular安装,angular].md","hash":"d3d8ca0fb87f5059c431ad0c1d301eb02086f1f1","modified":1541382782482},{"_id":"source/_posts/web/person-web-2.md","hash":"b34a619702ddc27d3155bb653ea36bef1eeb3c4f","modified":1541154309200},{"_id":"source/_posts/web/person-web-1.md","hash":"5f04d56453c910315d82963059d4e86006a1c59f","modified":1541154309192},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"1351dbfca311f0d50a939f9e1a91c4f65bbcdf5f","modified":1539929660558},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"c294c98617ce14082f9b3d5eec83328f480f5597","modified":1539929660558},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"c78444f5b350ca79b260361bf3e5b6361d2661ba","modified":1539929660559},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"580d26c39208c30f00ee6f2e18fd0dc8b6b5481a","modified":1539936277244},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"648db446567a81371b8a29d719d13636aa157012","modified":1539929660560},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"7208d4083ee3355aa969972a2ce249a67d56b3a6","modified":1539929660561},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1539929660562},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"ea6aded24a68de0914f24b3760f766b5e1c9835a","modified":1539929660563},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"13952250463f70d1c1bbbfdd7f4ee8160dd6d99b","modified":1539929660563},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"20597ac0d547aea37680ecf195eb129fe5ee19d8","modified":1539929660573},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"5b40f1e309ece0a2e18dcc2cb1eeb2975f1ec13b","modified":1539930053527},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"752109904304fdb8e988ee1254df2af9c0701466","modified":1539929660586},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"30ec74f081cc4c273a7bcd5d57da99072e9f0755","modified":1539929660586},{"_id":"themes/indigo/source/css/style.less","hash":"cf362925ae099b810fd5763e6b724b823612ed15","modified":1539929660655},{"_id":"themes/indigo/source/images/angular-file.png","hash":"b2e4e144cfef8c21d9b47eeeed3c9eaf8cc5e078","modified":1541153509373},{"_id":"themes/indigo/source/images/angular-verison.png","hash":"7dbb17506644db6382e3fe06ac03a62563451667","modified":1541143820344},{"_id":"themes/indigo/source/images/csh-angular.png","hash":"0b1e6211235b7f9cbf49e7bb7999db7810734f0b","modified":1541145787559},{"_id":"themes/indigo/source/images/git-cmd.png","hash":"91503f7dae3e2040b388fa8b306103c7dc6c05d6","modified":1539942448808},{"_id":"themes/indigo/source/images/git-config.png","hash":"5d9bebacbddf0ae4fd840c6ef69436cd30c1e7c9","modified":1541154309202},{"_id":"themes/indigo/source/images/git-key.png","hash":"83b3606314ca81bc152554203841367df4acdef5","modified":1541154309204},{"_id":"themes/indigo/source/images/git-validate.png","hash":"a6fd175d5f4cf68794dbe6f7bb08b9d9f4dc9be5","modified":1539942249383},{"_id":"themes/indigo/source/images/github-join.png","hash":"afab91d94589f95c880d6587366aa8cd92dce7d1","modified":1539943440217},{"_id":"themes/indigo/source/images/github-new.png","hash":"577bc0e0bb3f005ac193d1dbcd8a3070852090a8","modified":1541154309209},{"_id":"themes/indigo/source/images/github-newssh-2.png","hash":"91bd3c5d9804c5426733a46d144ab46afc4a1894","modified":1541154309213},{"_id":"themes/indigo/source/images/hexo-config1.png","hash":"3f372b97334472dfd6ea889fc6cae6879cf2c8c2","modified":1541154309219},{"_id":"themes/indigo/source/images/hexo-deploy.png","hash":"1e4d1833824e6db3c4a024cb55a8ee60b88a003b","modified":1541154309221},{"_id":"themes/indigo/source/images/hexo-init.png","hash":"350662dbc200179a5c1e40d9d377228c7bff2135","modified":1540548045084},{"_id":"themes/indigo/source/images/hexo-version.png","hash":"984c16e80dcbc090d30a54ef1a2722014cf60b04","modified":1539942862485},{"_id":"themes/indigo/source/images/ng-help.png","hash":"f769fcc32f5eb38dd507784c75a06b94776c3b6d","modified":1541149164476},{"_id":"themes/indigo/source/images/ng-zorro-ant.png","hash":"041f8e545a911dab9433478a42a15bcf8bb1c56c","modified":1541149777033},{"_id":"themes/indigo/source/images/node-down.png","hash":"08d4c3a0002764a652cdf3a91c82c50fabc272c0","modified":1539940298212},{"_id":"themes/indigo/source/images/node-msi.png","hash":"aec8c25aaeb8720cb5aa01e4f1e0cb25c93f6421","modified":1539940562262},{"_id":"themes/indigo/source/images/node-validate.png","hash":"71d7dba122986cb8f0d5115b958e2c403f1d9a9e","modified":1539940980684},{"_id":"themes/indigo/source/images/theme-name.png","hash":"57d6162d8f19f6237430dc5cbd5b8323e8acd65b","modified":1541154309224},{"_id":"themes/indigo/source/images/update-1.png","hash":"26ac0b6743f13342130dd7ed70927e7f430d5758","modified":1540549071236},{"_id":"themes/indigo/source/images/update-2.png","hash":"c99480d351122eda6ea186bb5df3db29155a37ea","modified":1540549160039},{"_id":"themes/indigo/source/images/update-3.png","hash":"42985e8321f83aab1576b1877be522c2d5fe5097","modified":1540549223086},{"_id":"themes/indigo/source/images/update-4.png","hash":"ae01332fe496635212b56b3b0b276de8e52e4b31","modified":1541154309225},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"a4ec9b3ce11a3c16e415e766ffc02fac7824e54e","modified":1539945788216},{"_id":"themes/indigo/source/img/avatar.jpg","hash":"ba218884cdf3e07137c0c75f27833ce85517538d","modified":1528853363126},{"_id":"themes/indigo/source/img/brand.jpg","hash":"7de5ff5e0774d22c0aa3984bf7e99c0cea287e9e","modified":1539931615472},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1539929660659},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1539929660659},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1539929660660},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"a4ec9b3ce11a3c16e415e766ffc02fac7824e54e","modified":1539945788216},{"_id":"themes/indigo/source/js/main.js","hash":"ff44bb7b2f1f08757093fd6ffa92c9ac2b674109","modified":1539929660662},{"_id":"themes/indigo/source/js/main.min.js","hash":"e77a89fe5a9827ac590a288778176b233dd900ad","modified":1539929660663},{"_id":"themes/indigo/source/js/search.js","hash":"a4d6c9c566ec1ca71ddacfd14c58f7ddaf9db24d","modified":1539929660663},{"_id":"themes/indigo/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1539929660664},{"_id":"themes/indigo/source/images/github-newssh-1.png","hash":"b2beb89b87b1b6a483832068e6e3be3d11bcadc5","modified":1541154309212},{"_id":"themes/indigo/source/images/hexo-g-d.png","hash":"613adb80c51be6a8541fb72b8a69696d2bf0bfeb","modified":1541154309223},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"da1355eea131952031e54c45560555e6d3aa5a33","modified":1539929660563},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"86fe837ab16cb60754b0a73bb9efa38b04f3023f","modified":1539929660564},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"57cd7b637aa70c6e049b7391c4112874f224c724","modified":1539931077707},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"5f6ceb7f4b9b579e8e3f87894447f556a53f9385","modified":1539929660565},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"b5b87761751a897949e085a8f1ace78b0b8babd5","modified":1539929660566},{"_id":"themes/indigo/layout/_partial/plugins/hyper-comments.ejs","hash":"d0e6f1d713e7a1c0cc5fe25f3e574a4b791f938a","modified":1539929660567},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"3a5c9f7d22d30cd8ffa4e83a8d3976db22815994","modified":1539929660568},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"bb9deb32c54ea6820f622b923e62592915e9f21f","modified":1539929660569},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"a2c247c2e32016563dd6a22c21474072d93f4dbd","modified":1539929660570},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"ef9c77d8c6e004b014c83c5f9333e7174f8bafa3","modified":1539929660571},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"ddf290e90dc1c779f42a48e1bd852ca932148dfb","modified":1539929660571},{"_id":"themes/indigo/layout/_partial/plugins/valine.ejs","hash":"0a6245da90d54177441d32a6f1766b4f434660db","modified":1539929660572},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c08e44cbd7315dec7afb6054b04d3c7b82c3bde8","modified":1539929660574},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"b1a6984e19d3493fb327383ee76e09fdee090426","modified":1539929660574},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"dd1dcc7776021ab3d68065f8532efead4c2b8051","modified":1539929660575},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"c5adcec8db1506c378d39855a697e1bb1165646c","modified":1539929660576},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"f137c126672769e9571be2bb0a70ea8dda644b0e","modified":1539929660577},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"03719097851575a2c1bb95774058b224f6402a1f","modified":1539929660577},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"bde8f9cfa9032f55e5ce7dbcb39b76bd1952c8bb","modified":1540176553746},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"097c0276a61665e5ee96e5d5d85a7d6ae5ab2f49","modified":1539929660579},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"2ec7de870988cfbc8ea9872cddf7e4076ac64a57","modified":1539929660580},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"7d79a67b3e5e6989f22fb0e0904fa540bfca5fcc","modified":1539929660581},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"412894001b1ac6e63012b26b1109a0856651c076","modified":1539929660582},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"d534b888d24df7703c632539d4bdd638fa764e98","modified":1539929660583},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"00fedf7971c0bda0623d968bc0614e512d19a985","modified":1539929660584},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"eaad7af7888bddd7095243a43ff38f55ad8c494a","modified":1539929660582},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"382fc22cd5cc073e881768a65600d97eba9f1d21","modified":1539929660597},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"f047c8ca92f9e6a8e1299ace0cce91514631a21c","modified":1539929660597},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"bad63006b3bd4849bf53ad38482af0d9971061d3","modified":1539929660600},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"880b4a28e97d556ed15b07642d25115f9b6ba4f6","modified":1539929660601},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"99e48793dc0b4ffb66ecaf2d1315145872f9bb98","modified":1539929660602},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"5f783f34bf093e654e8922ed4a2af8b7b2cd41c4","modified":1539932005291},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"38419aaf3c1832e84ade331f051f110fdc8b960f","modified":1539929660603},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"85157ddf3877b5c58e8f1d737dda3dfb1bfd540b","modified":1539929660604},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"33b0a5edcedc26a4c592c812c5785bb20d3c93db","modified":1539929660605},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"516cded3c7f1db4cacfa898bcaf0adfae7f3a2e1","modified":1539929660606},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"f5e89ea5414e3096a28c8c96e86c3f669040a892","modified":1539938116807},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1539929660607},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"dbc23e77e586ee682a21475f5eb568628ea6720f","modified":1539929660608},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"a683c96a59470efd35722b763c55149a46e35156","modified":1539929660609},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"01eb7f84193180928a6ed4796ee8802f6c1628e7","modified":1539929660609},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"99f236dc1151466339d7cdfeb23d1ca60599b74e","modified":1539938005583},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"a02eaa601887f947257f6016679b62dc96a61c0c","modified":1539929660611},{"_id":"themes/indigo/source/css/_plugin/valine.less","hash":"b8f8d8037fb3c8525da12e580bd9e2ff9f298132","modified":1539929660612},{"_id":"themes/indigo/source/images/git-down.png","hash":"4c0afd3e13ef28ba7d7657555f18d8cab4db2c41","modified":1539941505760},{"_id":"themes/indigo/source/images/github-csh.png","hash":"2660f802d04475f4fb33f7aa1e9f9b8f8c572750","modified":1541154309207},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"a3ecbd6ccf5b56ac39df710c34a149b82989a498","modified":1539929660599},{"_id":"themes/indigo/source/images/github-themes.png","hash":"db91e6e66c65cd23b719a28b25100c29177196c1","modified":1541154309216},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1539929660629},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1539929660632},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1539929660633},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1539929660634},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1539929660638},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1539929660639},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1539929660639},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1539929660642},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1539929660643},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1539929660644},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1539929660647},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1539929660648},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1539929660649},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1539929660653},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1539929660654},{"_id":"themes/indigo/source/images/hexo-index.png","hash":"5291316ac56c3997f33808f53341822aab6f32d1","modified":1540548150426},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1539929660627},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1539929660628},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1539929660631},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1539929660636},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1539929660641},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1539929660646},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1539929660652},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1539929660614},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1539929660617},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1539929660625},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1539929660622},{"_id":"themes/indigo/source/images/polyfill.png","hash":"f6e83891d56d83466228e826501131b5f013ab3c","modified":1541383855114},{"_id":"public/atom.xml","hash":"8714c42a7ab14c98356d635f7e4804c01ce15fd5","modified":1541385033919},{"_id":"public/content.json","hash":"9df42ee7638fd39cf490cbb405ebbdef59ce6f05","modified":1541385034008},{"_id":"public/categories/index.html","hash":"4b568e169a5843685af06b5394eaed6128f09895","modified":1541383977401},{"_id":"public/archives/index.html","hash":"d4c960c8e8a3c6f7f5ba37dd75805cc6b8b9d348","modified":1541383977401},{"_id":"public/archives/2018/index.html","hash":"505578b428f2e4174b60f6b528ceada931cde694","modified":1541383977401},{"_id":"public/archives/2018/11/index.html","hash":"f2756dc43c08e69266e8dddc8e5b58dcbd51baad","modified":1541383977401},{"_id":"public/categories/Augular/index.html","hash":"04bd8438438abb84b0da834d0634e11874d6eb62","modified":1541383977401},{"_id":"public/categories/个人网页/index.html","hash":"fb5fa063b1b5a3864c0b077e24b76e34729e3df5","modified":1541383977402},{"_id":"public/index.html","hash":"ff6536313fdd926c6a40794dc2e608978e6db4c5","modified":1541385034011},{"_id":"public/tags/angular安装/index.html","hash":"2053f016a236b204e73f3991a185af65629de6d2","modified":1541383977402},{"_id":"public/tags/angular/index.html","hash":"8f580a664634740d57aa4ee9de557c3d6878f687","modified":1541383977402},{"_id":"public/tags/hexo/index.html","hash":"c3201fe85823f26e83d5b431c78e1e34e74a7e67","modified":1541383977402},{"_id":"public/tags/git/index.html","hash":"decee3f13cf57b4a9cfaff76499aa1d3c7460b83","modified":1541383977402},{"_id":"public/tags/github/index.html","hash":"549a970e343eb7d1e7becdf0dd3cc9690de2ec50","modified":1541383977402},{"_id":"public/tags/node-js/index.html","hash":"4768946247c005096433427e2495f591966ad1e5","modified":1541383977402},{"_id":"public/tags/index.html","hash":"ad4d191ef101e16c5dcc4d833b187ae7504f4115","modified":1541383977402},{"_id":"public/2018/11/02/angular/learn-1/index.html","hash":"b33861add2d935468c27f6da303f2ebf9e28c226","modified":1541385034011},{"_id":"public/2018/11/02/web/person-web-2/index.html","hash":"98889b870b9c0ba6cd0162c0a4f91605cadeccac","modified":1541383977403},{"_id":"public/2018/11/02/web/person-web-1/index.html","hash":"c57b23d8a83d94a7245cb7d77656c68c15ef94cc","modified":1541383977403},{"_id":"public/favicon.ico","hash":"9496ebbfd93eb286080422e150f53db8d2b6c962","modified":1541383977450},{"_id":"public/images/angular-file.png","hash":"b2e4e144cfef8c21d9b47eeeed3c9eaf8cc5e078","modified":1541383977450},{"_id":"public/images/git-cmd.png","hash":"91503f7dae3e2040b388fa8b306103c7dc6c05d6","modified":1541383977450},{"_id":"public/images/git-config.png","hash":"5d9bebacbddf0ae4fd840c6ef69436cd30c1e7c9","modified":1541383977450},{"_id":"public/images/csh-angular.png","hash":"0b1e6211235b7f9cbf49e7bb7999db7810734f0b","modified":1541383977450},{"_id":"public/images/angular-verison.png","hash":"7dbb17506644db6382e3fe06ac03a62563451667","modified":1541383977450},{"_id":"public/images/git-validate.png","hash":"a6fd175d5f4cf68794dbe6f7bb08b9d9f4dc9be5","modified":1541383977450},{"_id":"public/images/github-join.png","hash":"afab91d94589f95c880d6587366aa8cd92dce7d1","modified":1541383977450},{"_id":"public/images/github-new.png","hash":"577bc0e0bb3f005ac193d1dbcd8a3070852090a8","modified":1541383977450},{"_id":"public/images/github-newssh-2.png","hash":"91bd3c5d9804c5426733a46d144ab46afc4a1894","modified":1541383977451},{"_id":"public/images/git-key.png","hash":"83b3606314ca81bc152554203841367df4acdef5","modified":1541383977451},{"_id":"public/images/hexo-config1.png","hash":"3f372b97334472dfd6ea889fc6cae6879cf2c8c2","modified":1541383977451},{"_id":"public/images/hexo-deploy.png","hash":"1e4d1833824e6db3c4a024cb55a8ee60b88a003b","modified":1541383977451},{"_id":"public/images/hexo-version.png","hash":"984c16e80dcbc090d30a54ef1a2722014cf60b04","modified":1541383977451},{"_id":"public/images/hexo-init.png","hash":"350662dbc200179a5c1e40d9d377228c7bff2135","modified":1541383977451},{"_id":"public/images/ng-help.png","hash":"f769fcc32f5eb38dd507784c75a06b94776c3b6d","modified":1541383977451},{"_id":"public/images/node-down.png","hash":"08d4c3a0002764a652cdf3a91c82c50fabc272c0","modified":1541383977451},{"_id":"public/images/node-msi.png","hash":"aec8c25aaeb8720cb5aa01e4f1e0cb25c93f6421","modified":1541383977451},{"_id":"public/images/ng-zorro-ant.png","hash":"041f8e545a911dab9433478a42a15bcf8bb1c56c","modified":1541383977451},{"_id":"public/images/node-validate.png","hash":"71d7dba122986cb8f0d5115b958e2c403f1d9a9e","modified":1541383977452},{"_id":"public/images/update-1.png","hash":"26ac0b6743f13342130dd7ed70927e7f430d5758","modified":1541383977452},{"_id":"public/images/theme-name.png","hash":"57d6162d8f19f6237430dc5cbd5b8323e8acd65b","modified":1541383977452},{"_id":"public/img/alipay.jpg","hash":"a4ec9b3ce11a3c16e415e766ffc02fac7824e54e","modified":1541383977452},{"_id":"public/images/update-2.png","hash":"c99480d351122eda6ea186bb5df3db29155a37ea","modified":1541383977452},{"_id":"public/img/avatar.jpg","hash":"ba218884cdf3e07137c0c75f27833ce85517538d","modified":1541383977452},{"_id":"public/img/brand.jpg","hash":"7de5ff5e0774d22c0aa3984bf7e99c0cea287e9e","modified":1541383977452},{"_id":"public/images/update-4.png","hash":"ae01332fe496635212b56b3b0b276de8e52e4b31","modified":1541383977452},{"_id":"public/images/update-3.png","hash":"42985e8321f83aab1576b1877be522c2d5fe5097","modified":1541383977452},{"_id":"public/img/wechat.jpg","hash":"a4ec9b3ce11a3c16e415e766ffc02fac7824e54e","modified":1541383977452},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1541383977452},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1541383977453},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1541383977453},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1541383977453},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1541383977453},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1541383977453},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1541383977453},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1541383977453},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1541383977453},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1541383977453},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1541383977453},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1541383977453},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1541383977454},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1541383977454},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1541383977454},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1541383977454},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1541383977454},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1541383977454},{"_id":"public/images/polyfill.png","hash":"f6e83891d56d83466228e826501131b5f013ab3c","modified":1541383977455},{"_id":"public/images/github-newssh-1.png","hash":"b2beb89b87b1b6a483832068e6e3be3d11bcadc5","modified":1541383977486},{"_id":"public/images/hexo-g-d.png","hash":"613adb80c51be6a8541fb72b8a69696d2bf0bfeb","modified":1541383977486},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1541383977487},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1541383977487},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1541383977487},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1541383977487},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1541383977487},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1541383977487},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1541383977488},{"_id":"public/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1541383977496},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1541383977496},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1541383977496},{"_id":"public/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1541383977496},{"_id":"public/images/github-csh.png","hash":"2660f802d04475f4fb33f7aa1e9f9b8f8c572750","modified":1541383977497},{"_id":"public/images/git-down.png","hash":"4c0afd3e13ef28ba7d7657555f18d8cab4db2c41","modified":1541383977497},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1541383977497},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1541383977497},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1541383977497},{"_id":"public/images/github-themes.png","hash":"db91e6e66c65cd23b719a28b25100c29177196c1","modified":1541383977502},{"_id":"public/images/hexo-index.png","hash":"5291316ac56c3997f33808f53341822aab6f32d1","modified":1541383977511},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1541383977539},{"_id":"public/css/style.css","hash":"0afa5fe171f3d94e2a7f94aded0b5bf244d105f4","modified":1541383977815}],"Category":[{"name":"Augular","_id":"cjo3nm9is0004u0vcenu3gv69"},{"name":"个人网页","_id":"cjo3nm9ja000iu0vcrvsxluao"}],"Data":[],"Page":[{"layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"layout: categories\ncomments: false\n---\n","date":"2018-10-19T06:11:53.798Z","updated":"2018-10-19T06:11:53.798Z","path":"categories/index.html","title":"","_id":"cjo3nm9hv0000u0vcoiljpn47","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"layout: tags\ncomments: false\n---\n","date":"2018-10-19T05:55:12.126Z","updated":"2018-10-19T05:55:12.126Z","path":"tags/index.html","title":"","_id":"cjo3nm9hy0001u0vc3esl1w72","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"个人网页搭建流程-1","_content":"\n## 需求与准备\n\n### 需求\n\n本人想做一个个人网页,类似于博客，数据量不大，不涉及到数据库和后台，可以做静态网页，由于个人经济所限，不会花费资金购买域名和服务器\n\n### 准备\n\n根据需求，个人网页使用的域名是GitHub为每个用户提供的唯一域名(用户名.xxxx.github.io),由于个人网页类似于博客，采用hexo框架，选用hexo的主题是indigo。\n\n需要的准备有：node.js，hexo框架，git，GitHub的账号\n\n## 安装\n\n### 安装node.js\n\n进入英文版本的[node.js官网](https://nodejs.org/en/download/)，如果打开速度太慢，可以进入中文版本的[node.js官网](http://nodejs.cn/download/)，根据个人电脑选择下载node.js的安装包。\n\n![node-down](https://bingolil.github.io/images/node-down.png)\n\n点击下载后的node.js的安装包。\n\n![node-msi](https://bingolil.github.io/images/node-msi.png)\n\n然后一直跟着窗口点击，最后在电脑的cmd目录行里面验证ndoe.js是否安装成功，npm是node.js自带的包管理工具。\n\n![node-validate](https://bingolil.github.io/images/node-validate.png)\n\n### 安装git\n\n进入[git官网](https://git-scm.com/downloads)下载git的安装包。\n\n![git-down](https://bingolil.github.io/images/git-down.png)\n\n下载安装包后，点击安装包进行安装，一直跟着安装程序的提示点击下去。安装完成后，在window10自带搜索处输入git。出现下图。\n\n![git-validate](https://bingolil.github.io/images/git-validate.png)\n\n点击图中 Git Bash，出现下图，说明git安装成功。\n\n![git-cmd](https://bingolil.github.io/images/git-cmd.png)\n\n 安装git成功后为git设置用户名和邮箱，如下图。\n \n ![git-config](https://bingolil.github.io/images/git-config.png)\n \n### 安装hexo\n\n安装hexo可以查看[hexo官网](https://hexo.io/zh-cn/docs/)安装教程。在电脑的cmd命令行环境下，运行 npm install -g hexo-cli命令，电脑会自动全局安装hexo框架。安装完成后，运行 hexo -version命令，出现下图，证明hexo安装成功。\n\n![hexo-version](https://bingolil.github.io/images/hexo-version.png)\n\n### GitHub账号\n\n进入[GitHub官网](https://github.com)首页，点击导航栏中的 Sign up 进入到[注册页面](https://github.com/join?source=header-home)（如下图），在页面中填写用户名，密码和邮箱。\n\n![github-join](https://bingolil.github.io/images/github-join.png)\n\n注意：GitHub账号的用户名是唯一的\n\n","source":"_posts/web/person-web-1.md","raw":"title: 个人网页搭建流程-1\n\ncategories: 个人网页\n\ntags: [hexo,git,github,node.js]\n---\n\n## 需求与准备\n\n### 需求\n\n本人想做一个个人网页,类似于博客，数据量不大，不涉及到数据库和后台，可以做静态网页，由于个人经济所限，不会花费资金购买域名和服务器\n\n### 准备\n\n根据需求，个人网页使用的域名是GitHub为每个用户提供的唯一域名(用户名.xxxx.github.io),由于个人网页类似于博客，采用hexo框架，选用hexo的主题是indigo。\n\n需要的准备有：node.js，hexo框架，git，GitHub的账号\n\n## 安装\n\n### 安装node.js\n\n进入英文版本的[node.js官网](https://nodejs.org/en/download/)，如果打开速度太慢，可以进入中文版本的[node.js官网](http://nodejs.cn/download/)，根据个人电脑选择下载node.js的安装包。\n\n![node-down](https://bingolil.github.io/images/node-down.png)\n\n点击下载后的node.js的安装包。\n\n![node-msi](https://bingolil.github.io/images/node-msi.png)\n\n然后一直跟着窗口点击，最后在电脑的cmd目录行里面验证ndoe.js是否安装成功，npm是node.js自带的包管理工具。\n\n![node-validate](https://bingolil.github.io/images/node-validate.png)\n\n### 安装git\n\n进入[git官网](https://git-scm.com/downloads)下载git的安装包。\n\n![git-down](https://bingolil.github.io/images/git-down.png)\n\n下载安装包后，点击安装包进行安装，一直跟着安装程序的提示点击下去。安装完成后，在window10自带搜索处输入git。出现下图。\n\n![git-validate](https://bingolil.github.io/images/git-validate.png)\n\n点击图中 Git Bash，出现下图，说明git安装成功。\n\n![git-cmd](https://bingolil.github.io/images/git-cmd.png)\n\n 安装git成功后为git设置用户名和邮箱，如下图。\n \n ![git-config](https://bingolil.github.io/images/git-config.png)\n \n### 安装hexo\n\n安装hexo可以查看[hexo官网](https://hexo.io/zh-cn/docs/)安装教程。在电脑的cmd命令行环境下，运行 npm install -g hexo-cli命令，电脑会自动全局安装hexo框架。安装完成后，运行 hexo -version命令，出现下图，证明hexo安装成功。\n\n![hexo-version](https://bingolil.github.io/images/hexo-version.png)\n\n### GitHub账号\n\n进入[GitHub官网](https://github.com)首页，点击导航栏中的 Sign up 进入到[注册页面](https://github.com/join?source=header-home)（如下图），在页面中填写用户名，密码和邮箱。\n\n![github-join](https://bingolil.github.io/images/github-join.png)\n\n注意：GitHub账号的用户名是唯一的\n\n","slug":"web/person-web-1","published":1,"date":"2018-11-02T10:25:09.191Z","updated":"2018-11-02T10:25:09.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo3nm9j8000gu0vcq6n10a8e","content":"<h2 id=\"需求与准备\"><a href=\"#需求与准备\" class=\"headerlink\" title=\"需求与准备\"></a>需求与准备</h2><h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>本人想做一个个人网页,类似于博客，数据量不大，不涉及到数据库和后台，可以做静态网页，由于个人经济所限，不会花费资金购买域名和服务器</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>根据需求，个人网页使用的域名是GitHub为每个用户提供的唯一域名(用户名.xxxx.github.io),由于个人网页类似于博客，采用hexo框架，选用hexo的主题是indigo。</p>\n<p>需要的准备有：node.js，hexo框架，git，GitHub的账号</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><p>进入英文版本的<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">node.js官网</a>，如果打开速度太慢，可以进入中文版本的<a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"noopener\">node.js官网</a>，根据个人电脑选择下载node.js的安装包。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/node-down.png\" alt=\"node-down\" title=\"\">\n                </div>\n                <div class=\"image-caption\">node-down</div>\n            </figure>\n<p>点击下载后的node.js的安装包。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/node-msi.png\" alt=\"node-msi\" title=\"\">\n                </div>\n                <div class=\"image-caption\">node-msi</div>\n            </figure>\n<p>然后一直跟着窗口点击，最后在电脑的cmd目录行里面验证ndoe.js是否安装成功，npm是node.js自带的包管理工具。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/node-validate.png\" alt=\"node-validate\" title=\"\">\n                </div>\n                <div class=\"image-caption\">node-validate</div>\n            </figure>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>进入<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">git官网</a>下载git的安装包。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/git-down.png\" alt=\"git-down\" title=\"\">\n                </div>\n                <div class=\"image-caption\">git-down</div>\n            </figure>\n<p>下载安装包后，点击安装包进行安装，一直跟着安装程序的提示点击下去。安装完成后，在window10自带搜索处输入git。出现下图。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/git-validate.png\" alt=\"git-validate\" title=\"\">\n                </div>\n                <div class=\"image-caption\">git-validate</div>\n            </figure>\n<p>点击图中 Git Bash，出现下图，说明git安装成功。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/git-cmd.png\" alt=\"git-cmd\" title=\"\">\n                </div>\n                <div class=\"image-caption\">git-cmd</div>\n            </figure>\n<p> 安装git成功后为git设置用户名和邮箱，如下图。</p>\n<p> <img src=\"https://bingolil.github.io/images/git-config.png\" alt=\"git-config\"></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>安装hexo可以查看<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">hexo官网</a>安装教程。在电脑的cmd命令行环境下，运行 npm install -g hexo-cli命令，电脑会自动全局安装hexo框架。安装完成后，运行 hexo -version命令，出现下图，证明hexo安装成功。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-version.png\" alt=\"hexo-version\" title=\"\">\n                </div>\n                <div class=\"image-caption\">hexo-version</div>\n            </figure>\n<h3 id=\"GitHub账号\"><a href=\"#GitHub账号\" class=\"headerlink\" title=\"GitHub账号\"></a>GitHub账号</h3><p>进入<a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">GitHub官网</a>首页，点击导航栏中的 Sign up 进入到<a href=\"https://github.com/join?source=header-home\" target=\"_blank\" rel=\"noopener\">注册页面</a>（如下图），在页面中填写用户名，密码和邮箱。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-join.png\" alt=\"github-join\" title=\"\">\n                </div>\n                <div class=\"image-caption\">github-join</div>\n            </figure>\n<p>注意：GitHub账号的用户名是唯一的</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"需求与准备\"><a href=\"#需求与准备\" class=\"headerlink\" title=\"需求与准备\"></a>需求与准备</h2><h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>本人想做一个个人网页,类似于博客，数据量不大，不涉及到数据库和后台，可以做静态网页，由于个人经济所限，不会花费资金购买域名和服务器</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>根据需求，个人网页使用的域名是GitHub为每个用户提供的唯一域名(用户名.xxxx.github.io),由于个人网页类似于博客，采用hexo框架，选用hexo的主题是indigo。</p>\n<p>需要的准备有：node.js，hexo框架，git，GitHub的账号</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><p>进入英文版本的<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">node.js官网</a>，如果打开速度太慢，可以进入中文版本的<a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"noopener\">node.js官网</a>，根据个人电脑选择下载node.js的安装包。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/node-down.png\" alt=\"node-down\" title=\"\">\n                </div>\n                <div class=\"image-caption\">node-down</div>\n            </figure>\n<p>点击下载后的node.js的安装包。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/node-msi.png\" alt=\"node-msi\" title=\"\">\n                </div>\n                <div class=\"image-caption\">node-msi</div>\n            </figure>\n<p>然后一直跟着窗口点击，最后在电脑的cmd目录行里面验证ndoe.js是否安装成功，npm是node.js自带的包管理工具。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/node-validate.png\" alt=\"node-validate\" title=\"\">\n                </div>\n                <div class=\"image-caption\">node-validate</div>\n            </figure>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>进入<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">git官网</a>下载git的安装包。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/git-down.png\" alt=\"git-down\" title=\"\">\n                </div>\n                <div class=\"image-caption\">git-down</div>\n            </figure>\n<p>下载安装包后，点击安装包进行安装，一直跟着安装程序的提示点击下去。安装完成后，在window10自带搜索处输入git。出现下图。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/git-validate.png\" alt=\"git-validate\" title=\"\">\n                </div>\n                <div class=\"image-caption\">git-validate</div>\n            </figure>\n<p>点击图中 Git Bash，出现下图，说明git安装成功。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/git-cmd.png\" alt=\"git-cmd\" title=\"\">\n                </div>\n                <div class=\"image-caption\">git-cmd</div>\n            </figure>\n<p> 安装git成功后为git设置用户名和邮箱，如下图。</p>\n<p> <img src=\"https://bingolil.github.io/images/git-config.png\" alt=\"git-config\"></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>安装hexo可以查看<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">hexo官网</a>安装教程。在电脑的cmd命令行环境下，运行 npm install -g hexo-cli命令，电脑会自动全局安装hexo框架。安装完成后，运行 hexo -version命令，出现下图，证明hexo安装成功。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-version.png\" alt=\"hexo-version\" title=\"\">\n                </div>\n                <div class=\"image-caption\">hexo-version</div>\n            </figure>\n<h3 id=\"GitHub账号\"><a href=\"#GitHub账号\" class=\"headerlink\" title=\"GitHub账号\"></a>GitHub账号</h3><p>进入<a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">GitHub官网</a>首页，点击导航栏中的 Sign up 进入到<a href=\"https://github.com/join?source=header-home\" target=\"_blank\" rel=\"noopener\">注册页面</a>（如下图），在页面中填写用户名，密码和邮箱。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-join.png\" alt=\"github-join\" title=\"\">\n                </div>\n                <div class=\"image-caption\">github-join</div>\n            </figure>\n<p>注意：GitHub账号的用户名是唯一的</p>\n"},{"title":"个人网页搭建流程-2","_content":"## 搭建本地项目\n### hexo初始化项目\n进入电脑cmd命令行，在某个目录下使用hexo init命令，生成hexo初始化项目，如下图所示。\n![hexo init](https://bingolil.github.io/images/hexo-init.png)\n使用hexo s命令，在浏览器中打开localhost:4000地址，可以看到hexo新建的初始化项目页面，如下图所示。\n![hexo init](https://bingolil.github.io/images/hexo-index.png)\n### hexo主题下载\n新建hexo项目自带默认主题landscape，样式不是特别好看，可去[hexo主题](https://hexo.io/themes/)查看自己喜欢的主题风格，一般在主题风格的页面都有到该主题源码的GitHub链接，进入到GitHub下载，复制git库的地址，在本地的git命令行下 克隆hexo主题。本个人网页使用的主题地址是https://github.com/yscoder/hexo-theme-indigo\n### 使用indigo主题\n将下载好的indigo主题放到本地hexo初始化项目的 '/项目名/themes/' 下，将 '项目名/_config.yml' 文件中的themes属性由landscape改成indigo（如果是其它主题，themes的属性修改成其它主题名)，如下图所示。\n\n![](https://bingolil.github.io/images/theme-name.png)\n\n在该主题的[GitHub页面](https://github.com/yscoder/hexo-theme-indigo/wiki/%E5%AE%89%E8%A3%85)，查看使用该主题的教程，在电脑的cmd环境下跟着教程添加插件。\n\n在cmd命令行本地项目中使用hexo s命令，打开浏览器localhost:4000地址，可以看见hexo的indigo主题被使用\n### 修改indigo主题\n在本地项目中，修改 'indigo/_config.yml'文件，如下图所示。\n去掉menu中的weibo和测试\n![](https://bingolil.github.io/images/update-1.png)\n\n关闭打赏功能\n![](https://bingolil.github.io/images/update-2.png)\n\n去掉title变化功能\n![](https://bingolil.github.io/images/update-3.png)\n\n使用自定义样式\n![](https://bingolil.github.io/images/update-4.png)\n\n## 搭建GitHub项目\n使用账号登录GitHub后，进入创建[仓库页面](https://github.com/new)，创建仓库，仓库名为 '账号用户名.github.io'（这就是为什么账号的用户名是唯一的），如下图所示。\n![GitHub-new](https://bingolil.github.io/images/github-new.png)\n\n打开浏览器，输入地址 'GitHub用户名.github.io'，可以看见如下图页面。\n\n![](https://bingolil.github.io/images/github-csh.png)\n\n进入新搭建的GitHub项目的setting设置页面，有一个Git Pages属性，点击 'choice a theme' 按钮，进入GitHub自带主题页面，可以更换 'GitHub账号.github.io' 页面的主题，如下图所示。\n\n![](https://bingolil.github.io/images/github-themes.png)\n\n## 将本地项目传送的GitHub上\n\n### 本地git和Github的连接\n将本地git和GitHub连接需要将本地git的公钥发送的GitHub上。\n[官网的教程](https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5)生成本地公钥。进入git bash命令行下，运行命令 'ssh-keygen'，在电脑的C盘里面生成了 .ssh 文件夹，如下图所示。\n\n![](https://bingolil.github.io/images/git-key.png)\n\n进入到GitHub上的添加 ssh key 的页面，如下图。\n\n![](https://bingolil.github.io/images/github-newssh-1.png)\n\n![](https://bingolil.github.io/images/github-newssh-2.png)\n\n打开 id_rsa.pub 文件（该文件为公钥，id_rsa为私钥），将文件中的内容复制粘贴到上图中，点击 Add SSH key 按钮，这样本地的git和GitHub连接完成。\n\n### 传送本地项目\n在hexo官网教材中提供了关于hexo项目的[部署方案](https://hexo.io/zh-cn/docs/deployment)，将新建GitHub项目地址复制，在编辑器中打开本地的hexo项目，打开 '项目名/_config.yml' 文件，将GitHub项目地址粘贴到 '_config.yml' 文件中的 deplay 属性下的 git 属性上，如下图所示。\n\n![](https://bingolil.github.io/images/hexo-config1.png)\n\n在电脑cmd命令到项目地址下，使用命令 'npm install hexo-deployer-git --save' 下载插件，如下图所示。\n\n![](https://bingolil.github.io/images/hexo-deploy.png)\n\n然后运行 'hexo g -d' 或 'hexo d -g' 命令，可以看到，已经将本地git项目传送到新建的GitHub项目上，如下图所示。\n\n![](https://bingolil.github.io/images/hexo-g-d.png)\n\n打开浏览器，在地址栏输入 'GitHub用户名.github.io' 可以看到，已经将本地的项目已经在GitHub上了。\n\n","source":"_posts/web/person-web-2.md","raw":"title: 个人网页搭建流程-2\ncategories: 个人网页\ntags: [hexo,git,github,node.js]\n---\n## 搭建本地项目\n### hexo初始化项目\n进入电脑cmd命令行，在某个目录下使用hexo init命令，生成hexo初始化项目，如下图所示。\n![hexo init](https://bingolil.github.io/images/hexo-init.png)\n使用hexo s命令，在浏览器中打开localhost:4000地址，可以看到hexo新建的初始化项目页面，如下图所示。\n![hexo init](https://bingolil.github.io/images/hexo-index.png)\n### hexo主题下载\n新建hexo项目自带默认主题landscape，样式不是特别好看，可去[hexo主题](https://hexo.io/themes/)查看自己喜欢的主题风格，一般在主题风格的页面都有到该主题源码的GitHub链接，进入到GitHub下载，复制git库的地址，在本地的git命令行下 克隆hexo主题。本个人网页使用的主题地址是https://github.com/yscoder/hexo-theme-indigo\n### 使用indigo主题\n将下载好的indigo主题放到本地hexo初始化项目的 '/项目名/themes/' 下，将 '项目名/_config.yml' 文件中的themes属性由landscape改成indigo（如果是其它主题，themes的属性修改成其它主题名)，如下图所示。\n\n![](https://bingolil.github.io/images/theme-name.png)\n\n在该主题的[GitHub页面](https://github.com/yscoder/hexo-theme-indigo/wiki/%E5%AE%89%E8%A3%85)，查看使用该主题的教程，在电脑的cmd环境下跟着教程添加插件。\n\n在cmd命令行本地项目中使用hexo s命令，打开浏览器localhost:4000地址，可以看见hexo的indigo主题被使用\n### 修改indigo主题\n在本地项目中，修改 'indigo/_config.yml'文件，如下图所示。\n去掉menu中的weibo和测试\n![](https://bingolil.github.io/images/update-1.png)\n\n关闭打赏功能\n![](https://bingolil.github.io/images/update-2.png)\n\n去掉title变化功能\n![](https://bingolil.github.io/images/update-3.png)\n\n使用自定义样式\n![](https://bingolil.github.io/images/update-4.png)\n\n## 搭建GitHub项目\n使用账号登录GitHub后，进入创建[仓库页面](https://github.com/new)，创建仓库，仓库名为 '账号用户名.github.io'（这就是为什么账号的用户名是唯一的），如下图所示。\n![GitHub-new](https://bingolil.github.io/images/github-new.png)\n\n打开浏览器，输入地址 'GitHub用户名.github.io'，可以看见如下图页面。\n\n![](https://bingolil.github.io/images/github-csh.png)\n\n进入新搭建的GitHub项目的setting设置页面，有一个Git Pages属性，点击 'choice a theme' 按钮，进入GitHub自带主题页面，可以更换 'GitHub账号.github.io' 页面的主题，如下图所示。\n\n![](https://bingolil.github.io/images/github-themes.png)\n\n## 将本地项目传送的GitHub上\n\n### 本地git和Github的连接\n将本地git和GitHub连接需要将本地git的公钥发送的GitHub上。\n[官网的教程](https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5)生成本地公钥。进入git bash命令行下，运行命令 'ssh-keygen'，在电脑的C盘里面生成了 .ssh 文件夹，如下图所示。\n\n![](https://bingolil.github.io/images/git-key.png)\n\n进入到GitHub上的添加 ssh key 的页面，如下图。\n\n![](https://bingolil.github.io/images/github-newssh-1.png)\n\n![](https://bingolil.github.io/images/github-newssh-2.png)\n\n打开 id_rsa.pub 文件（该文件为公钥，id_rsa为私钥），将文件中的内容复制粘贴到上图中，点击 Add SSH key 按钮，这样本地的git和GitHub连接完成。\n\n### 传送本地项目\n在hexo官网教材中提供了关于hexo项目的[部署方案](https://hexo.io/zh-cn/docs/deployment)，将新建GitHub项目地址复制，在编辑器中打开本地的hexo项目，打开 '项目名/_config.yml' 文件，将GitHub项目地址粘贴到 '_config.yml' 文件中的 deplay 属性下的 git 属性上，如下图所示。\n\n![](https://bingolil.github.io/images/hexo-config1.png)\n\n在电脑cmd命令到项目地址下，使用命令 'npm install hexo-deployer-git --save' 下载插件，如下图所示。\n\n![](https://bingolil.github.io/images/hexo-deploy.png)\n\n然后运行 'hexo g -d' 或 'hexo d -g' 命令，可以看到，已经将本地git项目传送到新建的GitHub项目上，如下图所示。\n\n![](https://bingolil.github.io/images/hexo-g-d.png)\n\n打开浏览器，在地址栏输入 'GitHub用户名.github.io' 可以看到，已经将本地的项目已经在GitHub上了。\n\n","slug":"web/person-web-2","published":1,"date":"2018-11-02T10:25:09.199Z","updated":"2018-11-02T10:25:09.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo3nm9j9000hu0vcgha3tdj9","content":"<h2 id=\"搭建本地项目\"><a href=\"#搭建本地项目\" class=\"headerlink\" title=\"搭建本地项目\"></a>搭建本地项目</h2><h3 id=\"hexo初始化项目\"><a href=\"#hexo初始化项目\" class=\"headerlink\" title=\"hexo初始化项目\"></a>hexo初始化项目</h3><p>进入电脑cmd命令行，在某个目录下使用hexo init命令，生成hexo初始化项目，如下图所示。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-init.png\" alt=\"hexo init\" title=\"\">\n                </div>\n                <div class=\"image-caption\">hexo init</div>\n            </figure><br>使用hexo s命令，在浏览器中打开localhost:4000地址，可以看到hexo新建的初始化项目页面，如下图所示。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-index.png\" alt=\"hexo init\" title=\"\">\n                </div>\n                <div class=\"image-caption\">hexo init</div>\n            </figure></p>\n<h3 id=\"hexo主题下载\"><a href=\"#hexo主题下载\" class=\"headerlink\" title=\"hexo主题下载\"></a>hexo主题下载</h3><p>新建hexo项目自带默认主题landscape，样式不是特别好看，可去<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo主题</a>查看自己喜欢的主题风格，一般在主题风格的页面都有到该主题源码的GitHub链接，进入到GitHub下载，复制git库的地址，在本地的git命令行下 克隆hexo主题。本个人网页使用的主题地址是<a href=\"https://github.com/yscoder/hexo-theme-indigo\" target=\"_blank\" rel=\"noopener\">https://github.com/yscoder/hexo-theme-indigo</a></p>\n<h3 id=\"使用indigo主题\"><a href=\"#使用indigo主题\" class=\"headerlink\" title=\"使用indigo主题\"></a>使用indigo主题</h3><p>将下载好的indigo主题放到本地hexo初始化项目的 ‘/项目名/themes/‘ 下，将 ‘项目名/_config.yml’ 文件中的themes属性由landscape改成indigo（如果是其它主题，themes的属性修改成其它主题名)，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/theme-name.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在该主题的<a href=\"https://github.com/yscoder/hexo-theme-indigo/wiki/%E5%AE%89%E8%A3%85\" target=\"_blank\" rel=\"noopener\">GitHub页面</a>，查看使用该主题的教程，在电脑的cmd环境下跟着教程添加插件。</p>\n<p>在cmd命令行本地项目中使用hexo s命令，打开浏览器localhost:4000地址，可以看见hexo的indigo主题被使用</p>\n<h3 id=\"修改indigo主题\"><a href=\"#修改indigo主题\" class=\"headerlink\" title=\"修改indigo主题\"></a>修改indigo主题</h3><p>在本地项目中，修改 ‘indigo/_config.yml’文件，如下图所示。<br>去掉menu中的weibo和测试<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/update-1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>关闭打赏功能<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/update-2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>去掉title变化功能<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/update-3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>使用自定义样式<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/update-4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h2 id=\"搭建GitHub项目\"><a href=\"#搭建GitHub项目\" class=\"headerlink\" title=\"搭建GitHub项目\"></a>搭建GitHub项目</h2><p>使用账号登录GitHub后，进入创建<a href=\"https://github.com/new\" target=\"_blank\" rel=\"noopener\">仓库页面</a>，创建仓库，仓库名为 ‘账号用户名.github.io’（这就是为什么账号的用户名是唯一的），如下图所示。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-new.png\" alt=\"GitHub-new\" title=\"\">\n                </div>\n                <div class=\"image-caption\">GitHub-new</div>\n            </figure></p>\n<p>打开浏览器，输入地址 ‘GitHub用户名.github.io’，可以看见如下图页面。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-csh.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>进入新搭建的GitHub项目的setting设置页面，有一个Git Pages属性，点击 ‘choice a theme’ 按钮，进入GitHub自带主题页面，可以更换 ‘GitHub账号.github.io’ 页面的主题，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-themes.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"将本地项目传送的GitHub上\"><a href=\"#将本地项目传送的GitHub上\" class=\"headerlink\" title=\"将本地项目传送的GitHub上\"></a>将本地项目传送的GitHub上</h2><h3 id=\"本地git和Github的连接\"><a href=\"#本地git和Github的连接\" class=\"headerlink\" title=\"本地git和Github的连接\"></a>本地git和Github的连接</h3><p>将本地git和GitHub连接需要将本地git的公钥发送的GitHub上。<br><a href=\"https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5\" target=\"_blank\" rel=\"noopener\">官网的教程</a>生成本地公钥。进入git bash命令行下，运行命令 ‘ssh-keygen’，在电脑的C盘里面生成了 .ssh 文件夹，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/git-key.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>进入到GitHub上的添加 ssh key 的页面，如下图。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-newssh-1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-newssh-2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>打开 id_rsa.pub 文件（该文件为公钥，id_rsa为私钥），将文件中的内容复制粘贴到上图中，点击 Add SSH key 按钮，这样本地的git和GitHub连接完成。</p>\n<h3 id=\"传送本地项目\"><a href=\"#传送本地项目\" class=\"headerlink\" title=\"传送本地项目\"></a>传送本地项目</h3><p>在hexo官网教材中提供了关于hexo项目的<a href=\"https://hexo.io/zh-cn/docs/deployment\" target=\"_blank\" rel=\"noopener\">部署方案</a>，将新建GitHub项目地址复制，在编辑器中打开本地的hexo项目，打开 ‘项目名/_config.yml’ 文件，将GitHub项目地址粘贴到 ‘_config.yml’ 文件中的 deplay 属性下的 git 属性上，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-config1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在电脑cmd命令到项目地址下，使用命令 ‘npm install hexo-deployer-git –save’ 下载插件，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-deploy.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>然后运行 ‘hexo g -d’ 或 ‘hexo d -g’ 命令，可以看到，已经将本地git项目传送到新建的GitHub项目上，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-g-d.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>打开浏览器，在地址栏输入 ‘GitHub用户名.github.io’ 可以看到，已经将本地的项目已经在GitHub上了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"搭建本地项目\"><a href=\"#搭建本地项目\" class=\"headerlink\" title=\"搭建本地项目\"></a>搭建本地项目</h2><h3 id=\"hexo初始化项目\"><a href=\"#hexo初始化项目\" class=\"headerlink\" title=\"hexo初始化项目\"></a>hexo初始化项目</h3><p>进入电脑cmd命令行，在某个目录下使用hexo init命令，生成hexo初始化项目，如下图所示。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-init.png\" alt=\"hexo init\" title=\"\">\n                </div>\n                <div class=\"image-caption\">hexo init</div>\n            </figure><br>使用hexo s命令，在浏览器中打开localhost:4000地址，可以看到hexo新建的初始化项目页面，如下图所示。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-index.png\" alt=\"hexo init\" title=\"\">\n                </div>\n                <div class=\"image-caption\">hexo init</div>\n            </figure></p>\n<h3 id=\"hexo主题下载\"><a href=\"#hexo主题下载\" class=\"headerlink\" title=\"hexo主题下载\"></a>hexo主题下载</h3><p>新建hexo项目自带默认主题landscape，样式不是特别好看，可去<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo主题</a>查看自己喜欢的主题风格，一般在主题风格的页面都有到该主题源码的GitHub链接，进入到GitHub下载，复制git库的地址，在本地的git命令行下 克隆hexo主题。本个人网页使用的主题地址是<a href=\"https://github.com/yscoder/hexo-theme-indigo\" target=\"_blank\" rel=\"noopener\">https://github.com/yscoder/hexo-theme-indigo</a></p>\n<h3 id=\"使用indigo主题\"><a href=\"#使用indigo主题\" class=\"headerlink\" title=\"使用indigo主题\"></a>使用indigo主题</h3><p>将下载好的indigo主题放到本地hexo初始化项目的 ‘/项目名/themes/‘ 下，将 ‘项目名/_config.yml’ 文件中的themes属性由landscape改成indigo（如果是其它主题，themes的属性修改成其它主题名)，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/theme-name.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在该主题的<a href=\"https://github.com/yscoder/hexo-theme-indigo/wiki/%E5%AE%89%E8%A3%85\" target=\"_blank\" rel=\"noopener\">GitHub页面</a>，查看使用该主题的教程，在电脑的cmd环境下跟着教程添加插件。</p>\n<p>在cmd命令行本地项目中使用hexo s命令，打开浏览器localhost:4000地址，可以看见hexo的indigo主题被使用</p>\n<h3 id=\"修改indigo主题\"><a href=\"#修改indigo主题\" class=\"headerlink\" title=\"修改indigo主题\"></a>修改indigo主题</h3><p>在本地项目中，修改 ‘indigo/_config.yml’文件，如下图所示。<br>去掉menu中的weibo和测试<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/update-1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>关闭打赏功能<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/update-2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>去掉title变化功能<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/update-3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>使用自定义样式<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/update-4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h2 id=\"搭建GitHub项目\"><a href=\"#搭建GitHub项目\" class=\"headerlink\" title=\"搭建GitHub项目\"></a>搭建GitHub项目</h2><p>使用账号登录GitHub后，进入创建<a href=\"https://github.com/new\" target=\"_blank\" rel=\"noopener\">仓库页面</a>，创建仓库，仓库名为 ‘账号用户名.github.io’（这就是为什么账号的用户名是唯一的），如下图所示。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-new.png\" alt=\"GitHub-new\" title=\"\">\n                </div>\n                <div class=\"image-caption\">GitHub-new</div>\n            </figure></p>\n<p>打开浏览器，输入地址 ‘GitHub用户名.github.io’，可以看见如下图页面。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-csh.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>进入新搭建的GitHub项目的setting设置页面，有一个Git Pages属性，点击 ‘choice a theme’ 按钮，进入GitHub自带主题页面，可以更换 ‘GitHub账号.github.io’ 页面的主题，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-themes.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"将本地项目传送的GitHub上\"><a href=\"#将本地项目传送的GitHub上\" class=\"headerlink\" title=\"将本地项目传送的GitHub上\"></a>将本地项目传送的GitHub上</h2><h3 id=\"本地git和Github的连接\"><a href=\"#本地git和Github的连接\" class=\"headerlink\" title=\"本地git和Github的连接\"></a>本地git和Github的连接</h3><p>将本地git和GitHub连接需要将本地git的公钥发送的GitHub上。<br><a href=\"https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5\" target=\"_blank\" rel=\"noopener\">官网的教程</a>生成本地公钥。进入git bash命令行下，运行命令 ‘ssh-keygen’，在电脑的C盘里面生成了 .ssh 文件夹，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/git-key.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>进入到GitHub上的添加 ssh key 的页面，如下图。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-newssh-1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-newssh-2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>打开 id_rsa.pub 文件（该文件为公钥，id_rsa为私钥），将文件中的内容复制粘贴到上图中，点击 Add SSH key 按钮，这样本地的git和GitHub连接完成。</p>\n<h3 id=\"传送本地项目\"><a href=\"#传送本地项目\" class=\"headerlink\" title=\"传送本地项目\"></a>传送本地项目</h3><p>在hexo官网教材中提供了关于hexo项目的<a href=\"https://hexo.io/zh-cn/docs/deployment\" target=\"_blank\" rel=\"noopener\">部署方案</a>，将新建GitHub项目地址复制，在编辑器中打开本地的hexo项目，打开 ‘项目名/_config.yml’ 文件，将GitHub项目地址粘贴到 ‘_config.yml’ 文件中的 deplay 属性下的 git 属性上，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-config1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在电脑cmd命令到项目地址下，使用命令 ‘npm install hexo-deployer-git –save’ 下载插件，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-deploy.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>然后运行 ‘hexo g -d’ 或 ‘hexo d -g’ 命令，可以看到，已经将本地git项目传送到新建的GitHub项目上，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-g-d.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>打开浏览器，在地址栏输入 ‘GitHub用户名.github.io’ 可以看到，已经将本地的项目已经在GitHub上了。</p>\n"},{"title":"Angular初级教程-1","_content":"## 安装Angular6\n前提准备：电脑上已经存在node.js（版本 为8.X或者10.X），因为使用angular一般都需要它的angular/cli脚手架，需要使用ndoe.js的包管理器npm。\n安装的angular版本是angular6，进入电脑的cmd命令行环境下，运行如下命令\n```typescript\nnpm install -g @angular/cli\n```\n安装完毕后，在该环境下运行如下命令\n```typescript\nng -version\n```\n出现如下图所示，代表安装成功\n\n![](https://bingolil.github.io/images/angular-verison.png)\n\n## 新建项目\n在cmd命令行环境下，运行以下命令\n```typescript\nng new myApp\n```\n然后等待angular/cli脚手架自动新建一个myApp的项目，然后cd myApp目录下，运行以下命令\n```typescript\nng server --open //open是参数，即运行成功后自动打开\n                 //浏览器，并进入本地4200端口界面\n```\n在浏览器的本地4200端口出现如下图所示。\n\n![](https://bingolil.github.io/images/csh-angular.png)\n## Angular6项目文件\nangular新建项目的目录结构如下所示\n\n![](https://bingolil.github.io/images/angular-file.png)\n### angular.json\n在angular6以前，该文件名为.angular.json，angular6改成了angular.json，少了一个小数点，这个文件是脚手架的核心配置文件。\n```typescript\n\"projects\": {\n    \"myApp\": {\n      \"root\": \"\", //项目的根\n      \"sourceRoot\": \"src\", //项目的源码地址，即项目源码都在src文件夹下\n      \"projectType\": \"application\",\n      \"prefix\": \"app\", //前缀，新建组件时，其选择器为 'app-组件名'\n      \"schematics\": {},\n      \"architect\": {\n        \"build\": { //项目打包部分\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/myApp\", //打包后的项目地址\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": \"src/polyfills.ts\", //项目的腻子文件\n            \"tsConfig\": \"src/tsconfig.app.json\",\n            \"assets\": [ //项目在资源地址\n              \"src/favicon.ico\",\n              \"src/assets\"\n            ],\n            \"styles\": [ //项目的引入的css文件\n              \"src/styles.css\"\n            ],\n            \"scripts\": [] //项目引入的js文件\n          }\n```\n### package.json\n在项目下面存在pack.json文件，该json文件存放了项目的信息\n\n```typescript\n\"name\": \"my-app\", //项目名称\n  \"version\": \"0.0.0\", //项目版本\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\", //项目运行命令\n    \"build\": \"ng build\", //项目打包命令\n    \"test\": \"ng test\", //项目测试命令\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\" //项目端到端测试命令\n```\n\n### src/main.ts\n这个文件记录了项目从哪个模块开始运行\n```\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n```\n\n### src/polyfill.ts\n\n这个文件叫做腻子脚本，angular是默认对ie浏览器是不支持的，即新建项目后，在ie浏览器的本地4200端口页面是一片空白，将以下的注释取消，在ie浏览器中可以看到页面。\n**将项目的默认注释取消后，其对ie浏览器的支持也不是特别好，[Angualr官网](https://angular.io/)在ie11中有的页面页打不开**\n![](https://bingolil.github.io/images/polyfill.png)\n\n### src/index.html\n\n该文件记录了页面是从开始模块(AppModule)中声明的哪一个组件开始\n\n    <html lang=\"en\">\n        <head>\n            <meta charset=\"utf-8\">\n            <title>MyApp</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n             <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n        </head>\n        <body>\n            <app-root></app-root> //从AppModule的app-root组件开始展示页面\n        </body>\n    </html>\n\n### src/app/app.module.ts\n这个文件是项目默认的根模块\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent] //bootstrap代表从哪个组件开始编译\n})\nexport class AppModule { }\n```\n在src/main.ts中引入的启动模块就这个模块，所以这个模块也叫做项目的根模块，在这个模块中，默认定义了一个根组件，即AppComponent，这个组件定义的选择器是 'app-root'，这个选择器在src/index.html中被使用，即这个组件也叫做根组件。\n**以上文件为angular项目的主要的重要文件**\n## Angular6命令大全\nangular为使用者提供了诸多帮助，在cmd环境下，使用以下命令\n```\nng --help\n```\n其命令如下图所示\n![](https://bingolil.github.io/images/ng-help.png)\n### ng add\nng add是angular6中新出现的命令，该命令使得向项目中添加新功能更加的方便。\n例如，在项目根目录下运行如下命令添加**ng-zorro**\n```\nng add ng-zorro-antd\n```\n命令运行完成后，使用ng serve运行项目，浏览器打开本地4200端口，出现下图。\n\n![](https://bingolil.github.io/images/ng-zorro-ant.png)\n这代表在这个项目中可以使用[ng-zorro官网](https://ng.ant.design/docs/introduce/zh)的组件\n\n### ng new\n该命令是创建一个新的angular项目，使用如下命令，可以创建一个新项目\n```\nng new myApp //创建一个项目名为myApp的angular项目\nng new myApp --routing //这个命令同上，不同之处这个命令会在项目中\n      //自动生成代表项目路由的文件 app-routing.module.ts\n```\n### ng generate\n这个命令是angular项目中最主要的命令之一，新建组件，服务，指令，模块都可以在项目的根目录下使用这个命令进行创建。\n\n| 默认创建名为home      | 完整写法   |    最简写法  |\n| --------   | -----  | ----  |\n| 组件| ng generate componetent home |  ng g c home    |\n| 服务| ng generate service home| ng g s home |\n| 指令| ng generate directive home |  ng g d home  |\n| 管道 | ng generate pipe home |  ng g p home  |\n| 类  | ng generate class home |  ng g cl home  |\n| 接口 | ng generate interface home |  ng g i home  |\n| 模块| ng generate module home |  ng g m home  |\n\n**注意：**\n1，angular以前的服务使用的依赖注入，在angular6版本中，服务采用的相依注入\n2，创建组件component和类class都是c开头，所以使用最简写法有一定区别，如下所示，创建组件使用的是ng g c，创建类时使用的是ng g cl。\n```\nng g c 组件名 //创建组件时使用的是c\nng g cl 类名 //创建类时使用的是cl\n```\n### ng build\nangular项目采用的语言是typescript语法，由微软开发，该语法不直接在浏览器中运行，需要将ts(typescript)转换为js语法才可以运行，ng build命令就是对angular项目进行打包，生成静态的文件。\n### 其它命令\nangular还有其它的一些命令\n\n| 命令 | 意义   | \n| --------   | -----  |\n| ng serve| 运行项目，存在--open参数时自动打开浏览器 | \n| ng eject| 提取项目的webpack.config.json文件，一旦提取就不能还原|\n| ng libary 库名| 用户创建库 | \n| ng help | 查找帮助  |\n| ng version  |查看版本  |\n| ng update |项目的依赖有重大改变时，自动更新代码  |\n| ng project 项目名| 已移除，在本项目下新建一个项目 |\n","source":"_posts/angular/learn-1.md","raw":"title: Angular初级教程-1\ncategories: Augular\ntags: [angular安装,angular]\n---\n## 安装Angular6\n前提准备：电脑上已经存在node.js（版本 为8.X或者10.X），因为使用angular一般都需要它的angular/cli脚手架，需要使用ndoe.js的包管理器npm。\n安装的angular版本是angular6，进入电脑的cmd命令行环境下，运行如下命令\n```typescript\nnpm install -g @angular/cli\n```\n安装完毕后，在该环境下运行如下命令\n```typescript\nng -version\n```\n出现如下图所示，代表安装成功\n\n![](https://bingolil.github.io/images/angular-verison.png)\n\n## 新建项目\n在cmd命令行环境下，运行以下命令\n```typescript\nng new myApp\n```\n然后等待angular/cli脚手架自动新建一个myApp的项目，然后cd myApp目录下，运行以下命令\n```typescript\nng server --open //open是参数，即运行成功后自动打开\n                 //浏览器，并进入本地4200端口界面\n```\n在浏览器的本地4200端口出现如下图所示。\n\n![](https://bingolil.github.io/images/csh-angular.png)\n## Angular6项目文件\nangular新建项目的目录结构如下所示\n\n![](https://bingolil.github.io/images/angular-file.png)\n### angular.json\n在angular6以前，该文件名为.angular.json，angular6改成了angular.json，少了一个小数点，这个文件是脚手架的核心配置文件。\n```typescript\n\"projects\": {\n    \"myApp\": {\n      \"root\": \"\", //项目的根\n      \"sourceRoot\": \"src\", //项目的源码地址，即项目源码都在src文件夹下\n      \"projectType\": \"application\",\n      \"prefix\": \"app\", //前缀，新建组件时，其选择器为 'app-组件名'\n      \"schematics\": {},\n      \"architect\": {\n        \"build\": { //项目打包部分\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/myApp\", //打包后的项目地址\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": \"src/polyfills.ts\", //项目的腻子文件\n            \"tsConfig\": \"src/tsconfig.app.json\",\n            \"assets\": [ //项目在资源地址\n              \"src/favicon.ico\",\n              \"src/assets\"\n            ],\n            \"styles\": [ //项目的引入的css文件\n              \"src/styles.css\"\n            ],\n            \"scripts\": [] //项目引入的js文件\n          }\n```\n### package.json\n在项目下面存在pack.json文件，该json文件存放了项目的信息\n\n```typescript\n\"name\": \"my-app\", //项目名称\n  \"version\": \"0.0.0\", //项目版本\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\", //项目运行命令\n    \"build\": \"ng build\", //项目打包命令\n    \"test\": \"ng test\", //项目测试命令\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\" //项目端到端测试命令\n```\n\n### src/main.ts\n这个文件记录了项目从哪个模块开始运行\n```\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n```\n\n### src/polyfill.ts\n\n这个文件叫做腻子脚本，angular是默认对ie浏览器是不支持的，即新建项目后，在ie浏览器的本地4200端口页面是一片空白，将以下的注释取消，在ie浏览器中可以看到页面。\n**将项目的默认注释取消后，其对ie浏览器的支持也不是特别好，[Angualr官网](https://angular.io/)在ie11中有的页面页打不开**\n![](https://bingolil.github.io/images/polyfill.png)\n\n### src/index.html\n\n该文件记录了页面是从开始模块(AppModule)中声明的哪一个组件开始\n\n    <html lang=\"en\">\n        <head>\n            <meta charset=\"utf-8\">\n            <title>MyApp</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n             <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n        </head>\n        <body>\n            <app-root></app-root> //从AppModule的app-root组件开始展示页面\n        </body>\n    </html>\n\n### src/app/app.module.ts\n这个文件是项目默认的根模块\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent] //bootstrap代表从哪个组件开始编译\n})\nexport class AppModule { }\n```\n在src/main.ts中引入的启动模块就这个模块，所以这个模块也叫做项目的根模块，在这个模块中，默认定义了一个根组件，即AppComponent，这个组件定义的选择器是 'app-root'，这个选择器在src/index.html中被使用，即这个组件也叫做根组件。\n**以上文件为angular项目的主要的重要文件**\n## Angular6命令大全\nangular为使用者提供了诸多帮助，在cmd环境下，使用以下命令\n```\nng --help\n```\n其命令如下图所示\n![](https://bingolil.github.io/images/ng-help.png)\n### ng add\nng add是angular6中新出现的命令，该命令使得向项目中添加新功能更加的方便。\n例如，在项目根目录下运行如下命令添加**ng-zorro**\n```\nng add ng-zorro-antd\n```\n命令运行完成后，使用ng serve运行项目，浏览器打开本地4200端口，出现下图。\n\n![](https://bingolil.github.io/images/ng-zorro-ant.png)\n这代表在这个项目中可以使用[ng-zorro官网](https://ng.ant.design/docs/introduce/zh)的组件\n\n### ng new\n该命令是创建一个新的angular项目，使用如下命令，可以创建一个新项目\n```\nng new myApp //创建一个项目名为myApp的angular项目\nng new myApp --routing //这个命令同上，不同之处这个命令会在项目中\n      //自动生成代表项目路由的文件 app-routing.module.ts\n```\n### ng generate\n这个命令是angular项目中最主要的命令之一，新建组件，服务，指令，模块都可以在项目的根目录下使用这个命令进行创建。\n\n| 默认创建名为home      | 完整写法   |    最简写法  |\n| --------   | -----  | ----  |\n| 组件| ng generate componetent home |  ng g c home    |\n| 服务| ng generate service home| ng g s home |\n| 指令| ng generate directive home |  ng g d home  |\n| 管道 | ng generate pipe home |  ng g p home  |\n| 类  | ng generate class home |  ng g cl home  |\n| 接口 | ng generate interface home |  ng g i home  |\n| 模块| ng generate module home |  ng g m home  |\n\n**注意：**\n1，angular以前的服务使用的依赖注入，在angular6版本中，服务采用的相依注入\n2，创建组件component和类class都是c开头，所以使用最简写法有一定区别，如下所示，创建组件使用的是ng g c，创建类时使用的是ng g cl。\n```\nng g c 组件名 //创建组件时使用的是c\nng g cl 类名 //创建类时使用的是cl\n```\n### ng build\nangular项目采用的语言是typescript语法，由微软开发，该语法不直接在浏览器中运行，需要将ts(typescript)转换为js语法才可以运行，ng build命令就是对angular项目进行打包，生成静态的文件。\n### 其它命令\nangular还有其它的一些命令\n\n| 命令 | 意义   | \n| --------   | -----  |\n| ng serve| 运行项目，存在--open参数时自动打开浏览器 | \n| ng eject| 提取项目的webpack.config.json文件，一旦提取就不能还原|\n| ng libary 库名| 用户创建库 | \n| ng help | 查找帮助  |\n| ng version  |查看版本  |\n| ng update |项目的依赖有重大改变时，自动更新代码  |\n| ng project 项目名| 已移除，在本项目下新建一个项目 |\n","slug":"angular/learn-1","published":1,"date":"2018-11-02T10:25:36.422Z","updated":"2018-11-05T02:30:25.536Z","_id":"cjo3nxc7f0012u0vcxuukijvw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"安装Angular6\"><a href=\"#安装Angular6\" class=\"headerlink\" title=\"安装Angular6\"></a>安装Angular6</h2><p>前提准备：电脑上已经存在node.js（版本 为8.X或者10.X），因为使用angular一般都需要它的angular/cli脚手架，需要使用ndoe.js的包管理器npm。<br>安装的angular版本是angular6，进入电脑的cmd命令行环境下，运行如下命令<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g <span class=\"meta\">@angular</span>/cli</span><br></pre></td></tr></table></figure></p>\n<p>安装完毕后，在该环境下运行如下命令<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng -version</span><br></pre></td></tr></table></figure></p>\n<p>出现如下图所示，代表安装成功</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/angular-verison.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><p>在cmd命令行环境下，运行以下命令<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng <span class=\"keyword\">new</span> myApp</span><br></pre></td></tr></table></figure></p>\n<p>然后等待angular/cli脚手架自动新建一个myApp的项目，然后cd myApp目录下，运行以下命令<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng server --open <span class=\"comment\">//open是参数，即运行成功后自动打开</span></span><br><span class=\"line\">                 <span class=\"comment\">//浏览器，并进入本地4200端口界面</span></span><br></pre></td></tr></table></figure></p>\n<p>在浏览器的本地4200端口出现如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/csh-angular.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"Angular6项目文件\"><a href=\"#Angular6项目文件\" class=\"headerlink\" title=\"Angular6项目文件\"></a>Angular6项目文件</h2><p>angular新建项目的目录结构如下所示</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/angular-file.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"angular-json\"><a href=\"#angular-json\" class=\"headerlink\" title=\"angular.json\"></a>angular.json</h3><p>在angular6以前，该文件名为.angular.json，angular6改成了angular.json，少了一个小数点，这个文件是脚手架的核心配置文件。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"projects\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"myApp\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"root\"</span>: <span class=\"string\">\"\"</span>, <span class=\"comment\">//项目的根</span></span><br><span class=\"line\">      <span class=\"string\">\"sourceRoot\"</span>: <span class=\"string\">\"src\"</span>, <span class=\"comment\">//项目的源码地址，即项目源码都在src文件夹下</span></span><br><span class=\"line\">      <span class=\"string\">\"projectType\"</span>: <span class=\"string\">\"application\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"prefix\"</span>: <span class=\"string\">\"app\"</span>, <span class=\"comment\">//前缀，新建组件时，其选择器为 'app-组件名'</span></span><br><span class=\"line\">      <span class=\"string\">\"schematics\"</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"string\">\"architect\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"build\"</span>: &#123; <span class=\"comment\">//项目打包部分</span></span><br><span class=\"line\">          <span class=\"string\">\"builder\"</span>: <span class=\"string\">\"@angular-devkit/build-angular:browser\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"options\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"outputPath\"</span>: <span class=\"string\">\"dist/myApp\"</span>, <span class=\"comment\">//打包后的项目地址</span></span><br><span class=\"line\">            <span class=\"string\">\"index\"</span>: <span class=\"string\">\"src/index.html\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"main\"</span>: <span class=\"string\">\"src/main.ts\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"polyfills\"</span>: <span class=\"string\">\"src/polyfills.ts\"</span>, <span class=\"comment\">//项目的腻子文件</span></span><br><span class=\"line\">            <span class=\"string\">\"tsConfig\"</span>: <span class=\"string\">\"src/tsconfig.app.json\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"assets\"</span>: [ <span class=\"comment\">//项目在资源地址</span></span><br><span class=\"line\">              <span class=\"string\">\"src/favicon.ico\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"src/assets\"</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">\"styles\"</span>: [ <span class=\"comment\">//项目的引入的css文件</span></span><br><span class=\"line\">              <span class=\"string\">\"src/styles.css\"</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">\"scripts\"</span>: [] <span class=\"comment\">//项目引入的js文件</span></span><br><span class=\"line\">          &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><p>在项目下面存在pack.json文件，该json文件存放了项目的信息</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"name\"</span>: <span class=\"string\">\"my-app\"</span>, <span class=\"comment\">//项目名称</span></span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>, <span class=\"comment\">//项目版本</span></span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"ng\"</span>: <span class=\"string\">\"ng\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"ng serve\"</span>, <span class=\"comment\">//项目运行命令</span></span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"ng build\"</span>, <span class=\"comment\">//项目打包命令</span></span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"ng test\"</span>, <span class=\"comment\">//项目测试命令</span></span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"ng lint\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"e2e\"</span>: <span class=\"string\">\"ng e2e\"</span> <span class=\"comment\">//项目端到端测试命令</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"src-main-ts\"><a href=\"#src-main-ts\" class=\"headerlink\" title=\"src/main.ts\"></a>src/main.ts</h3><p>这个文件记录了项目从哪个模块开始运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; enableProdMode &#125; from &apos;@angular/core&apos;;</span><br><span class=\"line\">import &#123; platformBrowserDynamic &#125; from &apos;@angular/platform-browser-dynamic&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; AppModule &#125; from &apos;./app/app.module&apos;;</span><br><span class=\"line\">import &#123; environment &#125; from &apos;./environments/environment&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">if (environment.production) &#123;</span><br><span class=\"line\">  enableProdMode();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">platformBrowserDynamic().bootstrapModule(AppModule)</span><br><span class=\"line\">  .catch(err =&gt; console.log(err));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"src-polyfill-ts\"><a href=\"#src-polyfill-ts\" class=\"headerlink\" title=\"src/polyfill.ts\"></a>src/polyfill.ts</h3><p>这个文件叫做腻子脚本，angular是默认对ie浏览器是不支持的，即新建项目后，在ie浏览器的本地4200端口页面是一片空白，将以下的注释取消，在ie浏览器中可以看到页面。<br><strong>将项目的默认注释取消后，其对ie浏览器的支持也不是特别好，<a href=\"https://angular.io/\" target=\"_blank\" rel=\"noopener\">Angualr官网</a>在ie11中有的页面页打不开</strong><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/polyfill.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"src-index-html\"><a href=\"#src-index-html\" class=\"headerlink\" title=\"src/index.html\"></a>src/index.html</h3><p>该文件记录了页面是从开始模块(AppModule)中声明的哪一个组件开始</p>\n<pre><code>&lt;html lang=&quot;en&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot;&gt;\n        &lt;title&gt;MyApp&lt;/title&gt;\n        &lt;base href=&quot;/&quot;&gt;\n        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;\n         &lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;favicon.ico&quot;&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;app-root&gt;&lt;/app-root&gt; //从AppModule的app-root组件开始展示页面\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h3 id=\"src-app-app-module-ts\"><a href=\"#src-app-app-module-ts\" class=\"headerlink\" title=\"src/app/app.module.ts\"></a>src/app/app.module.ts</h3><p>这个文件是项目默认的根模块</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [</span><br><span class=\"line\">    AppComponent</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    BrowserModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent] <span class=\"comment\">//bootstrap代表从哪个组件开始编译</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>在src/main.ts中引入的启动模块就这个模块，所以这个模块也叫做项目的根模块，在这个模块中，默认定义了一个根组件，即AppComponent，这个组件定义的选择器是 ‘app-root’，这个选择器在src/index.html中被使用，即这个组件也叫做根组件。<br><strong>以上文件为angular项目的主要的重要文件</strong></p>\n<h2 id=\"Angular6命令大全\"><a href=\"#Angular6命令大全\" class=\"headerlink\" title=\"Angular6命令大全\"></a>Angular6命令大全</h2><p>angular为使用者提供了诸多帮助，在cmd环境下，使用以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng --help</span><br></pre></td></tr></table></figure></p>\n<p>其命令如下图所示<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/ng-help.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"ng-add\"><a href=\"#ng-add\" class=\"headerlink\" title=\"ng add\"></a>ng add</h3><p>ng add是angular6中新出现的命令，该命令使得向项目中添加新功能更加的方便。<br>例如，在项目根目录下运行如下命令添加<strong>ng-zorro</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add ng-zorro-antd</span><br></pre></td></tr></table></figure></p>\n<p>命令运行完成后，使用ng serve运行项目，浏览器打开本地4200端口，出现下图。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/ng-zorro-ant.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>这代表在这个项目中可以使用<a href=\"https://ng.ant.design/docs/introduce/zh\" target=\"_blank\" rel=\"noopener\">ng-zorro官网</a>的组件</p>\n<h3 id=\"ng-new\"><a href=\"#ng-new\" class=\"headerlink\" title=\"ng new\"></a>ng new</h3><p>该命令是创建一个新的angular项目，使用如下命令，可以创建一个新项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new myApp //创建一个项目名为myApp的angular项目</span><br><span class=\"line\">ng new myApp --routing //这个命令同上，不同之处这个命令会在项目中</span><br><span class=\"line\">      //自动生成代表项目路由的文件 app-routing.module.ts</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ng-generate\"><a href=\"#ng-generate\" class=\"headerlink\" title=\"ng generate\"></a>ng generate</h3><p>这个命令是angular项目中最主要的命令之一，新建组件，服务，指令，模块都可以在项目的根目录下使用这个命令进行创建。</p>\n<table>\n<thead>\n<tr>\n<th>默认创建名为home</th>\n<th>完整写法</th>\n<th>最简写法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>组件</td>\n<td>ng generate componetent home</td>\n<td>ng g c home</td>\n</tr>\n<tr>\n<td>服务</td>\n<td>ng generate service home</td>\n<td>ng g s home</td>\n</tr>\n<tr>\n<td>指令</td>\n<td>ng generate directive home</td>\n<td>ng g d home</td>\n</tr>\n<tr>\n<td>管道</td>\n<td>ng generate pipe home</td>\n<td>ng g p home</td>\n</tr>\n<tr>\n<td>类</td>\n<td>ng generate class home</td>\n<td>ng g cl home</td>\n</tr>\n<tr>\n<td>接口</td>\n<td>ng generate interface home</td>\n<td>ng g i home</td>\n</tr>\n<tr>\n<td>模块</td>\n<td>ng generate module home</td>\n<td>ng g m home</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：</strong><br>1，angular以前的服务使用的依赖注入，在angular6版本中，服务采用的相依注入<br>2，创建组件component和类class都是c开头，所以使用最简写法有一定区别，如下所示，创建组件使用的是ng g c，创建类时使用的是ng g cl。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c 组件名 //创建组件时使用的是c</span><br><span class=\"line\">ng g cl 类名 //创建类时使用的是cl</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ng-build\"><a href=\"#ng-build\" class=\"headerlink\" title=\"ng build\"></a>ng build</h3><p>angular项目采用的语言是typescript语法，由微软开发，该语法不直接在浏览器中运行，需要将ts(typescript)转换为js语法才可以运行，ng build命令就是对angular项目进行打包，生成静态的文件。</p>\n<h3 id=\"其它命令\"><a href=\"#其它命令\" class=\"headerlink\" title=\"其它命令\"></a>其它命令</h3><p>angular还有其它的一些命令</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ng serve</td>\n<td>运行项目，存在–open参数时自动打开浏览器</td>\n</tr>\n<tr>\n<td>ng eject</td>\n<td>提取项目的webpack.config.json文件，一旦提取就不能还原</td>\n</tr>\n<tr>\n<td>ng libary 库名</td>\n<td>用户创建库</td>\n</tr>\n<tr>\n<td>ng help</td>\n<td>查找帮助</td>\n</tr>\n<tr>\n<td>ng version</td>\n<td>查看版本</td>\n</tr>\n<tr>\n<td>ng update</td>\n<td>项目的依赖有重大改变时，自动更新代码</td>\n</tr>\n<tr>\n<td>ng project 项目名</td>\n<td>已移除，在本项目下新建一个项目</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装Angular6\"><a href=\"#安装Angular6\" class=\"headerlink\" title=\"安装Angular6\"></a>安装Angular6</h2><p>前提准备：电脑上已经存在node.js（版本 为8.X或者10.X），因为使用angular一般都需要它的angular/cli脚手架，需要使用ndoe.js的包管理器npm。<br>安装的angular版本是angular6，进入电脑的cmd命令行环境下，运行如下命令<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g <span class=\"meta\">@angular</span>/cli</span><br></pre></td></tr></table></figure></p>\n<p>安装完毕后，在该环境下运行如下命令<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng -version</span><br></pre></td></tr></table></figure></p>\n<p>出现如下图所示，代表安装成功</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/angular-verison.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><p>在cmd命令行环境下，运行以下命令<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng <span class=\"keyword\">new</span> myApp</span><br></pre></td></tr></table></figure></p>\n<p>然后等待angular/cli脚手架自动新建一个myApp的项目，然后cd myApp目录下，运行以下命令<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng server --open <span class=\"comment\">//open是参数，即运行成功后自动打开</span></span><br><span class=\"line\">                 <span class=\"comment\">//浏览器，并进入本地4200端口界面</span></span><br></pre></td></tr></table></figure></p>\n<p>在浏览器的本地4200端口出现如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/csh-angular.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"Angular6项目文件\"><a href=\"#Angular6项目文件\" class=\"headerlink\" title=\"Angular6项目文件\"></a>Angular6项目文件</h2><p>angular新建项目的目录结构如下所示</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/angular-file.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"angular-json\"><a href=\"#angular-json\" class=\"headerlink\" title=\"angular.json\"></a>angular.json</h3><p>在angular6以前，该文件名为.angular.json，angular6改成了angular.json，少了一个小数点，这个文件是脚手架的核心配置文件。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"projects\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"myApp\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"root\"</span>: <span class=\"string\">\"\"</span>, <span class=\"comment\">//项目的根</span></span><br><span class=\"line\">      <span class=\"string\">\"sourceRoot\"</span>: <span class=\"string\">\"src\"</span>, <span class=\"comment\">//项目的源码地址，即项目源码都在src文件夹下</span></span><br><span class=\"line\">      <span class=\"string\">\"projectType\"</span>: <span class=\"string\">\"application\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"prefix\"</span>: <span class=\"string\">\"app\"</span>, <span class=\"comment\">//前缀，新建组件时，其选择器为 'app-组件名'</span></span><br><span class=\"line\">      <span class=\"string\">\"schematics\"</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"string\">\"architect\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"build\"</span>: &#123; <span class=\"comment\">//项目打包部分</span></span><br><span class=\"line\">          <span class=\"string\">\"builder\"</span>: <span class=\"string\">\"@angular-devkit/build-angular:browser\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"options\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"outputPath\"</span>: <span class=\"string\">\"dist/myApp\"</span>, <span class=\"comment\">//打包后的项目地址</span></span><br><span class=\"line\">            <span class=\"string\">\"index\"</span>: <span class=\"string\">\"src/index.html\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"main\"</span>: <span class=\"string\">\"src/main.ts\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"polyfills\"</span>: <span class=\"string\">\"src/polyfills.ts\"</span>, <span class=\"comment\">//项目的腻子文件</span></span><br><span class=\"line\">            <span class=\"string\">\"tsConfig\"</span>: <span class=\"string\">\"src/tsconfig.app.json\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"assets\"</span>: [ <span class=\"comment\">//项目在资源地址</span></span><br><span class=\"line\">              <span class=\"string\">\"src/favicon.ico\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"src/assets\"</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">\"styles\"</span>: [ <span class=\"comment\">//项目的引入的css文件</span></span><br><span class=\"line\">              <span class=\"string\">\"src/styles.css\"</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">\"scripts\"</span>: [] <span class=\"comment\">//项目引入的js文件</span></span><br><span class=\"line\">          &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><p>在项目下面存在pack.json文件，该json文件存放了项目的信息</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"name\"</span>: <span class=\"string\">\"my-app\"</span>, <span class=\"comment\">//项目名称</span></span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>, <span class=\"comment\">//项目版本</span></span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"ng\"</span>: <span class=\"string\">\"ng\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"ng serve\"</span>, <span class=\"comment\">//项目运行命令</span></span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"ng build\"</span>, <span class=\"comment\">//项目打包命令</span></span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"ng test\"</span>, <span class=\"comment\">//项目测试命令</span></span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"ng lint\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"e2e\"</span>: <span class=\"string\">\"ng e2e\"</span> <span class=\"comment\">//项目端到端测试命令</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"src-main-ts\"><a href=\"#src-main-ts\" class=\"headerlink\" title=\"src/main.ts\"></a>src/main.ts</h3><p>这个文件记录了项目从哪个模块开始运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; enableProdMode &#125; from &apos;@angular/core&apos;;</span><br><span class=\"line\">import &#123; platformBrowserDynamic &#125; from &apos;@angular/platform-browser-dynamic&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; AppModule &#125; from &apos;./app/app.module&apos;;</span><br><span class=\"line\">import &#123; environment &#125; from &apos;./environments/environment&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">if (environment.production) &#123;</span><br><span class=\"line\">  enableProdMode();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">platformBrowserDynamic().bootstrapModule(AppModule)</span><br><span class=\"line\">  .catch(err =&gt; console.log(err));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"src-polyfill-ts\"><a href=\"#src-polyfill-ts\" class=\"headerlink\" title=\"src/polyfill.ts\"></a>src/polyfill.ts</h3><p>这个文件叫做腻子脚本，angular是默认对ie浏览器是不支持的，即新建项目后，在ie浏览器的本地4200端口页面是一片空白，将以下的注释取消，在ie浏览器中可以看到页面。<br><strong>将项目的默认注释取消后，其对ie浏览器的支持也不是特别好，<a href=\"https://angular.io/\" target=\"_blank\" rel=\"noopener\">Angualr官网</a>在ie11中有的页面页打不开</strong><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/polyfill.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"src-index-html\"><a href=\"#src-index-html\" class=\"headerlink\" title=\"src/index.html\"></a>src/index.html</h3><p>该文件记录了页面是从开始模块(AppModule)中声明的哪一个组件开始</p>\n<pre><code>&lt;html lang=&quot;en&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot;&gt;\n        &lt;title&gt;MyApp&lt;/title&gt;\n        &lt;base href=&quot;/&quot;&gt;\n        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;\n         &lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;favicon.ico&quot;&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;app-root&gt;&lt;/app-root&gt; //从AppModule的app-root组件开始展示页面\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h3 id=\"src-app-app-module-ts\"><a href=\"#src-app-app-module-ts\" class=\"headerlink\" title=\"src/app/app.module.ts\"></a>src/app/app.module.ts</h3><p>这个文件是项目默认的根模块</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [</span><br><span class=\"line\">    AppComponent</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    BrowserModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent] <span class=\"comment\">//bootstrap代表从哪个组件开始编译</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>在src/main.ts中引入的启动模块就这个模块，所以这个模块也叫做项目的根模块，在这个模块中，默认定义了一个根组件，即AppComponent，这个组件定义的选择器是 ‘app-root’，这个选择器在src/index.html中被使用，即这个组件也叫做根组件。<br><strong>以上文件为angular项目的主要的重要文件</strong></p>\n<h2 id=\"Angular6命令大全\"><a href=\"#Angular6命令大全\" class=\"headerlink\" title=\"Angular6命令大全\"></a>Angular6命令大全</h2><p>angular为使用者提供了诸多帮助，在cmd环境下，使用以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng --help</span><br></pre></td></tr></table></figure></p>\n<p>其命令如下图所示<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/ng-help.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"ng-add\"><a href=\"#ng-add\" class=\"headerlink\" title=\"ng add\"></a>ng add</h3><p>ng add是angular6中新出现的命令，该命令使得向项目中添加新功能更加的方便。<br>例如，在项目根目录下运行如下命令添加<strong>ng-zorro</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add ng-zorro-antd</span><br></pre></td></tr></table></figure></p>\n<p>命令运行完成后，使用ng serve运行项目，浏览器打开本地4200端口，出现下图。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/ng-zorro-ant.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>这代表在这个项目中可以使用<a href=\"https://ng.ant.design/docs/introduce/zh\" target=\"_blank\" rel=\"noopener\">ng-zorro官网</a>的组件</p>\n<h3 id=\"ng-new\"><a href=\"#ng-new\" class=\"headerlink\" title=\"ng new\"></a>ng new</h3><p>该命令是创建一个新的angular项目，使用如下命令，可以创建一个新项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new myApp //创建一个项目名为myApp的angular项目</span><br><span class=\"line\">ng new myApp --routing //这个命令同上，不同之处这个命令会在项目中</span><br><span class=\"line\">      //自动生成代表项目路由的文件 app-routing.module.ts</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ng-generate\"><a href=\"#ng-generate\" class=\"headerlink\" title=\"ng generate\"></a>ng generate</h3><p>这个命令是angular项目中最主要的命令之一，新建组件，服务，指令，模块都可以在项目的根目录下使用这个命令进行创建。</p>\n<table>\n<thead>\n<tr>\n<th>默认创建名为home</th>\n<th>完整写法</th>\n<th>最简写法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>组件</td>\n<td>ng generate componetent home</td>\n<td>ng g c home</td>\n</tr>\n<tr>\n<td>服务</td>\n<td>ng generate service home</td>\n<td>ng g s home</td>\n</tr>\n<tr>\n<td>指令</td>\n<td>ng generate directive home</td>\n<td>ng g d home</td>\n</tr>\n<tr>\n<td>管道</td>\n<td>ng generate pipe home</td>\n<td>ng g p home</td>\n</tr>\n<tr>\n<td>类</td>\n<td>ng generate class home</td>\n<td>ng g cl home</td>\n</tr>\n<tr>\n<td>接口</td>\n<td>ng generate interface home</td>\n<td>ng g i home</td>\n</tr>\n<tr>\n<td>模块</td>\n<td>ng generate module home</td>\n<td>ng g m home</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：</strong><br>1，angular以前的服务使用的依赖注入，在angular6版本中，服务采用的相依注入<br>2，创建组件component和类class都是c开头，所以使用最简写法有一定区别，如下所示，创建组件使用的是ng g c，创建类时使用的是ng g cl。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c 组件名 //创建组件时使用的是c</span><br><span class=\"line\">ng g cl 类名 //创建类时使用的是cl</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ng-build\"><a href=\"#ng-build\" class=\"headerlink\" title=\"ng build\"></a>ng build</h3><p>angular项目采用的语言是typescript语法，由微软开发，该语法不直接在浏览器中运行，需要将ts(typescript)转换为js语法才可以运行，ng build命令就是对angular项目进行打包，生成静态的文件。</p>\n<h3 id=\"其它命令\"><a href=\"#其它命令\" class=\"headerlink\" title=\"其它命令\"></a>其它命令</h3><p>angular还有其它的一些命令</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ng serve</td>\n<td>运行项目，存在–open参数时自动打开浏览器</td>\n</tr>\n<tr>\n<td>ng eject</td>\n<td>提取项目的webpack.config.json文件，一旦提取就不能还原</td>\n</tr>\n<tr>\n<td>ng libary 库名</td>\n<td>用户创建库</td>\n</tr>\n<tr>\n<td>ng help</td>\n<td>查找帮助</td>\n</tr>\n<tr>\n<td>ng version</td>\n<td>查看版本</td>\n</tr>\n<tr>\n<td>ng update</td>\n<td>项目的依赖有重大改变时，自动更新代码</td>\n</tr>\n<tr>\n<td>ng project 项目名</td>\n<td>已移除，在本项目下新建一个项目</td>\n</tr>\n</tbody>\n</table>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjo3nm9j8000gu0vcq6n10a8e","category_id":"cjo3nm9ja000iu0vcrvsxluao","_id":"cjo3nm9jd000mu0vc2u82fpfi"},{"post_id":"cjo3nm9j9000hu0vcgha3tdj9","category_id":"cjo3nm9ja000iu0vcrvsxluao","_id":"cjo3nm9je000ou0vcnbv8stku"},{"post_id":"cjo3nxc7f0012u0vcxuukijvw","category_id":"cjo3nm9is0004u0vcenu3gv69","_id":"cjo3nxc7i0015u0vcjmknhu8d"}],"PostTag":[{"post_id":"cjo3nm9j8000gu0vcq6n10a8e","tag_id":"cjo3nm9ja000ju0vc95f2k4gp","_id":"cjo3nm9jf000ru0vcxo4gprqr"},{"post_id":"cjo3nm9j8000gu0vcq6n10a8e","tag_id":"cjo3nm9jb000lu0vcyzribqvu","_id":"cjo3nm9jg000su0vcz8xiufwt"},{"post_id":"cjo3nm9j8000gu0vcq6n10a8e","tag_id":"cjo3nm9jd000nu0vc18laizsm","_id":"cjo3nm9jh000uu0vczss2d01s"},{"post_id":"cjo3nm9j8000gu0vcq6n10a8e","tag_id":"cjo3nm9je000pu0vcc6ptmlpu","_id":"cjo3nm9jh000vu0vcnlyx50kh"},{"post_id":"cjo3nm9j9000hu0vcgha3tdj9","tag_id":"cjo3nm9ja000ju0vc95f2k4gp","_id":"cjo3nm9jk000yu0vcw3mmestp"},{"post_id":"cjo3nm9j9000hu0vcgha3tdj9","tag_id":"cjo3nm9jb000lu0vcyzribqvu","_id":"cjo3nm9jk000zu0vcw2azsvtm"},{"post_id":"cjo3nm9j9000hu0vcgha3tdj9","tag_id":"cjo3nm9jd000nu0vc18laizsm","_id":"cjo3nm9jk0010u0vcqunxdzsf"},{"post_id":"cjo3nm9j9000hu0vcgha3tdj9","tag_id":"cjo3nm9je000pu0vcc6ptmlpu","_id":"cjo3nm9jl0011u0vcv09617ty"},{"post_id":"cjo3nxc7f0012u0vcxuukijvw","tag_id":"cjo3nm9it0005u0vcchvnxhe4","_id":"cjo3nxc7h0013u0vc8a1e0knr"},{"post_id":"cjo3nxc7f0012u0vcxuukijvw","tag_id":"cjo3nm9iv0007u0vcnrrlhfxd","_id":"cjo3nxc7i0014u0vcldtsuuso"}],"Tag":[{"name":"angular安装","_id":"cjo3nm9it0005u0vcchvnxhe4"},{"name":"angular","_id":"cjo3nm9iv0007u0vcnrrlhfxd"},{"name":"hexo","_id":"cjo3nm9ja000ju0vc95f2k4gp"},{"name":"git","_id":"cjo3nm9jb000lu0vcyzribqvu"},{"name":"github","_id":"cjo3nm9jd000nu0vc18laizsm"},{"name":"node.js","_id":"cjo3nm9je000pu0vcc6ptmlpu"}]}}