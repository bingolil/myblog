{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-allprod.png","path":"images/angular-allprod.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-cl.png","path":"images/angular-cl.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-file.png","path":"images/angular-file.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-formarray.png","path":"images/angular-formarray.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-formarray2.png","path":"images/angular-formarray2.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-gouzi.png","path":"images/angular-gouzi.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-console.png","path":"images/angular-h-console.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-home.png","path":"images/angular-h-home.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-login.png","path":"images/angular-h-login.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-route-detail1.png","path":"images/angular-h-route-detail1.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-route-detail2.png","path":"images/angular-h-route-detail2.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-route-detail3.png","path":"images/angular-h-route-detail3.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-route-diff1.png","path":"images/angular-h-route-diff1.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-route-diff2.png","path":"images/angular-h-route-diff2.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-route-err1.png","path":"images/angular-h-route-err1.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-route-err2.png","path":"images/angular-h-route-err2.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-route-joke-getParams.png","path":"images/angular-h-route-joke-getParams.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-route-joke-list-button.png","path":"images/angular-h-route-joke-list-button.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-route-joke-list.png","path":"images/angular-h-route-joke-list.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-route-joke1.png","path":"images/angular-h-route-joke1.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-route-joke2.png","path":"images/angular-h-route-joke2.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-route-joke3.png","path":"images/angular-h-route-joke3.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-route-joken.png","path":"images/angular-h-route-joken.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-route-list.png","path":"images/angular-h-route-list.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-route-snapshot.png","path":"images/angular-h-route-snapshot.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-h-route-subscribe.png","path":"images/angular-h-route-subscribe.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-lazy-home.png","path":"images/angular-lazy-home.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-lazy-product.png","path":"images/angular-lazy-product.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-ngForm.png","path":"images/angular-ngForm.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-ngVInitError.png","path":"images/angular-ngVInitError.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-route-home.png","path":"images/angular-route-home.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-route-joke.png","path":"images/angular-route-joke.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-route-prod.png","path":"images/angular-route-prod.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-rxjs-be1.png","path":"images/angular-rxjs-be1.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-rxjs-be2.png","path":"images/angular-rxjs-be2.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-rxjs-observer.png","path":"images/angular-rxjs-observer.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-rxjs-rey.png","path":"images/angular-rxjs-rey.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-rxjs-subject.png","path":"images/angular-rxjs-subject.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-service.png","path":"images/angular-service.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-session.png","path":"images/angular-session.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-setting-1.png","path":"images/angular-setting-1.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-setting-2.png","path":"images/angular-setting-2.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/angular-verison.png","path":"images/angular-verison.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/com-tree.png","path":"images/com-tree.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/csh-angular.png","path":"images/csh-angular.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/ng-help.png","path":"images/ng-help.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/ng-zorro-ant.png","path":"images/ng-zorro-ant.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/polyfill.png","path":"images/polyfill.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/tags/index.md","hash":"afa5077173932fcd10c9e64703ea6cbe8e9617f6","modified":1637658504999},{"_id":"source/categories/index.md","hash":"0bc92bb12567d57a787e3bbb914910db1d3b5e97","modified":1637658431561},{"_id":"source/_posts/angular/learn-1.md","hash":"f8c92913c8a78129b56770245cfc2795cc7b9a41","modified":1637717416827},{"_id":"source/_posts/angular/learn-2.md","hash":"3e954197d7f8187ba95b2cd2a2a553eb73908b59","modified":1637718732365},{"_id":"source/_posts/angular/learn-3.md","hash":"e71b05525a42ad9e52f570387bd65cc785adbaba","modified":1637716678254},{"_id":"source/_posts/angular/learn-4.md","hash":"9f392ee34250ec6758faa8957232db71b74fc00d","modified":1637716388990},{"_id":"source/_posts/angular/learn-5.md","hash":"40810491be82f3da6a028011add9110c1a22d8a7","modified":1637716406962},{"_id":"source/_posts/angular/learn-6.md","hash":"341d105aa47a7fa251599598772befcd064db24e","modified":1637722457510},{"_id":"source/_posts/angular/learn-7.md","hash":"1764f4e5f90b47d343ad5aff34097625cd74bb4d","modified":1637716335141},{"_id":"source/_posts/angular/learn-8.md","hash":"106e260cd2b382bd7aa7ae9d34349f13ee55c79e","modified":1637722714676},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1637655111674},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1637655111674},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1637655111686},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1637655111674},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1637655111684},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1637655111687},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1637655111687},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1637655111686},{"_id":"themes/next/_config.yml","hash":"ca6101c1e9259ecc84c2e326eaddfd193d2f5081","modified":1637660058049},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1637655111689},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1637655111699},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1637655111741},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1637655111675},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1637655111678},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1637655111675},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1637655111679},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1637655111680},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1637655111682},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1637655111682},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1637655111682},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1637655111683},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1637655111684},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1637655111684},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1637655111689},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1637655111690},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1637655111690},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1637655111690},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1637655111690},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1637655111692},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1637655111692},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1637655111692},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1637655111692},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1637655111701},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1637655111701},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1637655111701},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1637655111701},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1637655111702},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1637655111702},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1637655111703},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1637655111703},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1637655111704},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1637655111704},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1637655111704},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1637655111705},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1637655111705},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1637655111705},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1637655111706},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1637655111706},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1637655111707},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1637655111707},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1637655111707},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1637655111708},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1637655111709},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1637655111709},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1637655111709},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1637655111740},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1637655111740},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1637655111740},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1637655111740},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1637655111741},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1637655111741},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1637655111751},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1637655111676},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1637655111676},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1637655111677},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1637655111678},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1637655111695},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1637655111695},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1637655111696},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1637655111697},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1637655111697},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1637655111698},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1637655111698},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1637655111699},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1637655111699},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1637655111693},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1637655111693},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1637655111694},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1637655111694},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1637655111710},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1637655111710},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1637655111711},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1637655111712},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1637655111715},{"_id":"themes/next/layout/_partials/footer.swig","hash":"2e083be33fea10e8984e8d827649a9ac1905835a","modified":1637658638100},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1637655111717},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1637655111721},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1637655111721},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1637655111723},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1637655111723},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1637655111725},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1637655111726},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1637655111728},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1637655111732},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1637655111734},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1637655111734},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1637655111743},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1637655111748},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1637655111748},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1637655111749},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1637655111749},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1637655111750},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1637655111750},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1637655111750},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1637655111751},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1637655111751},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1637655111752},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1637655111752},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1637655111752},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1637655111753},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1637655111754},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1637655111754},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1637655111755},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1637655111755},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1637655111755},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1637655111755},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1637655111756},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1637655111780},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1637655111789},{"_id":"themes/next/source/images/angular-allprod.png","hash":"ca3974f705ef90743d905bb510a832fa2bb2c2e8","modified":1636210403960},{"_id":"themes/next/source/images/angular-cl.png","hash":"eacd89681ae3b6443cfb2b5b5d7dfdc2a4a40428","modified":1636210403960},{"_id":"themes/next/source/images/angular-file.png","hash":"b2e4e144cfef8c21d9b47eeeed3c9eaf8cc5e078","modified":1636210403961},{"_id":"themes/next/source/images/angular-formarray.png","hash":"42f2ab755de02fe641c1e60a00135dcf97ce936d","modified":1636210403962},{"_id":"themes/next/source/images/angular-formarray2.png","hash":"45dba23d2c814e82bb0308cefea922d5b7ec8657","modified":1636210403963},{"_id":"themes/next/source/images/angular-gouzi.png","hash":"4932238ec384df3fcc0c80bd282ea2c2bd32057e","modified":1636210403963},{"_id":"themes/next/source/images/angular-h-console.png","hash":"ad932deb5870dccdad6b7788819c417d7a43a9b0","modified":1636210403963},{"_id":"themes/next/source/images/angular-h-home.png","hash":"bc012f278cd349a2d63a0957594c54c71074d3cf","modified":1636210403964},{"_id":"themes/next/source/images/angular-h-login.png","hash":"217cf1f55bd126eb3ee6b2b3693c54980a8e5a64","modified":1636210403965},{"_id":"themes/next/source/images/angular-h-route-detail1.png","hash":"b8398e2987863b722eacd0779dd1796e7dbf8ebc","modified":1636210403965},{"_id":"themes/next/source/images/angular-h-route-detail2.png","hash":"31fba97e4d882318f7f32d015a977cce8f4498b7","modified":1636210403965},{"_id":"themes/next/source/images/angular-h-route-detail3.png","hash":"7d86e3ac5e23358b98e0deb1d96f2721bd78b706","modified":1636210403966},{"_id":"themes/next/source/images/angular-h-route-diff2.png","hash":"86a4cf58035003a821548a8316d6a02882ebb16a","modified":1636210403967},{"_id":"themes/next/source/images/angular-h-route-err2.png","hash":"4416e1ef38656be2252dccee805998a203adbeee","modified":1636210403969},{"_id":"themes/next/source/images/angular-h-route-joke-getParams.png","hash":"d8c8bf02cbea6a3443eef8b480ecea87b1562430","modified":1636210403970},{"_id":"themes/next/source/images/angular-h-route-joke-list-button.png","hash":"eab868673d864953ebf8d132e18dd6a7466e49ef","modified":1636210403970},{"_id":"themes/next/source/images/angular-h-route-joke-list.png","hash":"9a81ad168f87ca054d6842bd93f94d36a3c5acf7","modified":1636210403970},{"_id":"themes/next/source/images/angular-h-route-joke1.png","hash":"f6f63b55a8bfb7637145276d3bbbae633501a5ee","modified":1636210403971},{"_id":"themes/next/source/images/angular-h-route-joke2.png","hash":"d6e73d18f1f73b0009947e750eafb50a3f5a40ae","modified":1636210403971},{"_id":"themes/next/source/images/angular-h-route-joke3.png","hash":"c6a9c4d1d348c6fe6378cc3283ce3d61abb57bb3","modified":1636210403971},{"_id":"themes/next/source/images/angular-h-route-joken.png","hash":"54e72e1f77ff0a0520214caf994d6d3764518347","modified":1636210403971},{"_id":"themes/next/source/images/angular-h-route-list.png","hash":"6466f37d124a82de3173330836ea350d14e2781b","modified":1636210403972},{"_id":"themes/next/source/images/angular-h-route-snapshot.png","hash":"db681af54057f1e921c2ebe5dafc8d482cc462f3","modified":1636210403972},{"_id":"themes/next/source/images/angular-h-route-subscribe.png","hash":"9afdb4f2a18e37e3910b36b7efd8db95cb56d3da","modified":1636210403973},{"_id":"themes/next/source/images/angular-lazy-home.png","hash":"dddf160e43470bb5b2578430c64822e47d7e8c7a","modified":1636210403973},{"_id":"themes/next/source/images/angular-lazy-product.png","hash":"265ef2d677fa5ef78732ced34415d8e8a0de576b","modified":1636210403975},{"_id":"themes/next/source/images/angular-ngForm.png","hash":"f0a2e47106bc5c61de2dade78e2659ad9ed835b5","modified":1636210403976},{"_id":"themes/next/source/images/angular-ngVInitError.png","hash":"3fab1b1a1d4f22aed06283094a801e6486baaf91","modified":1636210403977},{"_id":"themes/next/source/images/angular-route-home.png","hash":"e9d7a24c31bcb777b94b882b0c412b372748ae66","modified":1636210403978},{"_id":"themes/next/source/images/angular-route-joke.png","hash":"4680e09da865f139fa786cc504ac16f5c6440102","modified":1636210403978},{"_id":"themes/next/source/images/angular-route-prod.png","hash":"06e24a57b74506a13f1c5ba9c407f6f80608102f","modified":1636210403979},{"_id":"themes/next/source/images/angular-rxjs-be1.png","hash":"a6b8ffc3177f8b6a6835da1feae58045017b56f3","modified":1636210403979},{"_id":"themes/next/source/images/angular-rxjs-be2.png","hash":"583b809a1ffa0f8cc5bb126e30390b64585d1a0f","modified":1636210403980},{"_id":"themes/next/source/images/angular-rxjs-observer.png","hash":"9c4504528e266781fc5b5fd3eced43c0f059adb9","modified":1636210403980},{"_id":"themes/next/source/images/angular-rxjs-rey.png","hash":"5cf269116d4054493157f02cb203589d76170376","modified":1636210403980},{"_id":"themes/next/source/images/angular-rxjs-subject.png","hash":"81c1eedc34cb5bc5e77c1a110fa455e506a14f1e","modified":1636210403981},{"_id":"themes/next/source/images/angular-service.png","hash":"7cb2f1b81330e5510db4f45e4dc24043302b762a","modified":1636210403981},{"_id":"themes/next/source/images/angular-session.png","hash":"51a8e9b8acdf9f9fb6f42be471c1c596784c1abb","modified":1636210403981},{"_id":"themes/next/source/images/angular-setting-1.png","hash":"8a9a86968421aba41fb421fdb7e127b69b5f9276","modified":1636210403981},{"_id":"themes/next/source/images/angular-setting-2.png","hash":"eee258660e95458dfb8e856f4f287dde1e37ef21","modified":1636210403982},{"_id":"themes/next/source/images/angular-verison.png","hash":"7dbb17506644db6382e3fe06ac03a62563451667","modified":1636210403983},{"_id":"themes/next/source/images/com-tree.png","hash":"b0b81edc0e40a4bc4e5e5402d8316b0984ae90b5","modified":1636210403983},{"_id":"themes/next/source/images/csh-angular.png","hash":"0b1e6211235b7f9cbf49e7bb7999db7810734f0b","modified":1636210403984},{"_id":"themes/next/source/images/favicon.ico","hash":"9496ebbfd93eb286080422e150f53db8d2b6c962","modified":1636264903287},{"_id":"themes/next/source/images/ng-help.png","hash":"f769fcc32f5eb38dd507784c75a06b94776c3b6d","modified":1636210404005},{"_id":"themes/next/source/images/ng-zorro-ant.png","hash":"041f8e545a911dab9433478a42a15bcf8bb1c56c","modified":1636210404006},{"_id":"themes/next/source/images/polyfill.png","hash":"f6e83891d56d83466228e826501131b5f013ab3c","modified":1636210404008},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1637655111799},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1637655111794},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1637655111795},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1637655111796},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1637655111797},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1637655111797},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1637655111799},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1637655111713},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1637655111713},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1637655111713},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1637655111714},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1637655111714},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1637655111714},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1637655111714},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1637655111716},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1637655111716},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1637655111717},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1637655111717},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1637655111718},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1637655111718},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1637655111718},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1637655111720},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1637655111720},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1637655111720},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1637655111723},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1637655111721},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1637655111724},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1637655111724},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1637655111724},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1637655111725},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1637655111727},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1637655111727},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1637655111727},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1637655111728},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1637655111728},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1637655111729},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1637655111729},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1637655111730},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1637655111731},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1637655111731},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1637655111731},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1637655111731},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1637655111732},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1637655111732},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1637655111733},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1637655111735},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1637655111735},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1637655111735},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1637655111736},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1637655111736},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1637655111737},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1637655111737},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1637655111737},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1637655111738},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1637655111738},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1637655111743},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1637655111744},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1637655111744},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1637655111745},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1637655111745},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1637655111745},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1637655111746},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1637655111746},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1637655111747},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1637655111747},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1637655111746},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1637655111788},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1637655111788},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1637655111788},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1637655111788},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1637655111789},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1637655111803},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1637655111803},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1637655111797},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1637655111798},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1637655111756},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1637655111757},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1637655111757},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1637655111765},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1637655111769},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1637655111769},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1637655111773},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1637655111773},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1637655111775},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1637655111776},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1637655111777},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1637655111777},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1637655111777},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1637655111780},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1637655111781},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1637655111783},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1637655111783},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1637655111784},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1637655111784},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1637655111784},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1637655111784},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1637655111782},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1637655111782},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1637655111782},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1637655111782},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1637655111785},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1637655111783},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1637655111785},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1637655111785},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1637655111787},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1637655111787},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1637655111787},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1637655111800},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1637655111801},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1637655111758},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1637655111757},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1637655111758},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1637655111758},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1637655111759},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1637655111760},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1637655111760},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1637655111760},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1637655111761},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1637655111761},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1637655111762},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1637655111762},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1637655111763},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1637655111763},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1637655111763},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1637655111763},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1637655111764},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1637655111764},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1637655111765},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1637655111765},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1637655111765},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1637655111765},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1637655111766},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1637655111766},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1637655111767},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1637655111767},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1637655111767},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1637655111768},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1637655111768},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1637655111768},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1637655111769},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1637655111770},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1637655111771},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1637655111771},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1637655111771},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1637655111771},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1637655111772},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1637655111772},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1637655111772},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1637655111772},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1637655111773},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1637655111775},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1637655111775},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1637655111776},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1637655111776},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1637655111777},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1637655111778},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1637655111778},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1637655111778},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1637655111778},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1637655111779},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1637655111779},{"_id":"themes/next/source/images/angular-h-route-diff1.png","hash":"131a9b80e2c9085cc7b6ad7ecb309d63fe468672","modified":1636210403967},{"_id":"themes/next/source/images/angular-h-route-err1.png","hash":"837a91e8d928c478534f0a97674feaa9c6b90c52","modified":1636210403968},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1637655111801},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1637655111802},{"_id":"public/tags/index.html","hash":"3d6c5bdc16143e2fd3506b760c74201018f9eea2","modified":1637802118051},{"_id":"public/categories/index.html","hash":"c42dd3c93ff9721c4b02b6b098f020630c495bc5","modified":1637802118051},{"_id":"public/archives/index.html","hash":"da00b3af32b203c52ac38c18102dad05585549ef","modified":1637802118051},{"_id":"public/archives/2018/index.html","hash":"8dcdcf5908371c3e962b39c89ae7361fdc54b57c","modified":1637802118051},{"_id":"public/archives/2018/11/index.html","hash":"607230b0a0a43374949e1626b53b42035a5dd1f8","modified":1637802118051},{"_id":"public/archives/2018/12/index.html","hash":"0282d820aab868b9754afbdabe89c723dfd1eae7","modified":1637802118051},{"_id":"public/archives/2019/index.html","hash":"7cd026fcefbc32a227e6f0092086301cddfb9fc7","modified":1637802118051},{"_id":"public/archives/2019/01/index.html","hash":"b90a19d09e85fad36f6040e6eba95fdcfceda125","modified":1637802118051},{"_id":"public/archives/2019/02/index.html","hash":"6e5312c224c789edd4f36163d9116d50aaf5d2ec","modified":1637802118051},{"_id":"public/categories/Angular/index.html","hash":"15cf5266a8e82ae92297977d166cd2c0d52af902","modified":1637802118051},{"_id":"public/tags/Angular安装/index.html","hash":"da3a3557b34cacfcf66b29db3c7edb5c7639a277","modified":1637802118051},{"_id":"public/tags/Angular/index.html","hash":"f22e0a14ba02a362280304e24ba3600bef9d86a8","modified":1637802118051},{"_id":"public/tags/Angular组件通讯/index.html","hash":"c0a69cdd0b95b1f7440d481cb0265e5243ca10ac","modified":1637802118051},{"_id":"public/tags/Angular表单/index.html","hash":"a623adb975cb886406732036294eea2de4027ad1","modified":1637802118051},{"_id":"public/tags/Rxjs/index.html","hash":"4218257830e4ab4bc879c2f1d9dceab9855f2d15","modified":1637802118051},{"_id":"public/tags/Angular生命周期钩子/index.html","hash":"0f21b69910d3947ada5bc674ed05a43d02684f0c","modified":1637802118051},{"_id":"public/tags/Angular路由/index.html","hash":"2793b90be65311df4c90017758efcf9da3b3b6a3","modified":1637802118051},{"_id":"public/2019/02/01/angular/learn-8/index.html","hash":"f8e59d743d5f4460c815a9b8f5b7281e7becdf83","modified":1637802118051},{"_id":"public/2019/01/21/angular/learn-7/index.html","hash":"d40e2621727e80c3326fdc4cec9620d2163556c0","modified":1637802118051},{"_id":"public/2019/01/07/angular/learn-6/index.html","hash":"3224ae3aec7792a29089e309768449532108ac69","modified":1637802118051},{"_id":"public/2018/12/19/angular/learn-5/index.html","hash":"f2e3d5e44a999aa68697d3a2496ba4edbc95f6d1","modified":1637802118051},{"_id":"public/2018/12/10/angular/learn-4/index.html","hash":"71da118cc9633851d2137535eba964a6ab651a7a","modified":1637802118051},{"_id":"public/2018/11/23/angular/learn-3/index.html","hash":"4c6027e65d2fe6b581361c1db77dbe7c5f81dff9","modified":1637802118051},{"_id":"public/2018/11/09/angular/learn-2/index.html","hash":"fdab40a0ed8a0e983fa0ffe7f63deb2f306b90ed","modified":1637802118051},{"_id":"public/2018/11/02/angular/learn-1/index.html","hash":"bfa63a2f457a1f4df95b055847481c2cd1cd9a39","modified":1637802118051},{"_id":"public/index.html","hash":"379bbc24a30d94b2d0bec2dcc95d0dcad8b8cbe7","modified":1637802118051},{"_id":"public/images/angular-allprod.png","hash":"ca3974f705ef90743d905bb510a832fa2bb2c2e8","modified":1637802118051},{"_id":"public/images/angular-cl.png","hash":"eacd89681ae3b6443cfb2b5b5d7dfdc2a4a40428","modified":1637802118051},{"_id":"public/images/angular-file.png","hash":"b2e4e144cfef8c21d9b47eeeed3c9eaf8cc5e078","modified":1637802118051},{"_id":"public/images/angular-formarray2.png","hash":"45dba23d2c814e82bb0308cefea922d5b7ec8657","modified":1637802118051},{"_id":"public/images/angular-formarray.png","hash":"42f2ab755de02fe641c1e60a00135dcf97ce936d","modified":1637802118051},{"_id":"public/images/angular-h-console.png","hash":"ad932deb5870dccdad6b7788819c417d7a43a9b0","modified":1637802118051},{"_id":"public/images/angular-gouzi.png","hash":"4932238ec384df3fcc0c80bd282ea2c2bd32057e","modified":1637802118051},{"_id":"public/images/angular-h-home.png","hash":"bc012f278cd349a2d63a0957594c54c71074d3cf","modified":1637802118051},{"_id":"public/images/angular-h-login.png","hash":"217cf1f55bd126eb3ee6b2b3693c54980a8e5a64","modified":1637802118051},{"_id":"public/images/angular-h-route-detail1.png","hash":"b8398e2987863b722eacd0779dd1796e7dbf8ebc","modified":1637802118051},{"_id":"public/images/angular-h-route-detail2.png","hash":"31fba97e4d882318f7f32d015a977cce8f4498b7","modified":1637802118051},{"_id":"public/images/angular-h-route-detail3.png","hash":"7d86e3ac5e23358b98e0deb1d96f2721bd78b706","modified":1637802118051},{"_id":"public/images/angular-h-route-diff2.png","hash":"86a4cf58035003a821548a8316d6a02882ebb16a","modified":1637802118051},{"_id":"public/images/angular-h-route-joke-getParams.png","hash":"d8c8bf02cbea6a3443eef8b480ecea87b1562430","modified":1637802118051},{"_id":"public/images/angular-h-route-err2.png","hash":"4416e1ef38656be2252dccee805998a203adbeee","modified":1637802118051},{"_id":"public/images/angular-h-route-joke-list-button.png","hash":"eab868673d864953ebf8d132e18dd6a7466e49ef","modified":1637802118051},{"_id":"public/images/angular-h-route-joke-list.png","hash":"9a81ad168f87ca054d6842bd93f94d36a3c5acf7","modified":1637802118051},{"_id":"public/images/angular-h-route-joke1.png","hash":"f6f63b55a8bfb7637145276d3bbbae633501a5ee","modified":1637802118051},{"_id":"public/images/angular-h-route-joke2.png","hash":"d6e73d18f1f73b0009947e750eafb50a3f5a40ae","modified":1637802118051},{"_id":"public/images/angular-h-route-joke3.png","hash":"c6a9c4d1d348c6fe6378cc3283ce3d61abb57bb3","modified":1637802118051},{"_id":"public/images/angular-h-route-joken.png","hash":"54e72e1f77ff0a0520214caf994d6d3764518347","modified":1637802118051},{"_id":"public/images/angular-h-route-list.png","hash":"6466f37d124a82de3173330836ea350d14e2781b","modified":1637802118051},{"_id":"public/images/angular-h-route-snapshot.png","hash":"db681af54057f1e921c2ebe5dafc8d482cc462f3","modified":1637802118051},{"_id":"public/images/angular-h-route-subscribe.png","hash":"9afdb4f2a18e37e3910b36b7efd8db95cb56d3da","modified":1637802118051},{"_id":"public/images/angular-lazy-home.png","hash":"dddf160e43470bb5b2578430c64822e47d7e8c7a","modified":1637802118051},{"_id":"public/images/angular-lazy-product.png","hash":"265ef2d677fa5ef78732ced34415d8e8a0de576b","modified":1637802118051},{"_id":"public/images/angular-ngForm.png","hash":"f0a2e47106bc5c61de2dade78e2659ad9ed835b5","modified":1637802118051},{"_id":"public/images/angular-ngVInitError.png","hash":"3fab1b1a1d4f22aed06283094a801e6486baaf91","modified":1637802118051},{"_id":"public/images/angular-route-home.png","hash":"e9d7a24c31bcb777b94b882b0c412b372748ae66","modified":1637802118051},{"_id":"public/images/angular-route-joke.png","hash":"4680e09da865f139fa786cc504ac16f5c6440102","modified":1637802118051},{"_id":"public/images/angular-rxjs-be1.png","hash":"a6b8ffc3177f8b6a6835da1feae58045017b56f3","modified":1637802118051},{"_id":"public/images/angular-route-prod.png","hash":"06e24a57b74506a13f1c5ba9c407f6f80608102f","modified":1637802118051},{"_id":"public/images/angular-rxjs-observer.png","hash":"9c4504528e266781fc5b5fd3eced43c0f059adb9","modified":1637802118051},{"_id":"public/images/angular-rxjs-be2.png","hash":"583b809a1ffa0f8cc5bb126e30390b64585d1a0f","modified":1637802118051},{"_id":"public/images/angular-rxjs-rey.png","hash":"5cf269116d4054493157f02cb203589d76170376","modified":1637802118051},{"_id":"public/images/angular-rxjs-subject.png","hash":"81c1eedc34cb5bc5e77c1a110fa455e506a14f1e","modified":1637802118051},{"_id":"public/images/angular-service.png","hash":"7cb2f1b81330e5510db4f45e4dc24043302b762a","modified":1637802118051},{"_id":"public/images/angular-session.png","hash":"51a8e9b8acdf9f9fb6f42be471c1c596784c1abb","modified":1637802118051},{"_id":"public/images/angular-setting-1.png","hash":"8a9a86968421aba41fb421fdb7e127b69b5f9276","modified":1637802118051},{"_id":"public/images/angular-setting-2.png","hash":"eee258660e95458dfb8e856f4f287dde1e37ef21","modified":1637802118051},{"_id":"public/images/angular-verison.png","hash":"7dbb17506644db6382e3fe06ac03a62563451667","modified":1637802118051},{"_id":"public/images/com-tree.png","hash":"b0b81edc0e40a4bc4e5e5402d8316b0984ae90b5","modified":1637802118051},{"_id":"public/images/csh-angular.png","hash":"0b1e6211235b7f9cbf49e7bb7999db7810734f0b","modified":1637802118051},{"_id":"public/images/favicon.ico","hash":"9496ebbfd93eb286080422e150f53db8d2b6c962","modified":1637802118051},{"_id":"public/images/ng-help.png","hash":"f769fcc32f5eb38dd507784c75a06b94776c3b6d","modified":1637802118051},{"_id":"public/images/ng-zorro-ant.png","hash":"041f8e545a911dab9433478a42a15bcf8bb1c56c","modified":1637802118051},{"_id":"public/images/polyfill.png","hash":"f6e83891d56d83466228e826501131b5f013ab3c","modified":1637802118051},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1637802118051},{"_id":"public/images/angular-h-route-diff1.png","hash":"131a9b80e2c9085cc7b6ad7ecb309d63fe468672","modified":1637802118051},{"_id":"public/images/angular-h-route-err1.png","hash":"837a91e8d928c478534f0a97674feaa9c6b90c52","modified":1637802118051},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1637802118051},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1637802118051},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1637802118051},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1637802118051},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1637802118051},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1637802118051},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1637802118051},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1637802118051},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1637802118051},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1637802118051},{"_id":"public/css/main.css","hash":"5a48e8452ba51a24e27dd2e1a1b2c85f8600bf07","modified":1637802118051},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1637802118051},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1637802118051},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1637802118051},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1637802118051}],"Category":[{"name":"Angular","_id":"ckwe931jv0004ycsz13jyhz1c"}],"Data":[],"Page":[{"title":"tags","date":"2021-11-23T09:08:06.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-11-23 17:08:06\ntype: \"tags\"\ncomments: false\n---\n","updated":"2021-11-23T09:08:24.999Z","path":"tags/index.html","layout":"page","_id":"ckwe931jo0000ycszehyu3gv1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2021-11-23T09:06:18.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-11-23 17:06:18\ntype: \"categories\"\ncomments: false\n---\n","updated":"2021-11-23T09:07:11.561Z","path":"categories/index.html","layout":"page","_id":"ckwe931jt0002ycsz1ba6alen","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Angular学习-1-新手入门","date":"2018-11-01T16:00:00.000Z","description":"Angular 是一个应用设计框架与开发平台，用于创建高效、复杂、精致的单页面应用。","_content":"## 安装Angular6\n前提准备：电脑上已经存在 `node.js`（版本 为8.X或者10.X），因为使用 `Angular` 一般都需要它的 `angular/cli` 脚手架，需要使用 `ndoe.js` 的包管理器 `npm`。\n安装的 `Angular` 版本是 `Angular6`，进入电脑的 `cmd` 命令行环境下，运行如下命令\n```typescript\nnpm install -g @angular/cli\n```\n安装完毕后，在该环境下运行如下命令\n```typescript\nng -version\n```\n出现如下图所示，代表安装成功\n\n![](https://bingolil.github.io/images/angular-verison.png)\n\n## 新建项目\n在 `cmd` 命令行环境下，运行以下命令\n```typescript\nng new myApp\n```\n然后等待 `angular/cli` 脚手架自动新建一个 `myApp` 的项目，然后 `cd myApp` 目录下，运行以下命令\n```typescript\nng server --open //open是参数，即运行成功后自动打开\n                 //浏览器，并进入本地4200端口界面\n```\n在浏览器的本地4200端口出现如下图所示。\n\n![](https://bingolil.github.io/images/csh-angular.png)\n## Angular6项目文件\n`Angular` 新建项目的目录结构如下所示\n\n![](https://bingolil.github.io/images/angular-file.png)\n### angular.json\n在 `Angular6` 以前，该文件名为.angular.json，`Angular6` 改成了angular.json，少了一个小数点，这个文件是脚手架的核心配置文件。\n```typescript\n\"projects\": {\n    \"myApp\": {\n      \"root\": \"\", //项目的根\n      \"sourceRoot\": \"src\", //项目的源码地址，即项目源码都在src文件夹下\n      \"projectType\": \"application\",\n      \"prefix\": \"app\", //前缀，新建组件时，其选择器为 'app-组件名'\n      \"schematics\": {},\n      \"architect\": {\n        \"build\": { //项目打包部分\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/myApp\", //打包后的项目地址\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": \"src/polyfills.ts\", //项目的腻子文件\n            \"tsConfig\": \"src/tsconfig.app.json\",\n            \"assets\": [ //项目在资源地址\n              \"src/favicon.ico\",\n              \"src/assets\"\n            ],\n            \"styles\": [ //项目引入的css文件\n              \"src/styles.css\"\n            ],\n            \"scripts\": [] //项目引入的js文件\n          }\n```\n### package.json\n在项目下面存在 `pack.json` 文件，该 `json` 文件存放了项目的信息\n\n```typescript\n\"name\": \"my-app\", //项目名称\n  \"version\": \"0.0.0\", //项目版本\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\", //项目运行命令\n    \"build\": \"ng build\", //项目打包命令\n    \"test\": \"ng test\", //项目测试命令\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\" //项目端到端测试命令\n```\n\n### src/main.ts\n这个文件记录了项目从哪个模块开始运行\n```typescript\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n```\n\n### src/polyfill.ts\n\n这个文件叫做腻子脚本，`Angular` 是默认对 `ie浏览器` 是不支持的，即新建项目后，在 `ie浏览器` 的本地4200端口页面是一片空白，将以下的注释取消，在ie浏览器中可以看到页面。\n**将项目的默认注释取消后，其对i e浏览器 的支持也不是特别好，[Angualr官网](https://angular.io/)在ie11中有的页面页打不开**\n![](https://bingolil.github.io/images/polyfill.png)\n\n### src/index.html\n\n该文件记录了页面是从开始模块 (`AppModule`) 中声明的哪一个组件开始\n```HTML\n    <html lang=\"en\">\n        <head>\n            <meta charset=\"utf-8\">\n            <title>MyApp</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n             <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n        </head>\n        <body>\n            <app-root></app-root> //从AppModule的app-root组件开始展示页面\n        </body>\n    </html>\n```\n\n### src/app/app.module.ts\n这个文件是项目默认的根模块\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent] //bootstrap代表从哪个组件开始编译\n})\nexport class AppModule { }\n```\n在 `src/main.ts` 中引入的启动模块就这个模块，所以这个模块也叫做项目的根模块，在这个模块中，默认定义了一个根组件，即 `AppComponent`，这个组件定义的选择器是  `app-root`，这个选择器在 `src/index.html` 中被使用，即这个组件也叫做根组件。\n**以上文件为 Angular 项目的主要的重要文件**\n## Angular6命令大全\n`Angular` 为开发者者提供了诸多帮助，在 `cmd` 环境下，使用以下命令\n```\nng --help\n```\n其命令如下图所示\n![](https://bingolil.github.io/images/ng-help.png)\n### ng add\n`ng add` 是 `Angular6` 中新出现的命令，该命令使得向项目中添加新功能更加的方便。\n例如，在项目根目录下运行如下命令添加 **`ng-zorro`**\n```\nng add ng-zorro-antd\n```\n命令运行完成后，使用 `ng serve` 运行项目，浏览器打开本地4200端口，出现下图。\n\n![](https://bingolil.github.io/images/ng-zorro-ant.png)\n这代表在这个项目中可以使用[ng-zorro官网](https://ng.ant.design/docs/introduce/zh)的组件\n\n### ng new\n该命令是创建一个新的 `Angular` 项目，使用如下命令，可以创建一个新项目\n```\nng new myApp //创建一个项目名为myApp的angular项目\nng new myApp --routing //这个命令同上，不同之处这个命令会在项目中\n      //自动生成代表项目路由的文件 app-routing.module.ts\n```\n### ng generate\n这个命令是 `Angular` 项目中最主要的命令之一，新建组件，服务，指令，模块都可以在项目的根目录下使用这个命令进行创建。\n\n| 默认创建名为home      | 完整写法   |    最简写法  |\n| --------   | -----  | ----  |\n| 组件| ng generate componetent home |  ng g c home    |\n| 服务| ng generate service home| ng g s home |\n| 指令| ng generate directive home |  ng g d home  |\n| 管道 | ng generate pipe home |  ng g p home  |\n| 类  | ng generate class home |  ng g cl home  |\n| 接口 | ng generate interface home |  ng g i home  |\n| 模块| ng generate module home |  ng g m home  |\n\n**注意：**\n1，`Angular` 以前的服务使用的依赖注入，在 `Angular6` 版本中，服务采用的相依注入。\n2，创建组件 `component` 和类 `class` 都是 `c` 开头，所以使用最简写法有一定区别，如下所示，创建组件使用的是 `ng g c`，创建类时使用的是 `ng g cl`。\n```\nng g c 组件名 //创建组件时使用的是c\nng g cl 类名 //创建类时使用的是cl\n```\n### ng build\n`Angular` 项目采用的语言是 `typescript` 语法，由微软开发，该语法不直接在浏览器中运行，需要将 `ts(typescript)` 转换为 `js` 语法才可以运行，`ng build` 命令就是对 `Angular` 项目进行打包，生成静态的文件。\n### 其它命令\n`Angular` 还有其它的一些命令\n\n| 命令 | 意义   | \n| --------   | -----  |\n| ng serve| 运行项目，存在--open参数时自动打开浏览器 | \n| ng eject| 提取项目的webpack.config.json文件，一旦提取就不能还原|\n| ng libary 库名| 用户创建库 | \n| ng help | 查找帮助  |\n| ng version  |查看版本  |\n| ng update |项目的依赖有重大改变时，自动更新代码  |\n| ng project 项目名| 已移除，在本项目下新建一个项目 |\n","source":"_posts/angular/learn-1.md","raw":"title: Angular学习-1-新手入门\ncategories: Angular\ndate: 2018-11-02\ntags: [Angular安装,Angular]\ndescription: Angular 是一个应用设计框架与开发平台，用于创建高效、复杂、精致的单页面应用。\n---\n## 安装Angular6\n前提准备：电脑上已经存在 `node.js`（版本 为8.X或者10.X），因为使用 `Angular` 一般都需要它的 `angular/cli` 脚手架，需要使用 `ndoe.js` 的包管理器 `npm`。\n安装的 `Angular` 版本是 `Angular6`，进入电脑的 `cmd` 命令行环境下，运行如下命令\n```typescript\nnpm install -g @angular/cli\n```\n安装完毕后，在该环境下运行如下命令\n```typescript\nng -version\n```\n出现如下图所示，代表安装成功\n\n![](https://bingolil.github.io/images/angular-verison.png)\n\n## 新建项目\n在 `cmd` 命令行环境下，运行以下命令\n```typescript\nng new myApp\n```\n然后等待 `angular/cli` 脚手架自动新建一个 `myApp` 的项目，然后 `cd myApp` 目录下，运行以下命令\n```typescript\nng server --open //open是参数，即运行成功后自动打开\n                 //浏览器，并进入本地4200端口界面\n```\n在浏览器的本地4200端口出现如下图所示。\n\n![](https://bingolil.github.io/images/csh-angular.png)\n## Angular6项目文件\n`Angular` 新建项目的目录结构如下所示\n\n![](https://bingolil.github.io/images/angular-file.png)\n### angular.json\n在 `Angular6` 以前，该文件名为.angular.json，`Angular6` 改成了angular.json，少了一个小数点，这个文件是脚手架的核心配置文件。\n```typescript\n\"projects\": {\n    \"myApp\": {\n      \"root\": \"\", //项目的根\n      \"sourceRoot\": \"src\", //项目的源码地址，即项目源码都在src文件夹下\n      \"projectType\": \"application\",\n      \"prefix\": \"app\", //前缀，新建组件时，其选择器为 'app-组件名'\n      \"schematics\": {},\n      \"architect\": {\n        \"build\": { //项目打包部分\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/myApp\", //打包后的项目地址\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": \"src/polyfills.ts\", //项目的腻子文件\n            \"tsConfig\": \"src/tsconfig.app.json\",\n            \"assets\": [ //项目在资源地址\n              \"src/favicon.ico\",\n              \"src/assets\"\n            ],\n            \"styles\": [ //项目引入的css文件\n              \"src/styles.css\"\n            ],\n            \"scripts\": [] //项目引入的js文件\n          }\n```\n### package.json\n在项目下面存在 `pack.json` 文件，该 `json` 文件存放了项目的信息\n\n```typescript\n\"name\": \"my-app\", //项目名称\n  \"version\": \"0.0.0\", //项目版本\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\", //项目运行命令\n    \"build\": \"ng build\", //项目打包命令\n    \"test\": \"ng test\", //项目测试命令\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\" //项目端到端测试命令\n```\n\n### src/main.ts\n这个文件记录了项目从哪个模块开始运行\n```typescript\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n```\n\n### src/polyfill.ts\n\n这个文件叫做腻子脚本，`Angular` 是默认对 `ie浏览器` 是不支持的，即新建项目后，在 `ie浏览器` 的本地4200端口页面是一片空白，将以下的注释取消，在ie浏览器中可以看到页面。\n**将项目的默认注释取消后，其对i e浏览器 的支持也不是特别好，[Angualr官网](https://angular.io/)在ie11中有的页面页打不开**\n![](https://bingolil.github.io/images/polyfill.png)\n\n### src/index.html\n\n该文件记录了页面是从开始模块 (`AppModule`) 中声明的哪一个组件开始\n```HTML\n    <html lang=\"en\">\n        <head>\n            <meta charset=\"utf-8\">\n            <title>MyApp</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n             <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n        </head>\n        <body>\n            <app-root></app-root> //从AppModule的app-root组件开始展示页面\n        </body>\n    </html>\n```\n\n### src/app/app.module.ts\n这个文件是项目默认的根模块\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent] //bootstrap代表从哪个组件开始编译\n})\nexport class AppModule { }\n```\n在 `src/main.ts` 中引入的启动模块就这个模块，所以这个模块也叫做项目的根模块，在这个模块中，默认定义了一个根组件，即 `AppComponent`，这个组件定义的选择器是  `app-root`，这个选择器在 `src/index.html` 中被使用，即这个组件也叫做根组件。\n**以上文件为 Angular 项目的主要的重要文件**\n## Angular6命令大全\n`Angular` 为开发者者提供了诸多帮助，在 `cmd` 环境下，使用以下命令\n```\nng --help\n```\n其命令如下图所示\n![](https://bingolil.github.io/images/ng-help.png)\n### ng add\n`ng add` 是 `Angular6` 中新出现的命令，该命令使得向项目中添加新功能更加的方便。\n例如，在项目根目录下运行如下命令添加 **`ng-zorro`**\n```\nng add ng-zorro-antd\n```\n命令运行完成后，使用 `ng serve` 运行项目，浏览器打开本地4200端口，出现下图。\n\n![](https://bingolil.github.io/images/ng-zorro-ant.png)\n这代表在这个项目中可以使用[ng-zorro官网](https://ng.ant.design/docs/introduce/zh)的组件\n\n### ng new\n该命令是创建一个新的 `Angular` 项目，使用如下命令，可以创建一个新项目\n```\nng new myApp //创建一个项目名为myApp的angular项目\nng new myApp --routing //这个命令同上，不同之处这个命令会在项目中\n      //自动生成代表项目路由的文件 app-routing.module.ts\n```\n### ng generate\n这个命令是 `Angular` 项目中最主要的命令之一，新建组件，服务，指令，模块都可以在项目的根目录下使用这个命令进行创建。\n\n| 默认创建名为home      | 完整写法   |    最简写法  |\n| --------   | -----  | ----  |\n| 组件| ng generate componetent home |  ng g c home    |\n| 服务| ng generate service home| ng g s home |\n| 指令| ng generate directive home |  ng g d home  |\n| 管道 | ng generate pipe home |  ng g p home  |\n| 类  | ng generate class home |  ng g cl home  |\n| 接口 | ng generate interface home |  ng g i home  |\n| 模块| ng generate module home |  ng g m home  |\n\n**注意：**\n1，`Angular` 以前的服务使用的依赖注入，在 `Angular6` 版本中，服务采用的相依注入。\n2，创建组件 `component` 和类 `class` 都是 `c` 开头，所以使用最简写法有一定区别，如下所示，创建组件使用的是 `ng g c`，创建类时使用的是 `ng g cl`。\n```\nng g c 组件名 //创建组件时使用的是c\nng g cl 类名 //创建类时使用的是cl\n```\n### ng build\n`Angular` 项目采用的语言是 `typescript` 语法，由微软开发，该语法不直接在浏览器中运行，需要将 `ts(typescript)` 转换为 `js` 语法才可以运行，`ng build` 命令就是对 `Angular` 项目进行打包，生成静态的文件。\n### 其它命令\n`Angular` 还有其它的一些命令\n\n| 命令 | 意义   | \n| --------   | -----  |\n| ng serve| 运行项目，存在--open参数时自动打开浏览器 | \n| ng eject| 提取项目的webpack.config.json文件，一旦提取就不能还原|\n| ng libary 库名| 用户创建库 | \n| ng help | 查找帮助  |\n| ng version  |查看版本  |\n| ng update |项目的依赖有重大改变时，自动更新代码  |\n| ng project 项目名| 已移除，在本项目下新建一个项目 |\n","slug":"angular/learn-1","published":1,"updated":"2021-11-24T01:30:16.827Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwe931jq0001ycszdi7keppu","content":"<h2 id=\"安装Angular6\"><a href=\"#安装Angular6\" class=\"headerlink\" title=\"安装Angular6\"></a>安装Angular6</h2><p>前提准备：电脑上已经存在 <code>node.js</code>（版本 为8.X或者10.X），因为使用 <code>Angular</code> 一般都需要它的 <code>angular/cli</code> 脚手架，需要使用 <code>ndoe.js</code> 的包管理器 <code>npm</code>。<br>安装的 <code>Angular</code> 版本是 <code>Angular6</code>，进入电脑的 <code>cmd</code> 命令行环境下，运行如下命令</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g <span class=\"meta\">@angular</span>/cli</span><br></pre></td></tr></table></figure>\n<p>安装完毕后，在该环境下运行如下命令</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng -version</span><br></pre></td></tr></table></figure>\n<p>出现如下图所示，代表安装成功</p>\n<p><img src=\"https://bingolil.github.io/images/angular-verison.png\"></p>\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><p>在 <code>cmd</code> 命令行环境下，运行以下命令</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng <span class=\"keyword\">new</span> myApp</span><br></pre></td></tr></table></figure>\n<p>然后等待 <code>angular/cli</code> 脚手架自动新建一个 <code>myApp</code> 的项目，然后 <code>cd myApp</code> 目录下，运行以下命令</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng server --open <span class=\"comment\">//open是参数，即运行成功后自动打开</span></span><br><span class=\"line\">                 <span class=\"comment\">//浏览器，并进入本地4200端口界面</span></span><br></pre></td></tr></table></figure>\n<p>在浏览器的本地4200端口出现如下图所示。</p>\n<p><img src=\"https://bingolil.github.io/images/csh-angular.png\"></p>\n<h2 id=\"Angular6项目文件\"><a href=\"#Angular6项目文件\" class=\"headerlink\" title=\"Angular6项目文件\"></a>Angular6项目文件</h2><p><code>Angular</code> 新建项目的目录结构如下所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-file.png\"></p>\n<h3 id=\"angular-json\"><a href=\"#angular-json\" class=\"headerlink\" title=\"angular.json\"></a>angular.json</h3><p>在 <code>Angular6</code> 以前，该文件名为.angular.json，<code>Angular6</code> 改成了angular.json，少了一个小数点，这个文件是脚手架的核心配置文件。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;projects&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;myApp&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;root&quot;</span>: <span class=\"string\">&quot;&quot;</span>, <span class=\"comment\">//项目的根</span></span><br><span class=\"line\">      <span class=\"string\">&quot;sourceRoot&quot;</span>: <span class=\"string\">&quot;src&quot;</span>, <span class=\"comment\">//项目的源码地址，即项目源码都在src文件夹下</span></span><br><span class=\"line\">      <span class=\"string\">&quot;projectType&quot;</span>: <span class=\"string\">&quot;application&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;prefix&quot;</span>: <span class=\"string\">&quot;app&quot;</span>, <span class=\"comment\">//前缀，新建组件时，其选择器为 &#x27;app-组件名&#x27;</span></span><br><span class=\"line\">      <span class=\"string\">&quot;schematics&quot;</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"string\">&quot;architect&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;build&quot;</span>: &#123; <span class=\"comment\">//项目打包部分</span></span><br><span class=\"line\">          <span class=\"string\">&quot;builder&quot;</span>: <span class=\"string\">&quot;@angular-devkit/build-angular:browser&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;options&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;outputPath&quot;</span>: <span class=\"string\">&quot;dist/myApp&quot;</span>, <span class=\"comment\">//打包后的项目地址</span></span><br><span class=\"line\">            <span class=\"string\">&quot;index&quot;</span>: <span class=\"string\">&quot;src/index.html&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;main&quot;</span>: <span class=\"string\">&quot;src/main.ts&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;polyfills&quot;</span>: <span class=\"string\">&quot;src/polyfills.ts&quot;</span>, <span class=\"comment\">//项目的腻子文件</span></span><br><span class=\"line\">            <span class=\"string\">&quot;tsConfig&quot;</span>: <span class=\"string\">&quot;src/tsconfig.app.json&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;assets&quot;</span>: [ <span class=\"comment\">//项目在资源地址</span></span><br><span class=\"line\">              <span class=\"string\">&quot;src/favicon.ico&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;src/assets&quot;</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">&quot;styles&quot;</span>: [ <span class=\"comment\">//项目引入的css文件</span></span><br><span class=\"line\">              <span class=\"string\">&quot;src/styles.css&quot;</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">&quot;scripts&quot;</span>: [] <span class=\"comment\">//项目引入的js文件</span></span><br><span class=\"line\">          &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><p>在项目下面存在 <code>pack.json</code> 文件，该 <code>json</code> 文件存放了项目的信息</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;my-app&quot;</span>, <span class=\"comment\">//项目名称</span></span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;0.0.0&quot;</span>, <span class=\"comment\">//项目版本</span></span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;ng&quot;</span>: <span class=\"string\">&quot;ng&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;start&quot;</span>: <span class=\"string\">&quot;ng serve&quot;</span>, <span class=\"comment\">//项目运行命令</span></span><br><span class=\"line\">    <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;ng build&quot;</span>, <span class=\"comment\">//项目打包命令</span></span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;ng test&quot;</span>, <span class=\"comment\">//项目测试命令</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lint&quot;</span>: <span class=\"string\">&quot;ng lint&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;e2e&quot;</span>: <span class=\"string\">&quot;ng e2e&quot;</span> <span class=\"comment\">//项目端到端测试命令</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"src-main-ts\"><a href=\"#src-main-ts\" class=\"headerlink\" title=\"src/main.ts\"></a>src/main.ts</h3><p>这个文件记录了项目从哪个模块开始运行</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; enableProdMode &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; platformBrowserDynamic &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser-dynamic&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app/app.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; environment &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./environments/environment&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (environment.production) &#123;</span><br><span class=\"line\">  enableProdMode();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">platformBrowserDynamic().bootstrapModule(AppModule)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(err));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"src-polyfill-ts\"><a href=\"#src-polyfill-ts\" class=\"headerlink\" title=\"src/polyfill.ts\"></a>src/polyfill.ts</h3><p>这个文件叫做腻子脚本，<code>Angular</code> 是默认对 <code>ie浏览器</code> 是不支持的，即新建项目后，在 <code>ie浏览器</code> 的本地4200端口页面是一片空白，将以下的注释取消，在ie浏览器中可以看到页面。<br><strong>将项目的默认注释取消后，其对i e浏览器 的支持也不是特别好，<a href=\"https://angular.io/\">Angualr官网</a>在ie11中有的页面页打不开</strong><br><img src=\"https://bingolil.github.io/images/polyfill.png\"></p>\n<h3 id=\"src-index-html\"><a href=\"#src-index-html\" class=\"headerlink\" title=\"src/index.html\"></a>src/index.html</h3><p>该文件记录了页面是从开始模块 (<code>AppModule</code>) 中声明的哪一个组件开始</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>MyApp<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;icon&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;image/x-icon&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;favicon.ico&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">app-root</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-root</span>&gt;</span> //从AppModule的app-root组件开始展示页面</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"src-app-app-module-ts\"><a href=\"#src-app-app-module-ts\" class=\"headerlink\" title=\"src/app/app.module.ts\"></a>src/app/app.module.ts</h3><p>这个文件是项目默认的根模块</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    AppComponent</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    BrowserModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [AppComponent] <span class=\"comment\">//bootstrap代表从哪个组件开始编译</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>src/main.ts</code> 中引入的启动模块就这个模块，所以这个模块也叫做项目的根模块，在这个模块中，默认定义了一个根组件，即 <code>AppComponent</code>，这个组件定义的选择器是  <code>app-root</code>，这个选择器在 <code>src/index.html</code> 中被使用，即这个组件也叫做根组件。<br><strong>以上文件为 Angular 项目的主要的重要文件</strong></p>\n<h2 id=\"Angular6命令大全\"><a href=\"#Angular6命令大全\" class=\"headerlink\" title=\"Angular6命令大全\"></a>Angular6命令大全</h2><p><code>Angular</code> 为开发者者提供了诸多帮助，在 <code>cmd</code> 环境下，使用以下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng --help</span><br></pre></td></tr></table></figure>\n<p>其命令如下图所示<br><img src=\"https://bingolil.github.io/images/ng-help.png\"></p>\n<h3 id=\"ng-add\"><a href=\"#ng-add\" class=\"headerlink\" title=\"ng add\"></a>ng add</h3><p><code>ng add</code> 是 <code>Angular6</code> 中新出现的命令，该命令使得向项目中添加新功能更加的方便。<br>例如，在项目根目录下运行如下命令添加 <strong><code>ng-zorro</code></strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add ng-zorro-antd</span><br></pre></td></tr></table></figure>\n<p>命令运行完成后，使用 <code>ng serve</code> 运行项目，浏览器打开本地4200端口，出现下图。</p>\n<p><img src=\"https://bingolil.github.io/images/ng-zorro-ant.png\"><br>这代表在这个项目中可以使用<a href=\"https://ng.ant.design/docs/introduce/zh\">ng-zorro官网</a>的组件</p>\n<h3 id=\"ng-new\"><a href=\"#ng-new\" class=\"headerlink\" title=\"ng new\"></a>ng new</h3><p>该命令是创建一个新的 <code>Angular</code> 项目，使用如下命令，可以创建一个新项目</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new myApp //创建一个项目名为myApp的angular项目</span><br><span class=\"line\">ng new myApp --routing //这个命令同上，不同之处这个命令会在项目中</span><br><span class=\"line\">      //自动生成代表项目路由的文件 app-routing.module.ts</span><br></pre></td></tr></table></figure>\n<h3 id=\"ng-generate\"><a href=\"#ng-generate\" class=\"headerlink\" title=\"ng generate\"></a>ng generate</h3><p>这个命令是 <code>Angular</code> 项目中最主要的命令之一，新建组件，服务，指令，模块都可以在项目的根目录下使用这个命令进行创建。</p>\n<table>\n<thead>\n<tr>\n<th>默认创建名为home</th>\n<th>完整写法</th>\n<th>最简写法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>组件</td>\n<td>ng generate componetent home</td>\n<td>ng g c home</td>\n</tr>\n<tr>\n<td>服务</td>\n<td>ng generate service home</td>\n<td>ng g s home</td>\n</tr>\n<tr>\n<td>指令</td>\n<td>ng generate directive home</td>\n<td>ng g d home</td>\n</tr>\n<tr>\n<td>管道</td>\n<td>ng generate pipe home</td>\n<td>ng g p home</td>\n</tr>\n<tr>\n<td>类</td>\n<td>ng generate class home</td>\n<td>ng g cl home</td>\n</tr>\n<tr>\n<td>接口</td>\n<td>ng generate interface home</td>\n<td>ng g i home</td>\n</tr>\n<tr>\n<td>模块</td>\n<td>ng generate module home</td>\n<td>ng g m home</td>\n</tr>\n</tbody></table>\n<p><strong>注意：</strong><br>1，<code>Angular</code> 以前的服务使用的依赖注入，在 <code>Angular6</code> 版本中，服务采用的相依注入。<br>2，创建组件 <code>component</code> 和类 <code>class</code> 都是 <code>c</code> 开头，所以使用最简写法有一定区别，如下所示，创建组件使用的是 <code>ng g c</code>，创建类时使用的是 <code>ng g cl</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c 组件名 //创建组件时使用的是c</span><br><span class=\"line\">ng g cl 类名 //创建类时使用的是cl</span><br></pre></td></tr></table></figure>\n<h3 id=\"ng-build\"><a href=\"#ng-build\" class=\"headerlink\" title=\"ng build\"></a>ng build</h3><p><code>Angular</code> 项目采用的语言是 <code>typescript</code> 语法，由微软开发，该语法不直接在浏览器中运行，需要将 <code>ts(typescript)</code> 转换为 <code>js</code> 语法才可以运行，<code>ng build</code> 命令就是对 <code>Angular</code> 项目进行打包，生成静态的文件。</p>\n<h3 id=\"其它命令\"><a href=\"#其它命令\" class=\"headerlink\" title=\"其它命令\"></a>其它命令</h3><p><code>Angular</code> 还有其它的一些命令</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ng serve</td>\n<td>运行项目，存在–open参数时自动打开浏览器</td>\n</tr>\n<tr>\n<td>ng eject</td>\n<td>提取项目的webpack.config.json文件，一旦提取就不能还原</td>\n</tr>\n<tr>\n<td>ng libary 库名</td>\n<td>用户创建库</td>\n</tr>\n<tr>\n<td>ng help</td>\n<td>查找帮助</td>\n</tr>\n<tr>\n<td>ng version</td>\n<td>查看版本</td>\n</tr>\n<tr>\n<td>ng update</td>\n<td>项目的依赖有重大改变时，自动更新代码</td>\n</tr>\n<tr>\n<td>ng project 项目名</td>\n<td>已移除，在本项目下新建一个项目</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装Angular6\"><a href=\"#安装Angular6\" class=\"headerlink\" title=\"安装Angular6\"></a>安装Angular6</h2><p>前提准备：电脑上已经存在 <code>node.js</code>（版本 为8.X或者10.X），因为使用 <code>Angular</code> 一般都需要它的 <code>angular/cli</code> 脚手架，需要使用 <code>ndoe.js</code> 的包管理器 <code>npm</code>。<br>安装的 <code>Angular</code> 版本是 <code>Angular6</code>，进入电脑的 <code>cmd</code> 命令行环境下，运行如下命令</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g <span class=\"meta\">@angular</span>/cli</span><br></pre></td></tr></table></figure>\n<p>安装完毕后，在该环境下运行如下命令</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng -version</span><br></pre></td></tr></table></figure>\n<p>出现如下图所示，代表安装成功</p>\n<p><img src=\"https://bingolil.github.io/images/angular-verison.png\"></p>\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><p>在 <code>cmd</code> 命令行环境下，运行以下命令</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng <span class=\"keyword\">new</span> myApp</span><br></pre></td></tr></table></figure>\n<p>然后等待 <code>angular/cli</code> 脚手架自动新建一个 <code>myApp</code> 的项目，然后 <code>cd myApp</code> 目录下，运行以下命令</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng server --open <span class=\"comment\">//open是参数，即运行成功后自动打开</span></span><br><span class=\"line\">                 <span class=\"comment\">//浏览器，并进入本地4200端口界面</span></span><br></pre></td></tr></table></figure>\n<p>在浏览器的本地4200端口出现如下图所示。</p>\n<p><img src=\"https://bingolil.github.io/images/csh-angular.png\"></p>\n<h2 id=\"Angular6项目文件\"><a href=\"#Angular6项目文件\" class=\"headerlink\" title=\"Angular6项目文件\"></a>Angular6项目文件</h2><p><code>Angular</code> 新建项目的目录结构如下所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-file.png\"></p>\n<h3 id=\"angular-json\"><a href=\"#angular-json\" class=\"headerlink\" title=\"angular.json\"></a>angular.json</h3><p>在 <code>Angular6</code> 以前，该文件名为.angular.json，<code>Angular6</code> 改成了angular.json，少了一个小数点，这个文件是脚手架的核心配置文件。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;projects&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;myApp&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;root&quot;</span>: <span class=\"string\">&quot;&quot;</span>, <span class=\"comment\">//项目的根</span></span><br><span class=\"line\">      <span class=\"string\">&quot;sourceRoot&quot;</span>: <span class=\"string\">&quot;src&quot;</span>, <span class=\"comment\">//项目的源码地址，即项目源码都在src文件夹下</span></span><br><span class=\"line\">      <span class=\"string\">&quot;projectType&quot;</span>: <span class=\"string\">&quot;application&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;prefix&quot;</span>: <span class=\"string\">&quot;app&quot;</span>, <span class=\"comment\">//前缀，新建组件时，其选择器为 &#x27;app-组件名&#x27;</span></span><br><span class=\"line\">      <span class=\"string\">&quot;schematics&quot;</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"string\">&quot;architect&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;build&quot;</span>: &#123; <span class=\"comment\">//项目打包部分</span></span><br><span class=\"line\">          <span class=\"string\">&quot;builder&quot;</span>: <span class=\"string\">&quot;@angular-devkit/build-angular:browser&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;options&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;outputPath&quot;</span>: <span class=\"string\">&quot;dist/myApp&quot;</span>, <span class=\"comment\">//打包后的项目地址</span></span><br><span class=\"line\">            <span class=\"string\">&quot;index&quot;</span>: <span class=\"string\">&quot;src/index.html&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;main&quot;</span>: <span class=\"string\">&quot;src/main.ts&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;polyfills&quot;</span>: <span class=\"string\">&quot;src/polyfills.ts&quot;</span>, <span class=\"comment\">//项目的腻子文件</span></span><br><span class=\"line\">            <span class=\"string\">&quot;tsConfig&quot;</span>: <span class=\"string\">&quot;src/tsconfig.app.json&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;assets&quot;</span>: [ <span class=\"comment\">//项目在资源地址</span></span><br><span class=\"line\">              <span class=\"string\">&quot;src/favicon.ico&quot;</span>,</span><br><span class=\"line\">              <span class=\"string\">&quot;src/assets&quot;</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">&quot;styles&quot;</span>: [ <span class=\"comment\">//项目引入的css文件</span></span><br><span class=\"line\">              <span class=\"string\">&quot;src/styles.css&quot;</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">&quot;scripts&quot;</span>: [] <span class=\"comment\">//项目引入的js文件</span></span><br><span class=\"line\">          &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><p>在项目下面存在 <code>pack.json</code> 文件，该 <code>json</code> 文件存放了项目的信息</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;my-app&quot;</span>, <span class=\"comment\">//项目名称</span></span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;0.0.0&quot;</span>, <span class=\"comment\">//项目版本</span></span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;ng&quot;</span>: <span class=\"string\">&quot;ng&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;start&quot;</span>: <span class=\"string\">&quot;ng serve&quot;</span>, <span class=\"comment\">//项目运行命令</span></span><br><span class=\"line\">    <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;ng build&quot;</span>, <span class=\"comment\">//项目打包命令</span></span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;ng test&quot;</span>, <span class=\"comment\">//项目测试命令</span></span><br><span class=\"line\">    <span class=\"string\">&quot;lint&quot;</span>: <span class=\"string\">&quot;ng lint&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;e2e&quot;</span>: <span class=\"string\">&quot;ng e2e&quot;</span> <span class=\"comment\">//项目端到端测试命令</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"src-main-ts\"><a href=\"#src-main-ts\" class=\"headerlink\" title=\"src/main.ts\"></a>src/main.ts</h3><p>这个文件记录了项目从哪个模块开始运行</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; enableProdMode &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; platformBrowserDynamic &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser-dynamic&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app/app.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; environment &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./environments/environment&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (environment.production) &#123;</span><br><span class=\"line\">  enableProdMode();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">platformBrowserDynamic().bootstrapModule(AppModule)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(err));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"src-polyfill-ts\"><a href=\"#src-polyfill-ts\" class=\"headerlink\" title=\"src/polyfill.ts\"></a>src/polyfill.ts</h3><p>这个文件叫做腻子脚本，<code>Angular</code> 是默认对 <code>ie浏览器</code> 是不支持的，即新建项目后，在 <code>ie浏览器</code> 的本地4200端口页面是一片空白，将以下的注释取消，在ie浏览器中可以看到页面。<br><strong>将项目的默认注释取消后，其对i e浏览器 的支持也不是特别好，<a href=\"https://angular.io/\">Angualr官网</a>在ie11中有的页面页打不开</strong><br><img src=\"https://bingolil.github.io/images/polyfill.png\"></p>\n<h3 id=\"src-index-html\"><a href=\"#src-index-html\" class=\"headerlink\" title=\"src/index.html\"></a>src/index.html</h3><p>该文件记录了页面是从开始模块 (<code>AppModule</code>) 中声明的哪一个组件开始</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>MyApp<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;icon&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;image/x-icon&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;favicon.ico&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">app-root</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-root</span>&gt;</span> //从AppModule的app-root组件开始展示页面</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"src-app-app-module-ts\"><a href=\"#src-app-app-module-ts\" class=\"headerlink\" title=\"src/app/app.module.ts\"></a>src/app/app.module.ts</h3><p>这个文件是项目默认的根模块</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    AppComponent</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    BrowserModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">bootstrap</span>: [AppComponent] <span class=\"comment\">//bootstrap代表从哪个组件开始编译</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>src/main.ts</code> 中引入的启动模块就这个模块，所以这个模块也叫做项目的根模块，在这个模块中，默认定义了一个根组件，即 <code>AppComponent</code>，这个组件定义的选择器是  <code>app-root</code>，这个选择器在 <code>src/index.html</code> 中被使用，即这个组件也叫做根组件。<br><strong>以上文件为 Angular 项目的主要的重要文件</strong></p>\n<h2 id=\"Angular6命令大全\"><a href=\"#Angular6命令大全\" class=\"headerlink\" title=\"Angular6命令大全\"></a>Angular6命令大全</h2><p><code>Angular</code> 为开发者者提供了诸多帮助，在 <code>cmd</code> 环境下，使用以下命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng --help</span><br></pre></td></tr></table></figure>\n<p>其命令如下图所示<br><img src=\"https://bingolil.github.io/images/ng-help.png\"></p>\n<h3 id=\"ng-add\"><a href=\"#ng-add\" class=\"headerlink\" title=\"ng add\"></a>ng add</h3><p><code>ng add</code> 是 <code>Angular6</code> 中新出现的命令，该命令使得向项目中添加新功能更加的方便。<br>例如，在项目根目录下运行如下命令添加 <strong><code>ng-zorro</code></strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add ng-zorro-antd</span><br></pre></td></tr></table></figure>\n<p>命令运行完成后，使用 <code>ng serve</code> 运行项目，浏览器打开本地4200端口，出现下图。</p>\n<p><img src=\"https://bingolil.github.io/images/ng-zorro-ant.png\"><br>这代表在这个项目中可以使用<a href=\"https://ng.ant.design/docs/introduce/zh\">ng-zorro官网</a>的组件</p>\n<h3 id=\"ng-new\"><a href=\"#ng-new\" class=\"headerlink\" title=\"ng new\"></a>ng new</h3><p>该命令是创建一个新的 <code>Angular</code> 项目，使用如下命令，可以创建一个新项目</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new myApp //创建一个项目名为myApp的angular项目</span><br><span class=\"line\">ng new myApp --routing //这个命令同上，不同之处这个命令会在项目中</span><br><span class=\"line\">      //自动生成代表项目路由的文件 app-routing.module.ts</span><br></pre></td></tr></table></figure>\n<h3 id=\"ng-generate\"><a href=\"#ng-generate\" class=\"headerlink\" title=\"ng generate\"></a>ng generate</h3><p>这个命令是 <code>Angular</code> 项目中最主要的命令之一，新建组件，服务，指令，模块都可以在项目的根目录下使用这个命令进行创建。</p>\n<table>\n<thead>\n<tr>\n<th>默认创建名为home</th>\n<th>完整写法</th>\n<th>最简写法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>组件</td>\n<td>ng generate componetent home</td>\n<td>ng g c home</td>\n</tr>\n<tr>\n<td>服务</td>\n<td>ng generate service home</td>\n<td>ng g s home</td>\n</tr>\n<tr>\n<td>指令</td>\n<td>ng generate directive home</td>\n<td>ng g d home</td>\n</tr>\n<tr>\n<td>管道</td>\n<td>ng generate pipe home</td>\n<td>ng g p home</td>\n</tr>\n<tr>\n<td>类</td>\n<td>ng generate class home</td>\n<td>ng g cl home</td>\n</tr>\n<tr>\n<td>接口</td>\n<td>ng generate interface home</td>\n<td>ng g i home</td>\n</tr>\n<tr>\n<td>模块</td>\n<td>ng generate module home</td>\n<td>ng g m home</td>\n</tr>\n</tbody></table>\n<p><strong>注意：</strong><br>1，<code>Angular</code> 以前的服务使用的依赖注入，在 <code>Angular6</code> 版本中，服务采用的相依注入。<br>2，创建组件 <code>component</code> 和类 <code>class</code> 都是 <code>c</code> 开头，所以使用最简写法有一定区别，如下所示，创建组件使用的是 <code>ng g c</code>，创建类时使用的是 <code>ng g cl</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c 组件名 //创建组件时使用的是c</span><br><span class=\"line\">ng g cl 类名 //创建类时使用的是cl</span><br></pre></td></tr></table></figure>\n<h3 id=\"ng-build\"><a href=\"#ng-build\" class=\"headerlink\" title=\"ng build\"></a>ng build</h3><p><code>Angular</code> 项目采用的语言是 <code>typescript</code> 语法，由微软开发，该语法不直接在浏览器中运行，需要将 <code>ts(typescript)</code> 转换为 <code>js</code> 语法才可以运行，<code>ng build</code> 命令就是对 <code>Angular</code> 项目进行打包，生成静态的文件。</p>\n<h3 id=\"其它命令\"><a href=\"#其它命令\" class=\"headerlink\" title=\"其它命令\"></a>其它命令</h3><p><code>Angular</code> 还有其它的一些命令</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ng serve</td>\n<td>运行项目，存在–open参数时自动打开浏览器</td>\n</tr>\n<tr>\n<td>ng eject</td>\n<td>提取项目的webpack.config.json文件，一旦提取就不能还原</td>\n</tr>\n<tr>\n<td>ng libary 库名</td>\n<td>用户创建库</td>\n</tr>\n<tr>\n<td>ng help</td>\n<td>查找帮助</td>\n</tr>\n<tr>\n<td>ng version</td>\n<td>查看版本</td>\n</tr>\n<tr>\n<td>ng update</td>\n<td>项目的依赖有重大改变时，自动更新代码</td>\n</tr>\n<tr>\n<td>ng project 项目名</td>\n<td>已移除，在本项目下新建一个项目</td>\n</tr>\n</tbody></table>\n"},{"title":"Angular学习-2-组件通讯","date":"2018-11-08T16:00:00.000Z","description":"组件就像是一个个的零件，我们需要按照 `Angular`  定义的规则将它们组装起来，而且它们之间可以进行交流通讯，这样才组成一个有机的完整系统。","_content":"## 通讯方式\n组件就像是一个个的零件，我们需要按照 `Angular`  定义的规则将它们组装起来，而且它们之间可以进行交流通讯，这样才组成一个有机的完整系统。\n在一个完整的系统中，组件会形成树形结构，如下图所示。\n\n![](https://bingolil.github.io/images/com-tree.png)\n\n`Angular` 组件间的典型通讯方式有以下几种：\n> * 直接的父子关系：父组件访问子组件的 `public` 属性和方法\n> * 直接的父子关系：子组件借助于 `Input` 和 `Output` 和父组件进行通讯\n> * 没有直接关系：借助于 `service` 单例进行通讯\n> * 利用浏览器的 `cookie` 和 `localStorage` 存储进行通讯\n> * 利用 `session` 进行通讯\n\n## 直接调用\n对于组件间的关系是父子关系，父组件可以直接访问子组件里面的 `public` 方法和属性。其父组件代码如下\nparent.component.html\n```HTML\n<app-child #child></app-child>\n<button (click)=\"child.childFn()\" class=\"btn btn-success\">调用子组件\n方法</button> \n```\n\n通过在模板里面定义局部变量的方式来直接调用子组件里面的 `public` 型方法，该段代码表达的意思是父组件中点击 `调用子组件方法`  按钮，调用 `child` 中的 `public` 方法 `childFn()`。而子组件代码如下\nchild.component.ts\n```ts\npublic childFn():void{ //public可以要，可以不用，\n                       //angular变量和方法默认为public类型\n console.log(\"点击事件发生在父组件\");\n} \n```\n\n运行该项目，在浏览器中，点击 `调用子组件方法` 按钮，按 `f12` 查看控制台，可以看到输出 `点击事件发生在父组件`\n该方式是在组件的模板 `parent.compontent.html` 中调用子组件，如果需要在父组件本身 `parent.compontent.ts` 中调用子组件，在父组件中需要引入 `ViewChild` 装饰器，代码如下所示\nparent.component.ts\n```ts\nimport { ViewChild } from '@angular/core';\nimport { ChildComponent } from '../child/child.component.ts';\n\n..... //代码块\n\n@ViewChild(ChildComponent)\nprivate child: ChildComponent; \n```\n\n在父组件的ts文件中，`child` 代表的是子组件，这样就可以调用子组件的 `public` 方法或属性，关于 `@viewChild` 装饰器以后会详细介绍。\n## @Input 和 @Output\n`@Input` 和 `@Output` 是 `Angular` 提供的装饰器，子组件和父组件之间的通讯可以用到这两个装饰器，并且在 `Angular` 项目的 `通用组件`（即将多处相似的模板提取出来，重写成一个组件，这个组件在项目中多处被使用） 中经常被使用。\n### @Input\n`@Input` 装饰器是子组件获取父组件的属性，代码如下所示\nparent.component.html（父组件模板）\n```HTML\n<app-child comVar=\"父组件模板变量\"></app-child>\n```\n\nchild.component.ts（子组件）\n```ts\nimport { OnInit, Input } from '@angular/core';\n\n..... //代码块\n\n@Input() comVar: string='';\n\nngOnInit(){\n  console.log(this.comVar);\n}\n```\n\n可以在浏览器控制台中看到输出 `父组件模板变量`\n上面的变量是在模板中定义，也可以采用 `Angular` 的属性绑定机制，在父组件 `parent.component.ts` 中定义数据，在模板 `parent.component.html` 中使用，代码如下所示\nparent.component.ts\n```ts\n..... //代码块\n\ncomVar='父组件变量'\n```\n\nparent.component.html\n```HTML\n<app-child [varParent]=\"comVar\"></app-child>\n```\n\n其子组件代码如下所示\nchild.component.ts\n```ts\nimport { OnInit, Input } from '@angular/core';\n\n..... //代码块\n\n@Input() varParent: string='';\n\nngOnInit(){\n  console.log(this.varParent);\n}\n```\n\n可以在浏览器的控制台中看到输出 `父组件变量`\n### @Output\n`@Output` 的本质是事件机制，我们用它来监听子组件中的事件，即子组件发生了某个事件，通知父组件，代码如下所示\n\nchild.component.ts\n```ts\nimport { EventEmitter, Output } from '@angular/core';\n\n.... //代码块\n\nchildStr:string= '子组件字符串';\n\n@Output() event=new EventEmitter();\n\ndoEmit(){\n  this.event.emit(this.childStr);\n}\n```\n\nchild.component.html\n\n```HTML\n<button (click)=\"doEmit()\" class=\"btn btn-success\">派发事件</button> \n```\n\n其父组件代码如下所示\nparent.component.html\n\n```HTML\n<!-- event对应的是子组件中 new EventEmitter() -->\n<!-- childEvent($event)对应的是父组件中的事件 -->\n<app-child (event)=\"childEvent($event)\"></app-child>\n```\n\nparent.component.ts\n\n```ts\n.... //代码块\nchildEvent(event){\n  console.log(event);\n}\n```\n\n在浏览器中，点击子组件的 `派发事件` 按钮，可以在控制台看到输出 `子组件字符串` ，并且每点击一次，其父组件就会在控制台输出一次。\n## Service\n\n服务（`Angular6` 版本）通讯模式如下图所示\n\n![](https://bingolil.github.io/images/angular-service.png)\n\n### Service优点\n很明显，上述两种 **直接调用** 和 **Input 和 Output** 组件间的通讯方式有一定的局限，即组件间的关系必须是父组件和子组件。在完整 `Angular` 项目中，组件与组件之间可能不存在直接关系，但组件之间需要进行通讯，这时就需要使用 `Angular` 提供的 `service` 功能，使用 `service` ，在同一个项目中，各个组件之间都可以进行通讯。\n### 版本区别\n在 `Angular6` 版本以前，`Angular` 的服务（`service`）采用的是 `依赖注入` 方式，而 `Angular6` 版本采用的是 `相依注入` 方式。\n### 依赖注入（Angular5）\n由于依赖注入存在于 `Angular6` 版本以前，而且 `Angular7` 版本也出来不久，一般开发项目都是采用最新技术，所以关于 `依赖注入` 可以了解一下，看其使用机制。代码如下所示\n定义一个服务 `CommunicateService`\n\ncommunicate.service.ts\n```ts\nimport { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable'\n\n@Injectable()\nexport class CommunicateService {\n\n  public eventBus=new Subject<string>();\n\n  constructor() { }\n  \n}\n```\n\n在组件中使用该服务需要在组件所在模块中配置注入器（也可以在组件中配置），其代码如下所示\napp.module.ts\n```ts\nimport { CommunicateService } from './communicate.service';\n.... //代码块\n\nproviders: [CommunicateService],\n.... //代码块\n```\n\n在A组件中，使用该服务（`service`）\nA.component.ts\n```ts\nimport { CommunicateService } from '../communicate.service';\n\n.... //代码块\n\npublic setEventBus():void{\n  this.communicateService.eventBus.next(\"触发service\");\n}\n```\n\nA组件模板代码如下所示\nA.component.html\n```HTML\n<button (click)=\"setEventBus()\" class=\"btn btn-success\">点击</button>\n```\n\n在B组件中，使用该服务（`service`）\nB.component.ts\n```ts\nimport { CommunicateService } from '../communicate.service';\n\n.... //代码块\n\nconstructor(public communicateService:CommunicateService) { }\n\nngOnInit() {\n  this.communicateService.eventBus.subscribe((value)=>{\n    console.log(value)\n  })\n}\n```\n\n点击A组件模板中的 `点击` 按钮，可以在控制台输出 `触发service` ，而且这是由B组件输出A组件中定义的值，即实现了通讯。\n### 相依注入（Angular6）\n在 `Angular6` 版本中，对于 `Service` ，框架采用了相依注入的模式。即在 `Angular5` 版本中的配置注入器由框架自动完成。其代码如下所示\ncommunicate.service.ts\n``` ts\nimport { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable({\n  providedIn: 'root' //与Angular5版本的区别\n})\nexport class CommunicateService {\n\n  public eventBus=new Subject<string>();\n\n  constructor() { }\n  \n}\n```\n\n在上述代码中，`provideIn` 为 `root`，即在项目中各个组件都可以使用该服务，若只想在某个模块中使用该服务，在服务中引入模块名，将代码中的 `root` 改成 `模块名` 即可。\n在A组件中，使用该服务（`service`）\nA.component.ts\n```ts\nimport { CommunicateService } from '../communicate.service';\n\n.... //代码块\n\npublic setEventBus():void{\n  this.communicateService.eventBus.next(\"触发service\");\n}\n```\n\nA组件模板代码如下所示\nA.component.html\n```HTML\n<button (click)=\"setEventBus()\" class=\"btn btn-success\">点击</button>\n```\n\n在B组件中，使用该服务（`service`）\nB.component.ts\n```ts\nimport { CommunicateService } from '../communicate.service';\n\n.... //代码块\n\nconstructor(public communicateService:CommunicateService) { }\n\nngOnInit() {\n  this.communicateService.eventBus.subscribe((value)=>{\n    console.log(value)\n  })\n}\n```\n\n点击 `A组件` 模板中的 `点击` 按钮，可以在控制台输出 `触发service` ，而且这是由 `B组件` 输出 `A组件` 中定义的值，即实现了通讯。\n## cookie 或 localstorage\n组件与组件间的通讯也可以使用浏览器的自带功能，即 `cookie` 或 `localstorage`，其模式如下图所示。\n\n![](https://bingolil.github.io/images/angular-cl.png)\n\n在A组件中写入 `cookie` 或 `localstorage` 代码如下所示\nA.component.ts\n```typescript\n\n.... //代码块\npublic setLocal():void{\n  window.localStorage.setItem(\"json\",JSON.stringify({name:'jack',age:24}));\n  }\n```\n\nA模板代码如下所示\nA.component.html\n```HTML\n<button (click)=\"setLocal()\" class=\"btn btn-success\">设置localstorage</button>\n```\n\n在B组件中获取 `cookie` 或 `localstorage` 代码如下所示\nB.component.ts\n```typescript\nprivate conLocal():void{\n  var json=window.localStorage.getItem(\"json\");\n  var obj=JSON.parse(json);\n  console.log(obj);\n}\n```\n\nB组件模板代码如下所示\nB.component.html\n```HTML\n<button (click)=\"conLocal()\" class=\"btn btn-success\">输出localstorage</button>\n```\n\n在浏览器中，点击A组件中 `设置localstorage` 按钮，然后点击B组件中 `输出localstorage` 按钮，可以在控制台输出A组件中设置的 `json` 对象，即采用 `cookie` 或 `localstorage` 的通讯方式成功。\n\n## Session\n利用session在组件间的通讯模式如下图所示\n\n![](https://bingolil.github.io/images/angular-session.png)\n\n`Session` ：在计算机中，尤其是在网络应用中，称为“会话控制”。`Session`  对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 `Web` 页之间跳转时，存储在 `Session`  对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。\n","source":"_posts/angular/learn-2.md","raw":"title: Angular学习-2-组件通讯\ncategories: Angular\ndate: 2018-11-09\ntags: [Angular,Angular组件通讯]\ndescription: 组件就像是一个个的零件，我们需要按照 `Angular`  定义的规则将它们组装起来，而且它们之间可以进行交流通讯，这样才组成一个有机的完整系统。\n---\n## 通讯方式\n组件就像是一个个的零件，我们需要按照 `Angular`  定义的规则将它们组装起来，而且它们之间可以进行交流通讯，这样才组成一个有机的完整系统。\n在一个完整的系统中，组件会形成树形结构，如下图所示。\n\n![](https://bingolil.github.io/images/com-tree.png)\n\n`Angular` 组件间的典型通讯方式有以下几种：\n> * 直接的父子关系：父组件访问子组件的 `public` 属性和方法\n> * 直接的父子关系：子组件借助于 `Input` 和 `Output` 和父组件进行通讯\n> * 没有直接关系：借助于 `service` 单例进行通讯\n> * 利用浏览器的 `cookie` 和 `localStorage` 存储进行通讯\n> * 利用 `session` 进行通讯\n\n## 直接调用\n对于组件间的关系是父子关系，父组件可以直接访问子组件里面的 `public` 方法和属性。其父组件代码如下\nparent.component.html\n```HTML\n<app-child #child></app-child>\n<button (click)=\"child.childFn()\" class=\"btn btn-success\">调用子组件\n方法</button> \n```\n\n通过在模板里面定义局部变量的方式来直接调用子组件里面的 `public` 型方法，该段代码表达的意思是父组件中点击 `调用子组件方法`  按钮，调用 `child` 中的 `public` 方法 `childFn()`。而子组件代码如下\nchild.component.ts\n```ts\npublic childFn():void{ //public可以要，可以不用，\n                       //angular变量和方法默认为public类型\n console.log(\"点击事件发生在父组件\");\n} \n```\n\n运行该项目，在浏览器中，点击 `调用子组件方法` 按钮，按 `f12` 查看控制台，可以看到输出 `点击事件发生在父组件`\n该方式是在组件的模板 `parent.compontent.html` 中调用子组件，如果需要在父组件本身 `parent.compontent.ts` 中调用子组件，在父组件中需要引入 `ViewChild` 装饰器，代码如下所示\nparent.component.ts\n```ts\nimport { ViewChild } from '@angular/core';\nimport { ChildComponent } from '../child/child.component.ts';\n\n..... //代码块\n\n@ViewChild(ChildComponent)\nprivate child: ChildComponent; \n```\n\n在父组件的ts文件中，`child` 代表的是子组件，这样就可以调用子组件的 `public` 方法或属性，关于 `@viewChild` 装饰器以后会详细介绍。\n## @Input 和 @Output\n`@Input` 和 `@Output` 是 `Angular` 提供的装饰器，子组件和父组件之间的通讯可以用到这两个装饰器，并且在 `Angular` 项目的 `通用组件`（即将多处相似的模板提取出来，重写成一个组件，这个组件在项目中多处被使用） 中经常被使用。\n### @Input\n`@Input` 装饰器是子组件获取父组件的属性，代码如下所示\nparent.component.html（父组件模板）\n```HTML\n<app-child comVar=\"父组件模板变量\"></app-child>\n```\n\nchild.component.ts（子组件）\n```ts\nimport { OnInit, Input } from '@angular/core';\n\n..... //代码块\n\n@Input() comVar: string='';\n\nngOnInit(){\n  console.log(this.comVar);\n}\n```\n\n可以在浏览器控制台中看到输出 `父组件模板变量`\n上面的变量是在模板中定义，也可以采用 `Angular` 的属性绑定机制，在父组件 `parent.component.ts` 中定义数据，在模板 `parent.component.html` 中使用，代码如下所示\nparent.component.ts\n```ts\n..... //代码块\n\ncomVar='父组件变量'\n```\n\nparent.component.html\n```HTML\n<app-child [varParent]=\"comVar\"></app-child>\n```\n\n其子组件代码如下所示\nchild.component.ts\n```ts\nimport { OnInit, Input } from '@angular/core';\n\n..... //代码块\n\n@Input() varParent: string='';\n\nngOnInit(){\n  console.log(this.varParent);\n}\n```\n\n可以在浏览器的控制台中看到输出 `父组件变量`\n### @Output\n`@Output` 的本质是事件机制，我们用它来监听子组件中的事件，即子组件发生了某个事件，通知父组件，代码如下所示\n\nchild.component.ts\n```ts\nimport { EventEmitter, Output } from '@angular/core';\n\n.... //代码块\n\nchildStr:string= '子组件字符串';\n\n@Output() event=new EventEmitter();\n\ndoEmit(){\n  this.event.emit(this.childStr);\n}\n```\n\nchild.component.html\n\n```HTML\n<button (click)=\"doEmit()\" class=\"btn btn-success\">派发事件</button> \n```\n\n其父组件代码如下所示\nparent.component.html\n\n```HTML\n<!-- event对应的是子组件中 new EventEmitter() -->\n<!-- childEvent($event)对应的是父组件中的事件 -->\n<app-child (event)=\"childEvent($event)\"></app-child>\n```\n\nparent.component.ts\n\n```ts\n.... //代码块\nchildEvent(event){\n  console.log(event);\n}\n```\n\n在浏览器中，点击子组件的 `派发事件` 按钮，可以在控制台看到输出 `子组件字符串` ，并且每点击一次，其父组件就会在控制台输出一次。\n## Service\n\n服务（`Angular6` 版本）通讯模式如下图所示\n\n![](https://bingolil.github.io/images/angular-service.png)\n\n### Service优点\n很明显，上述两种 **直接调用** 和 **Input 和 Output** 组件间的通讯方式有一定的局限，即组件间的关系必须是父组件和子组件。在完整 `Angular` 项目中，组件与组件之间可能不存在直接关系，但组件之间需要进行通讯，这时就需要使用 `Angular` 提供的 `service` 功能，使用 `service` ，在同一个项目中，各个组件之间都可以进行通讯。\n### 版本区别\n在 `Angular6` 版本以前，`Angular` 的服务（`service`）采用的是 `依赖注入` 方式，而 `Angular6` 版本采用的是 `相依注入` 方式。\n### 依赖注入（Angular5）\n由于依赖注入存在于 `Angular6` 版本以前，而且 `Angular7` 版本也出来不久，一般开发项目都是采用最新技术，所以关于 `依赖注入` 可以了解一下，看其使用机制。代码如下所示\n定义一个服务 `CommunicateService`\n\ncommunicate.service.ts\n```ts\nimport { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable'\n\n@Injectable()\nexport class CommunicateService {\n\n  public eventBus=new Subject<string>();\n\n  constructor() { }\n  \n}\n```\n\n在组件中使用该服务需要在组件所在模块中配置注入器（也可以在组件中配置），其代码如下所示\napp.module.ts\n```ts\nimport { CommunicateService } from './communicate.service';\n.... //代码块\n\nproviders: [CommunicateService],\n.... //代码块\n```\n\n在A组件中，使用该服务（`service`）\nA.component.ts\n```ts\nimport { CommunicateService } from '../communicate.service';\n\n.... //代码块\n\npublic setEventBus():void{\n  this.communicateService.eventBus.next(\"触发service\");\n}\n```\n\nA组件模板代码如下所示\nA.component.html\n```HTML\n<button (click)=\"setEventBus()\" class=\"btn btn-success\">点击</button>\n```\n\n在B组件中，使用该服务（`service`）\nB.component.ts\n```ts\nimport { CommunicateService } from '../communicate.service';\n\n.... //代码块\n\nconstructor(public communicateService:CommunicateService) { }\n\nngOnInit() {\n  this.communicateService.eventBus.subscribe((value)=>{\n    console.log(value)\n  })\n}\n```\n\n点击A组件模板中的 `点击` 按钮，可以在控制台输出 `触发service` ，而且这是由B组件输出A组件中定义的值，即实现了通讯。\n### 相依注入（Angular6）\n在 `Angular6` 版本中，对于 `Service` ，框架采用了相依注入的模式。即在 `Angular5` 版本中的配置注入器由框架自动完成。其代码如下所示\ncommunicate.service.ts\n``` ts\nimport { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable({\n  providedIn: 'root' //与Angular5版本的区别\n})\nexport class CommunicateService {\n\n  public eventBus=new Subject<string>();\n\n  constructor() { }\n  \n}\n```\n\n在上述代码中，`provideIn` 为 `root`，即在项目中各个组件都可以使用该服务，若只想在某个模块中使用该服务，在服务中引入模块名，将代码中的 `root` 改成 `模块名` 即可。\n在A组件中，使用该服务（`service`）\nA.component.ts\n```ts\nimport { CommunicateService } from '../communicate.service';\n\n.... //代码块\n\npublic setEventBus():void{\n  this.communicateService.eventBus.next(\"触发service\");\n}\n```\n\nA组件模板代码如下所示\nA.component.html\n```HTML\n<button (click)=\"setEventBus()\" class=\"btn btn-success\">点击</button>\n```\n\n在B组件中，使用该服务（`service`）\nB.component.ts\n```ts\nimport { CommunicateService } from '../communicate.service';\n\n.... //代码块\n\nconstructor(public communicateService:CommunicateService) { }\n\nngOnInit() {\n  this.communicateService.eventBus.subscribe((value)=>{\n    console.log(value)\n  })\n}\n```\n\n点击 `A组件` 模板中的 `点击` 按钮，可以在控制台输出 `触发service` ，而且这是由 `B组件` 输出 `A组件` 中定义的值，即实现了通讯。\n## cookie 或 localstorage\n组件与组件间的通讯也可以使用浏览器的自带功能，即 `cookie` 或 `localstorage`，其模式如下图所示。\n\n![](https://bingolil.github.io/images/angular-cl.png)\n\n在A组件中写入 `cookie` 或 `localstorage` 代码如下所示\nA.component.ts\n```typescript\n\n.... //代码块\npublic setLocal():void{\n  window.localStorage.setItem(\"json\",JSON.stringify({name:'jack',age:24}));\n  }\n```\n\nA模板代码如下所示\nA.component.html\n```HTML\n<button (click)=\"setLocal()\" class=\"btn btn-success\">设置localstorage</button>\n```\n\n在B组件中获取 `cookie` 或 `localstorage` 代码如下所示\nB.component.ts\n```typescript\nprivate conLocal():void{\n  var json=window.localStorage.getItem(\"json\");\n  var obj=JSON.parse(json);\n  console.log(obj);\n}\n```\n\nB组件模板代码如下所示\nB.component.html\n```HTML\n<button (click)=\"conLocal()\" class=\"btn btn-success\">输出localstorage</button>\n```\n\n在浏览器中，点击A组件中 `设置localstorage` 按钮，然后点击B组件中 `输出localstorage` 按钮，可以在控制台输出A组件中设置的 `json` 对象，即采用 `cookie` 或 `localstorage` 的通讯方式成功。\n\n## Session\n利用session在组件间的通讯模式如下图所示\n\n![](https://bingolil.github.io/images/angular-session.png)\n\n`Session` ：在计算机中，尤其是在网络应用中，称为“会话控制”。`Session`  对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 `Web` 页之间跳转时，存储在 `Session`  对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。\n","slug":"angular/learn-2","published":1,"updated":"2021-11-24T01:52:12.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwe931ju0003ycsz1lvs15ab","content":"<h2 id=\"通讯方式\"><a href=\"#通讯方式\" class=\"headerlink\" title=\"通讯方式\"></a>通讯方式</h2><p>组件就像是一个个的零件，我们需要按照 <code>Angular</code>  定义的规则将它们组装起来，而且它们之间可以进行交流通讯，这样才组成一个有机的完整系统。<br>在一个完整的系统中，组件会形成树形结构，如下图所示。</p>\n<p><img src=\"https://bingolil.github.io/images/com-tree.png\"></p>\n<p><code>Angular</code> 组件间的典型通讯方式有以下几种：</p>\n<blockquote>\n<ul>\n<li>直接的父子关系：父组件访问子组件的 <code>public</code> 属性和方法</li>\n<li>直接的父子关系：子组件借助于 <code>Input</code> 和 <code>Output</code> 和父组件进行通讯</li>\n<li>没有直接关系：借助于 <code>service</code> 单例进行通讯</li>\n<li>利用浏览器的 <code>cookie</code> 和 <code>localStorage</code> 存储进行通讯</li>\n<li>利用 <code>session</code> 进行通讯</li>\n</ul>\n</blockquote>\n<h2 id=\"直接调用\"><a href=\"#直接调用\" class=\"headerlink\" title=\"直接调用\"></a>直接调用</h2><p>对于组件间的关系是父子关系，父组件可以直接访问子组件里面的 <code>public</code> 方法和属性。其父组件代码如下<br>parent.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> #<span class=\"attr\">child</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;child.childFn()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>调用子组件</span><br><span class=\"line\">方法<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p>通过在模板里面定义局部变量的方式来直接调用子组件里面的 <code>public</code> 型方法，该段代码表达的意思是父组件中点击 <code>调用子组件方法</code>  按钮，调用 <code>child</code> 中的 <code>public</code> 方法 <code>childFn()</code>。而子组件代码如下<br>child.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> childFn():<span class=\"built_in\">void</span>&#123; <span class=\"comment\">//public可以要，可以不用，</span></span><br><span class=\"line\">                       <span class=\"comment\">//angular变量和方法默认为public类型</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;点击事件发生在父组件&quot;</span>);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>运行该项目，在浏览器中，点击 <code>调用子组件方法</code> 按钮，按 <code>f12</code> 查看控制台，可以看到输出 <code>点击事件发生在父组件</code><br>该方式是在组件的模板 <code>parent.compontent.html</code> 中调用子组件，如果需要在父组件本身 <code>parent.compontent.ts</code> 中调用子组件，在父组件中需要引入 <code>ViewChild</code> 装饰器，代码如下所示<br>parent.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ViewChild &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ChildComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../child/child.component.ts&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">..... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ViewChild</span>(ChildComponent)</span><br><span class=\"line\"><span class=\"keyword\">private</span> child: ChildComponent; </span><br></pre></td></tr></table></figure>\n\n<p>在父组件的ts文件中，<code>child</code> 代表的是子组件，这样就可以调用子组件的 <code>public</code> 方法或属性，关于 <code>@viewChild</code> 装饰器以后会详细介绍。</p>\n<h2 id=\"Input-和-Output\"><a href=\"#Input-和-Output\" class=\"headerlink\" title=\"@Input 和 @Output\"></a>@Input 和 @Output</h2><p><code>@Input</code> 和 <code>@Output</code> 是 <code>Angular</code> 提供的装饰器，子组件和父组件之间的通讯可以用到这两个装饰器，并且在 <code>Angular</code> 项目的 <code>通用组件</code>（即将多处相似的模板提取出来，重写成一个组件，这个组件在项目中多处被使用） 中经常被使用。</p>\n<h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"@Input\"></a>@Input</h3><p><code>@Input</code> 装饰器是子组件获取父组件的属性，代码如下所示<br>parent.component.html（父组件模板）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> <span class=\"attr\">comVar</span>=<span class=\"string\">&quot;父组件模板变量&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>child.component.ts（子组件）</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; OnInit, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">..... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Input</span>() comVar: <span class=\"built_in\">string</span>=<span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.comVar);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以在浏览器控制台中看到输出 <code>父组件模板变量</code><br>上面的变量是在模板中定义，也可以采用 <code>Angular</code> 的属性绑定机制，在父组件 <code>parent.component.ts</code> 中定义数据，在模板 <code>parent.component.html</code> 中使用，代码如下所示<br>parent.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">comVar=<span class=\"string\">&#x27;父组件变量&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>parent.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> [<span class=\"attr\">varParent</span>]=<span class=\"string\">&quot;comVar&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其子组件代码如下所示<br>child.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; OnInit, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">..... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Input</span>() varParent: <span class=\"built_in\">string</span>=<span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.varParent);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以在浏览器的控制台中看到输出 <code>父组件变量</code></p>\n<h3 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"@Output\"></a>@Output</h3><p><code>@Output</code> 的本质是事件机制，我们用它来监听子组件中的事件，即子组件发生了某个事件，通知父组件，代码如下所示</p>\n<p>child.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; EventEmitter, Output &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">childStr</span>:<span class=\"built_in\">string</span>= <span class=\"string\">&#x27;子组件字符串&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Output</span>() event=<span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">doEmit</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.event.emit(<span class=\"built_in\">this</span>.childStr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>child.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;doEmit()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>派发事件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p>其父组件代码如下所示<br>parent.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- event对应的是子组件中 new EventEmitter() --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- childEvent($event)对应的是父组件中的事件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> (<span class=\"attr\">event</span>)=<span class=\"string\">&quot;childEvent($event)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>parent.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">childEvent</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中，点击子组件的 <code>派发事件</code> 按钮，可以在控制台看到输出 <code>子组件字符串</code> ，并且每点击一次，其父组件就会在控制台输出一次。</p>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><p>服务（<code>Angular6</code> 版本）通讯模式如下图所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-service.png\"></p>\n<h3 id=\"Service优点\"><a href=\"#Service优点\" class=\"headerlink\" title=\"Service优点\"></a>Service优点</h3><p>很明显，上述两种 <strong>直接调用</strong> 和 <strong>Input 和 Output</strong> 组件间的通讯方式有一定的局限，即组件间的关系必须是父组件和子组件。在完整 <code>Angular</code> 项目中，组件与组件之间可能不存在直接关系，但组件之间需要进行通讯，这时就需要使用 <code>Angular</code> 提供的 <code>service</code> 功能，使用 <code>service</code> ，在同一个项目中，各个组件之间都可以进行通讯。</p>\n<h3 id=\"版本区别\"><a href=\"#版本区别\" class=\"headerlink\" title=\"版本区别\"></a>版本区别</h3><p>在 <code>Angular6</code> 版本以前，<code>Angular</code> 的服务（<code>service</code>）采用的是 <code>依赖注入</code> 方式，而 <code>Angular6</code> 版本采用的是 <code>相依注入</code> 方式。</p>\n<h3 id=\"依赖注入（Angular5）\"><a href=\"#依赖注入（Angular5）\" class=\"headerlink\" title=\"依赖注入（Angular5）\"></a>依赖注入（Angular5）</h3><p>由于依赖注入存在于 <code>Angular6</code> 版本以前，而且 <code>Angular7</code> 版本也出来不久，一般开发项目都是采用最新技术，所以关于 <code>依赖注入</code> 可以了解一下，看其使用机制。代码如下所示<br>定义一个服务 <code>CommunicateService</code></p>\n<p>communicate.service.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Subject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/Subject&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/Observable&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommunicateService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> eventBus=<span class=\"keyword\">new</span> Subject&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在组件中使用该服务需要在组件所在模块中配置注入器（也可以在组件中配置），其代码如下所示<br>app.module.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./communicate.service&#x27;</span>;</span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">providers</span>: [CommunicateService],</span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>在A组件中，使用该服务（<code>service</code>）<br>A.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../communicate.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> setEventBus():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.communicateService.eventBus.next(<span class=\"string\">&quot;触发service&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>A组件模板代码如下所示<br>A.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;setEventBus()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在B组件中，使用该服务（<code>service</code>）<br>B.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../communicate.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> communicateService:CommunicateService</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.communicateService.eventBus.subscribe(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击A组件模板中的 <code>点击</code> 按钮，可以在控制台输出 <code>触发service</code> ，而且这是由B组件输出A组件中定义的值，即实现了通讯。</p>\n<h3 id=\"相依注入（Angular6）\"><a href=\"#相依注入（Angular6）\" class=\"headerlink\" title=\"相依注入（Angular6）\"></a>相依注入（Angular6）</h3><p>在 <code>Angular6</code> 版本中，对于 <code>Service</code> ，框架采用了相依注入的模式。即在 <code>Angular5</code> 版本中的配置注入器由框架自动完成。其代码如下所示<br>communicate.service.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Subject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/Subject&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span> <span class=\"comment\">//与Angular5版本的区别</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommunicateService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> eventBus=<span class=\"keyword\">new</span> Subject&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上述代码中，<code>provideIn</code> 为 <code>root</code>，即在项目中各个组件都可以使用该服务，若只想在某个模块中使用该服务，在服务中引入模块名，将代码中的 <code>root</code> 改成 <code>模块名</code> 即可。<br>在A组件中，使用该服务（<code>service</code>）<br>A.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../communicate.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> setEventBus():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.communicateService.eventBus.next(<span class=\"string\">&quot;触发service&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>A组件模板代码如下所示<br>A.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;setEventBus()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在B组件中，使用该服务（<code>service</code>）<br>B.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../communicate.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> communicateService:CommunicateService</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.communicateService.eventBus.subscribe(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击 <code>A组件</code> 模板中的 <code>点击</code> 按钮，可以在控制台输出 <code>触发service</code> ，而且这是由 <code>B组件</code> 输出 <code>A组件</code> 中定义的值，即实现了通讯。</p>\n<h2 id=\"cookie-或-localstorage\"><a href=\"#cookie-或-localstorage\" class=\"headerlink\" title=\"cookie 或 localstorage\"></a>cookie 或 localstorage</h2><p>组件与组件间的通讯也可以使用浏览器的自带功能，即 <code>cookie</code> 或 <code>localstorage</code>，其模式如下图所示。</p>\n<p><img src=\"https://bingolil.github.io/images/angular-cl.png\"></p>\n<p>在A组件中写入 <code>cookie</code> 或 <code>localstorage</code> 代码如下所示<br>A.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> setLocal():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.localStorage.setItem(<span class=\"string\">&quot;json&quot;</span>,<span class=\"built_in\">JSON</span>.stringify(&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;jack&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">24</span>&#125;));</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>A模板代码如下所示<br>A.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;setLocal()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>设置localstorage<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在B组件中获取 <code>cookie</code> 或 <code>localstorage</code> 代码如下所示<br>B.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> conLocal():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> json=<span class=\"built_in\">window</span>.localStorage.getItem(<span class=\"string\">&quot;json&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj=<span class=\"built_in\">JSON</span>.parse(json);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>B组件模板代码如下所示<br>B.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;conLocal()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>输出localstorage<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中，点击A组件中 <code>设置localstorage</code> 按钮，然后点击B组件中 <code>输出localstorage</code> 按钮，可以在控制台输出A组件中设置的 <code>json</code> 对象，即采用 <code>cookie</code> 或 <code>localstorage</code> 的通讯方式成功。</p>\n<h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><p>利用session在组件间的通讯模式如下图所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-session.png\"></p>\n<p><code>Session</code> ：在计算机中，尤其是在网络应用中，称为“会话控制”。<code>Session</code>  对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 <code>Web</code> 页之间跳转时，存储在 <code>Session</code>  对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"通讯方式\"><a href=\"#通讯方式\" class=\"headerlink\" title=\"通讯方式\"></a>通讯方式</h2><p>组件就像是一个个的零件，我们需要按照 <code>Angular</code>  定义的规则将它们组装起来，而且它们之间可以进行交流通讯，这样才组成一个有机的完整系统。<br>在一个完整的系统中，组件会形成树形结构，如下图所示。</p>\n<p><img src=\"https://bingolil.github.io/images/com-tree.png\"></p>\n<p><code>Angular</code> 组件间的典型通讯方式有以下几种：</p>\n<blockquote>\n<ul>\n<li>直接的父子关系：父组件访问子组件的 <code>public</code> 属性和方法</li>\n<li>直接的父子关系：子组件借助于 <code>Input</code> 和 <code>Output</code> 和父组件进行通讯</li>\n<li>没有直接关系：借助于 <code>service</code> 单例进行通讯</li>\n<li>利用浏览器的 <code>cookie</code> 和 <code>localStorage</code> 存储进行通讯</li>\n<li>利用 <code>session</code> 进行通讯</li>\n</ul>\n</blockquote>\n<h2 id=\"直接调用\"><a href=\"#直接调用\" class=\"headerlink\" title=\"直接调用\"></a>直接调用</h2><p>对于组件间的关系是父子关系，父组件可以直接访问子组件里面的 <code>public</code> 方法和属性。其父组件代码如下<br>parent.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> #<span class=\"attr\">child</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;child.childFn()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>调用子组件</span><br><span class=\"line\">方法<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p>通过在模板里面定义局部变量的方式来直接调用子组件里面的 <code>public</code> 型方法，该段代码表达的意思是父组件中点击 <code>调用子组件方法</code>  按钮，调用 <code>child</code> 中的 <code>public</code> 方法 <code>childFn()</code>。而子组件代码如下<br>child.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> childFn():<span class=\"built_in\">void</span>&#123; <span class=\"comment\">//public可以要，可以不用，</span></span><br><span class=\"line\">                       <span class=\"comment\">//angular变量和方法默认为public类型</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;点击事件发生在父组件&quot;</span>);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>运行该项目，在浏览器中，点击 <code>调用子组件方法</code> 按钮，按 <code>f12</code> 查看控制台，可以看到输出 <code>点击事件发生在父组件</code><br>该方式是在组件的模板 <code>parent.compontent.html</code> 中调用子组件，如果需要在父组件本身 <code>parent.compontent.ts</code> 中调用子组件，在父组件中需要引入 <code>ViewChild</code> 装饰器，代码如下所示<br>parent.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ViewChild &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ChildComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../child/child.component.ts&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">..... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ViewChild</span>(ChildComponent)</span><br><span class=\"line\"><span class=\"keyword\">private</span> child: ChildComponent; </span><br></pre></td></tr></table></figure>\n\n<p>在父组件的ts文件中，<code>child</code> 代表的是子组件，这样就可以调用子组件的 <code>public</code> 方法或属性，关于 <code>@viewChild</code> 装饰器以后会详细介绍。</p>\n<h2 id=\"Input-和-Output\"><a href=\"#Input-和-Output\" class=\"headerlink\" title=\"@Input 和 @Output\"></a>@Input 和 @Output</h2><p><code>@Input</code> 和 <code>@Output</code> 是 <code>Angular</code> 提供的装饰器，子组件和父组件之间的通讯可以用到这两个装饰器，并且在 <code>Angular</code> 项目的 <code>通用组件</code>（即将多处相似的模板提取出来，重写成一个组件，这个组件在项目中多处被使用） 中经常被使用。</p>\n<h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"@Input\"></a>@Input</h3><p><code>@Input</code> 装饰器是子组件获取父组件的属性，代码如下所示<br>parent.component.html（父组件模板）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> <span class=\"attr\">comVar</span>=<span class=\"string\">&quot;父组件模板变量&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>child.component.ts（子组件）</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; OnInit, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">..... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Input</span>() comVar: <span class=\"built_in\">string</span>=<span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.comVar);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以在浏览器控制台中看到输出 <code>父组件模板变量</code><br>上面的变量是在模板中定义，也可以采用 <code>Angular</code> 的属性绑定机制，在父组件 <code>parent.component.ts</code> 中定义数据，在模板 <code>parent.component.html</code> 中使用，代码如下所示<br>parent.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">comVar=<span class=\"string\">&#x27;父组件变量&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>parent.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> [<span class=\"attr\">varParent</span>]=<span class=\"string\">&quot;comVar&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其子组件代码如下所示<br>child.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; OnInit, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">..... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Input</span>() varParent: <span class=\"built_in\">string</span>=<span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.varParent);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以在浏览器的控制台中看到输出 <code>父组件变量</code></p>\n<h3 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"@Output\"></a>@Output</h3><p><code>@Output</code> 的本质是事件机制，我们用它来监听子组件中的事件，即子组件发生了某个事件，通知父组件，代码如下所示</p>\n<p>child.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; EventEmitter, Output &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">childStr</span>:<span class=\"built_in\">string</span>= <span class=\"string\">&#x27;子组件字符串&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Output</span>() event=<span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">doEmit</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.event.emit(<span class=\"built_in\">this</span>.childStr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>child.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;doEmit()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>派发事件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p>其父组件代码如下所示<br>parent.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- event对应的是子组件中 new EventEmitter() --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- childEvent($event)对应的是父组件中的事件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> (<span class=\"attr\">event</span>)=<span class=\"string\">&quot;childEvent($event)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>parent.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">childEvent</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中，点击子组件的 <code>派发事件</code> 按钮，可以在控制台看到输出 <code>子组件字符串</code> ，并且每点击一次，其父组件就会在控制台输出一次。</p>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><p>服务（<code>Angular6</code> 版本）通讯模式如下图所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-service.png\"></p>\n<h3 id=\"Service优点\"><a href=\"#Service优点\" class=\"headerlink\" title=\"Service优点\"></a>Service优点</h3><p>很明显，上述两种 <strong>直接调用</strong> 和 <strong>Input 和 Output</strong> 组件间的通讯方式有一定的局限，即组件间的关系必须是父组件和子组件。在完整 <code>Angular</code> 项目中，组件与组件之间可能不存在直接关系，但组件之间需要进行通讯，这时就需要使用 <code>Angular</code> 提供的 <code>service</code> 功能，使用 <code>service</code> ，在同一个项目中，各个组件之间都可以进行通讯。</p>\n<h3 id=\"版本区别\"><a href=\"#版本区别\" class=\"headerlink\" title=\"版本区别\"></a>版本区别</h3><p>在 <code>Angular6</code> 版本以前，<code>Angular</code> 的服务（<code>service</code>）采用的是 <code>依赖注入</code> 方式，而 <code>Angular6</code> 版本采用的是 <code>相依注入</code> 方式。</p>\n<h3 id=\"依赖注入（Angular5）\"><a href=\"#依赖注入（Angular5）\" class=\"headerlink\" title=\"依赖注入（Angular5）\"></a>依赖注入（Angular5）</h3><p>由于依赖注入存在于 <code>Angular6</code> 版本以前，而且 <code>Angular7</code> 版本也出来不久，一般开发项目都是采用最新技术，所以关于 <code>依赖注入</code> 可以了解一下，看其使用机制。代码如下所示<br>定义一个服务 <code>CommunicateService</code></p>\n<p>communicate.service.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Subject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/Subject&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/Observable&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommunicateService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> eventBus=<span class=\"keyword\">new</span> Subject&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在组件中使用该服务需要在组件所在模块中配置注入器（也可以在组件中配置），其代码如下所示<br>app.module.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./communicate.service&#x27;</span>;</span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">providers</span>: [CommunicateService],</span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>在A组件中，使用该服务（<code>service</code>）<br>A.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../communicate.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> setEventBus():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.communicateService.eventBus.next(<span class=\"string\">&quot;触发service&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>A组件模板代码如下所示<br>A.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;setEventBus()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在B组件中，使用该服务（<code>service</code>）<br>B.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../communicate.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> communicateService:CommunicateService</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.communicateService.eventBus.subscribe(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击A组件模板中的 <code>点击</code> 按钮，可以在控制台输出 <code>触发service</code> ，而且这是由B组件输出A组件中定义的值，即实现了通讯。</p>\n<h3 id=\"相依注入（Angular6）\"><a href=\"#相依注入（Angular6）\" class=\"headerlink\" title=\"相依注入（Angular6）\"></a>相依注入（Angular6）</h3><p>在 <code>Angular6</code> 版本中，对于 <code>Service</code> ，框架采用了相依注入的模式。即在 <code>Angular5</code> 版本中的配置注入器由框架自动完成。其代码如下所示<br>communicate.service.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Subject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/Subject&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span> <span class=\"comment\">//与Angular5版本的区别</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommunicateService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> eventBus=<span class=\"keyword\">new</span> Subject&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上述代码中，<code>provideIn</code> 为 <code>root</code>，即在项目中各个组件都可以使用该服务，若只想在某个模块中使用该服务，在服务中引入模块名，将代码中的 <code>root</code> 改成 <code>模块名</code> 即可。<br>在A组件中，使用该服务（<code>service</code>）<br>A.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../communicate.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> setEventBus():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.communicateService.eventBus.next(<span class=\"string\">&quot;触发service&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>A组件模板代码如下所示<br>A.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;setEventBus()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在B组件中，使用该服务（<code>service</code>）<br>B.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../communicate.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> communicateService:CommunicateService</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.communicateService.eventBus.subscribe(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>点击 <code>A组件</code> 模板中的 <code>点击</code> 按钮，可以在控制台输出 <code>触发service</code> ，而且这是由 <code>B组件</code> 输出 <code>A组件</code> 中定义的值，即实现了通讯。</p>\n<h2 id=\"cookie-或-localstorage\"><a href=\"#cookie-或-localstorage\" class=\"headerlink\" title=\"cookie 或 localstorage\"></a>cookie 或 localstorage</h2><p>组件与组件间的通讯也可以使用浏览器的自带功能，即 <code>cookie</code> 或 <code>localstorage</code>，其模式如下图所示。</p>\n<p><img src=\"https://bingolil.github.io/images/angular-cl.png\"></p>\n<p>在A组件中写入 <code>cookie</code> 或 <code>localstorage</code> 代码如下所示<br>A.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> setLocal():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.localStorage.setItem(<span class=\"string\">&quot;json&quot;</span>,<span class=\"built_in\">JSON</span>.stringify(&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;jack&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">24</span>&#125;));</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>A模板代码如下所示<br>A.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;setLocal()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>设置localstorage<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在B组件中获取 <code>cookie</code> 或 <code>localstorage</code> 代码如下所示<br>B.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> conLocal():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> json=<span class=\"built_in\">window</span>.localStorage.getItem(<span class=\"string\">&quot;json&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj=<span class=\"built_in\">JSON</span>.parse(json);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>B组件模板代码如下所示<br>B.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;conLocal()&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>输出localstorage<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中，点击A组件中 <code>设置localstorage</code> 按钮，然后点击B组件中 <code>输出localstorage</code> 按钮，可以在控制台输出A组件中设置的 <code>json</code> 对象，即采用 <code>cookie</code> 或 <code>localstorage</code> 的通讯方式成功。</p>\n<h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><p>利用session在组件间的通讯模式如下图所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-session.png\"></p>\n<p><code>Session</code> ：在计算机中，尤其是在网络应用中，称为“会话控制”。<code>Session</code>  对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 <code>Web</code> 页之间跳转时，存储在 <code>Session</code>  对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。</p>\n"},{"title":"Angular学习-7-表单2","date":"2019-01-20T16:00:00.000Z","description":"Angular 提供了两种不同的方法来通过表单处理用户输入：响应式表单和模板驱动表单。 两者都从视图中捕获用户输入事件、验证用户输入、创建表单模型、修改数据模型，并提供跟踪这些更改的途径。","_content":"## 模板驱动表单\n模板驱动表单专注于简单的场景（也可以应用于大型表单）\n\n### [(ngModel)]\n\n在模板驱动表单中，通过 `[(ngModel)]` 将数据模型和视图相关联起来，其为双向绑定（值可以从模型流到视图，也可以从视图流到模型）。其代码如下所示\n\nTs\n```typescript\n....//代码块\n\n//定义绑定的变量\npublic charter={\n  name:'',  //姓名\n  age:18,   //年龄默认 18\n  power:'', //超能力\n  desc:''   //描述\n}\n\nprivate conCha(){\n  console.log(this.charter)\n}\n```\n\nHtml\n```HTML\n....//代码块\n<form>\n  姓名：<input type=\"text\" name=\"name\" [(ngModel)]=\"charter.name\"><hr>\n  年龄：><input type=\"number\" name=\"age\" [(ngModel)]=\"charter.age\"><hr>\n  超能力：<input type=\"text\" name=\"power\" [(ngModel)]=\"charter.power\"><hr>\n  描述：<input type=\"text\" name=\"desc\" [(ngModel)]=\"charter.desc\"><hr>\n  <button type=\"button\" (click)=\"conCha()\">控制台输出信息</button>\n</form>\n```\n\n> 在标签上使用 `[(ngModel)]` 时，需要在该标签加上 `name` 属性（其值在页面中唯一），建议 `name` 属性的值和 `[(ngModel)]` 绑定的值相同。在响应式表单中可以不用加 `name` 属性\n\n运行代码（上述 `Html` 代码已移除样式）后，在页面中改变各个输入框的，然后点击 `控制台输出信息` 按钮，可以看到，在控制台中输出组件的 `charter` 值，其值的属性值为页面中对应输入框输入的值。 \n\n### ngForm 和 ngNoForm\n`ngForm` 是一个指令，若开发者导入了 `FormsModule` 模块，该指令会在该模块下所有的 `form` 标签上生效（默认添加，`ngForm` 指令不会被自动添加到响应式表单中）。`ngForm` 指令创建一个顶级的 `FormGroup`，并把这个 `FormGroup` 绑定到一个表单上，以跟踪表单的状态和聚和值。\n\n> 当开发者不希望 `Angular` 接管表单时，可以在 `form` 标签上添加 `ngNoForm` 指令；当标签为 `div` 时，希望 `div` 接管表单，可以在 `div` 上添加 `ngForm` 指令\n\n其用法如下所示\n\nTs\n```typescript\n....//代码块\n\nconNgForm(f){\n  console.log(f);\n}\n```\n\nHtml\n```HTML\n<form #cha=\"ngForm\"><!-- cha 为ngForm的引用-->\n  <!-- 代码块，绑定姓名年龄等 -->\n  <button type=\"button\" (click)=\"conNgForm(cha)\">输出ngForm</button>\n</form>\n```\n\n运行该代码时，点击页面中的 `输出ngForm` 按钮，可以在控制台看到 `ngForm` 指令的值，其结果如下图所示\n\n![ngForm的值](https://bingolil.github.io/images/angular-ngForm.png)\n\n### FormArry 的替代方案\n当子控件的数量不确定时，在响应式表单中，其解决方案是由 `FormArry` 管理来子控件。在模板驱动表单中，其解决方案代码如下所示\n\nTs\n```typescript\n....//代码块\n\npublic charter={\n  name:'',  //姓名\n  age:18,   //年龄默认 18\n  power:'', //超能力\n  desc:'',  //描述\n  favs:[]   //爱好（在已有代码中新增的属性）\n}\n//添加新 input text 框以输入新爱好\nprivate addF(){\n  this.charter.favs.push('');\n}\n//防止失去焦点\nindexTracker(index: number, value: any) {\n  return index;\n}\n//移除当前的爱好\nprivate removeF(i){\n  this.charter.favs.splice(i,1);\n}\n....//代码块\n```\n\nHtml\n```HTML\n<form #cha=\"ngForm\">\n  <!--代码块，绑定姓名年龄等-->\n  爱好：\n  <p *ngFor=\"let item of charter.favs;let i=index;trackBy:indexTracker;\">\n    <input type=\"text\" name=\"fav{{i}}\" [(ngModel)]=\"charter.favs[i]\">\n    <button type=\"button\" (click)=\"removeF(i)\">移除</button>\n  </p>\n      <!--type一定要有-->\n  <button type=\"button\" (click)=\"addF()\">添加爱好</button>\n  <p>表单的值：{{charter | json}}</p>\n</form>\n<!--代码块-->\n```\n\n在浏览器中运行代码后，其页面效果如下所示\n\n![](https://bingolil.github.io/images/angular-formarray2.png)\n\n> **注意1：**在模板驱动表单中，使用上述方法绑定数组时，虽然循环表达式 `*ngFor=\"let item of charter.favs;let i=index;trackBy:indexTracker;\"` 中存在item，但其在双向绑定中并没有被使用，在 `[(ngModel)]` 的双向绑定中使用的是 `charter.favs[i]` \n\n> **注意2：**在 `ngFor` 的循环中使用 `trackBy`，其值 `indexTracker` 在 `Ts` 代码中被定义。它的作用是防止表单中绑定数组的 `input` 框在输入时失去焦点，即在页面中没有 `indexTracker` 时，表单中的爱好 `input` 框的值改变时，当前的表单会失去焦点\n\n> **注意3：**在 `Html` 代码中，按钮 `button` 需要加上 `type` 类型，如 `button`，`submit`等，若不加上，该按钮会被表单默认为 `submit` 类型。即当 `input` 框获取焦点后（不管有没有数据），按键盘上的回车键会触发表单中 `submit` 提交事件\n\n\n## 模板表单验证\n\n### Angular 提供的验证器\n在使用模板驱动表单时，`Angular` 提供了许多的验证器，其验证器直接在组件 `UI` 中使用，其代码如下所示\n\nHtml\n```HTML\n<form #cha=\"ngForm\">\n姓名：<input type=\"text\" name=\"name\" [(ngModel)]=\"charter.name\" required>\n<!--代码块，绑定其它的属性-->\n<p>表单的状态：{{cha.valid}}</p>\n</form>\n```\n当姓名 `input` 框没有值时时，页面中表单的状态为 `false`，一旦有值时，表单的状态为 `true`。\n\n> 当 `input` 为 `number` 类型时，`min=\"10\"` 的验证绑定不到表单中，在该框中直接输入一个比 `10` 小的数，表单的状态不改变\n\n在模板驱动表单中，`Angular` 能用的验证如下所示\n\n> `required`：表示该控件必须要有值，一般用于 `input` 的 `number`类型、`text`类型、`select`类型等，用法如上所示\n\n> `minLength`：表示当前输入的字符最小长度，一般用于 `input` 的 `text` 类型\n\n用法：`<input type=\"text\" name=\"name\" [(ngModel)]=\"charter.name\" minlength=\"2\"`，表示 `name` 必须不小于两个字符\n\n> `maxLength`：表示当前输入的字符最大长度，一般用于 `input` 的 `text` 类型\n\n用法：`<input type=\"text\" name=\"name\" [(ngModel)]=\"charter.name\" minlength=\"10\"`，表示 `name` 必须不大于10个字符\n\n> `pattern`：验证当前输入是否符合某种正则表达式，一般用于 `input` 的 `text` 类型\n\n用法：`<input type=\"text\" name=\"power\" [(ngModel)]=\"charter.power\" pattern=\"[A-z]*\">`，表示当前的 `input` 输入框的输入必须为英文字母（不管大小写）\n\n> `email`：表示当前输入的格式必须符合邮箱的格式，一般用于 `input` 的 `email` 类型\n\n用法：`<input type=\"email\" email name=\"email\" [(ngModel)]=\"charter.email\">`，表示当前 `input` 输入框的输入必须为邮箱格式\n\n\n> **注意：** 在模板驱动表单中，当 `input` 为 `number` 类型时，没有验证其大小的验证器（在响应式表单中为 `Validators.min()` 和 `Validators.max()`）\n\n### 自定义验证器\n在模板驱动表单中，自定义验证器的实质是一个自定义指令，自定义一个其代码如下所示\n\n指令Ts\n```typescript\nimport { Directive, forwardRef, Input } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms'\n\n@Directive({ //装饰器定义指令\n  selector: '[appZdy]',\n  providers:[\n    {provide:NG_VALIDATORS,useExisting:forwardRef(()=>ZdyValidator),\n    multi:true\n    } \n  ] \n})\nexport class ZdyValidator implements Validator{\n  @Input() appZdy:string; //输入\n\n  validate(c:AbstractControl):{[key:string]:any;}{\n    let value:string=c.value || ''; //c代表当前控件\n    if(value.startsWith(this.appZdy)){\n      return {mobile:{\n        msg:`手机号不能为${this.appZdy}开头`,\n        actualValue:value}\n      }\n    }\n    return null;\n  }\n }\n```\n\n在模板驱动表单中使用自定义验证器\n```HTML\n<!--代码块-->\n<span>手机：</span>\n<input type=\"text\" required appZdy=\"133\" name=\"phone\" [(ngModel)]=\"charter.phone\">\n<!--代码块-->\n```\n\n在浏览器中，运行该代码时，若在手机 `input` 框输入133为开头的字符串，该控件的状态会为 `INVALID`\n\n### 验证时错误提示\n在表单中，若用户输入不符合要求，需要提醒用户其出错在什么地方。在模板驱动表单中，提供了 `ngModel` 指令来实现该效果，其代码如下所示\n\nHtml\n```HTML\n<!--代码块-->\n<span>手机：</span>\n<input type=\"text\" required appZdy=\"133\" name=\"phone\" [(ngModel)]=\"charter.phone\" #phone=\"ngModel\">\n<div *ngIf=\"phone.invalid && (phone.dirty || phone.touched)\">\n  <p>手机号必填</p>\n  <p *ngIf=\"phone.errors.mobile\">{{phone.errors.mobile.msg}}</p>\n</div>\n<!--代码块-->\n```\n\n在上面的 `Html` 代码中，`input` 标签中的 `#phone=\"ngModel\"` 代表当前控件赋值给 `phone` 变量。即在页面中，`phone` 变量包含这个控件的一切，可以访问该控件的 `value` 或 `status`。\n\n> **dirty 和 touched：**在初始化页面后，开发者一般不希望将错误提示在用户还没有输入时就展示出来，这会降低用户体验，而 `dirty` 和 `touched` 可以解决该该问题。改变控件的值时，控件的 `dirty`（脏）状态发生改变，当控件失去焦点时，会改变控件的 `touched`（碰过）状态。\n\n### 异步验证\n在模板驱动表单中，异步验证的验证器是一个自定义指令，验证用户名唯一的功能代码如下所示\n\nasyc-name.directive.ts\n```typescript\nimport { Directive, forwardRef } from '@angular/core';\nimport { AsyncValidator, NG_ASYNC_VALIDATORS, AbstractControl, ValidationErrors } from '@angular/forms'\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { AsycService } from '../asyc.service';\n\n@Directive({\n  selector: '[appAsycName]',\n  providers:[\n    {provide:NG_ASYNC_VALIDATORS,useExisting:forwardRef(()=>AsycNameValidator),\n    multi:true\n    }\n  ]\n})\nexport class AsycNameValidator implements AsyncValidator {\n\n  constructor(private asycService:AsycService) { }\n\n  validate(ctrl:AbstractControl):Promise<ValidationErrors | null> | Observable<ValidationErrors | null>{\n    return this.asycService._can_use(ctrl.value).pipe(\n      map(xx=>(xx?{can_use:false}:null)),\n      catchError(()=>null)\n    )\n  }\n}\n\n```\n\n在模板驱动表单中使用该异步验证器\n\nHtml\n\n```HTML\n<!--代码块-->\n姓名：<input type=\"text\" name=\"name\" [(ngModel)]=\"charter.name\" [ngModelOptions]=\"{ updateOn: 'blur' }\" appAsycName>\n<!--代码块-->\n```\n\n## 性能影响\n在默认情况下，表单的值一旦发生改变，`Angular` 会执行所有的验证器。对于同步验证器，其对项目没有明显的影响，不过，异步验证一般都会发送 `http` 请求来对控件进行验证，每次按键时，触发验证，若按键的速度过快，程序会在短时间来发送大量的 `http` 请求，这会对项目的性能造成明显的影响，降低用户体验，应该避免这种情况出现。\n\n在异步验证用户名时，在 `input` 框中，可以将 `updateOn` 的值从 `change` 改为 `blur` 来推迟异步验证的时机，即当控件失去焦点时才进行异步验证。其代码如下所示\n\n**模板驱动表单**\nHtml\n```HTML\n<input type=\"text\" name=\"name\" [(ngModel)]=\"charter.name\" ngModelOptions=\"{updateOn:'blur'}\">\n```\n\n**响应式表单**\n\nTs\n```typescript\nnew FormControl('',{updateOn:'blur'})\n```\n\n\n\n\n\n\n","source":"_posts/angular/learn-7.md","raw":"title:  Angular学习-7-表单2\ncategories: Angular\ndate: 2019-01-21\ntags: [Angular,Angular表单]\ndescription: Angular 提供了两种不同的方法来通过表单处理用户输入：响应式表单和模板驱动表单。 两者都从视图中捕获用户输入事件、验证用户输入、创建表单模型、修改数据模型，并提供跟踪这些更改的途径。\n---\n## 模板驱动表单\n模板驱动表单专注于简单的场景（也可以应用于大型表单）\n\n### [(ngModel)]\n\n在模板驱动表单中，通过 `[(ngModel)]` 将数据模型和视图相关联起来，其为双向绑定（值可以从模型流到视图，也可以从视图流到模型）。其代码如下所示\n\nTs\n```typescript\n....//代码块\n\n//定义绑定的变量\npublic charter={\n  name:'',  //姓名\n  age:18,   //年龄默认 18\n  power:'', //超能力\n  desc:''   //描述\n}\n\nprivate conCha(){\n  console.log(this.charter)\n}\n```\n\nHtml\n```HTML\n....//代码块\n<form>\n  姓名：<input type=\"text\" name=\"name\" [(ngModel)]=\"charter.name\"><hr>\n  年龄：><input type=\"number\" name=\"age\" [(ngModel)]=\"charter.age\"><hr>\n  超能力：<input type=\"text\" name=\"power\" [(ngModel)]=\"charter.power\"><hr>\n  描述：<input type=\"text\" name=\"desc\" [(ngModel)]=\"charter.desc\"><hr>\n  <button type=\"button\" (click)=\"conCha()\">控制台输出信息</button>\n</form>\n```\n\n> 在标签上使用 `[(ngModel)]` 时，需要在该标签加上 `name` 属性（其值在页面中唯一），建议 `name` 属性的值和 `[(ngModel)]` 绑定的值相同。在响应式表单中可以不用加 `name` 属性\n\n运行代码（上述 `Html` 代码已移除样式）后，在页面中改变各个输入框的，然后点击 `控制台输出信息` 按钮，可以看到，在控制台中输出组件的 `charter` 值，其值的属性值为页面中对应输入框输入的值。 \n\n### ngForm 和 ngNoForm\n`ngForm` 是一个指令，若开发者导入了 `FormsModule` 模块，该指令会在该模块下所有的 `form` 标签上生效（默认添加，`ngForm` 指令不会被自动添加到响应式表单中）。`ngForm` 指令创建一个顶级的 `FormGroup`，并把这个 `FormGroup` 绑定到一个表单上，以跟踪表单的状态和聚和值。\n\n> 当开发者不希望 `Angular` 接管表单时，可以在 `form` 标签上添加 `ngNoForm` 指令；当标签为 `div` 时，希望 `div` 接管表单，可以在 `div` 上添加 `ngForm` 指令\n\n其用法如下所示\n\nTs\n```typescript\n....//代码块\n\nconNgForm(f){\n  console.log(f);\n}\n```\n\nHtml\n```HTML\n<form #cha=\"ngForm\"><!-- cha 为ngForm的引用-->\n  <!-- 代码块，绑定姓名年龄等 -->\n  <button type=\"button\" (click)=\"conNgForm(cha)\">输出ngForm</button>\n</form>\n```\n\n运行该代码时，点击页面中的 `输出ngForm` 按钮，可以在控制台看到 `ngForm` 指令的值，其结果如下图所示\n\n![ngForm的值](https://bingolil.github.io/images/angular-ngForm.png)\n\n### FormArry 的替代方案\n当子控件的数量不确定时，在响应式表单中，其解决方案是由 `FormArry` 管理来子控件。在模板驱动表单中，其解决方案代码如下所示\n\nTs\n```typescript\n....//代码块\n\npublic charter={\n  name:'',  //姓名\n  age:18,   //年龄默认 18\n  power:'', //超能力\n  desc:'',  //描述\n  favs:[]   //爱好（在已有代码中新增的属性）\n}\n//添加新 input text 框以输入新爱好\nprivate addF(){\n  this.charter.favs.push('');\n}\n//防止失去焦点\nindexTracker(index: number, value: any) {\n  return index;\n}\n//移除当前的爱好\nprivate removeF(i){\n  this.charter.favs.splice(i,1);\n}\n....//代码块\n```\n\nHtml\n```HTML\n<form #cha=\"ngForm\">\n  <!--代码块，绑定姓名年龄等-->\n  爱好：\n  <p *ngFor=\"let item of charter.favs;let i=index;trackBy:indexTracker;\">\n    <input type=\"text\" name=\"fav{{i}}\" [(ngModel)]=\"charter.favs[i]\">\n    <button type=\"button\" (click)=\"removeF(i)\">移除</button>\n  </p>\n      <!--type一定要有-->\n  <button type=\"button\" (click)=\"addF()\">添加爱好</button>\n  <p>表单的值：{{charter | json}}</p>\n</form>\n<!--代码块-->\n```\n\n在浏览器中运行代码后，其页面效果如下所示\n\n![](https://bingolil.github.io/images/angular-formarray2.png)\n\n> **注意1：**在模板驱动表单中，使用上述方法绑定数组时，虽然循环表达式 `*ngFor=\"let item of charter.favs;let i=index;trackBy:indexTracker;\"` 中存在item，但其在双向绑定中并没有被使用，在 `[(ngModel)]` 的双向绑定中使用的是 `charter.favs[i]` \n\n> **注意2：**在 `ngFor` 的循环中使用 `trackBy`，其值 `indexTracker` 在 `Ts` 代码中被定义。它的作用是防止表单中绑定数组的 `input` 框在输入时失去焦点，即在页面中没有 `indexTracker` 时，表单中的爱好 `input` 框的值改变时，当前的表单会失去焦点\n\n> **注意3：**在 `Html` 代码中，按钮 `button` 需要加上 `type` 类型，如 `button`，`submit`等，若不加上，该按钮会被表单默认为 `submit` 类型。即当 `input` 框获取焦点后（不管有没有数据），按键盘上的回车键会触发表单中 `submit` 提交事件\n\n\n## 模板表单验证\n\n### Angular 提供的验证器\n在使用模板驱动表单时，`Angular` 提供了许多的验证器，其验证器直接在组件 `UI` 中使用，其代码如下所示\n\nHtml\n```HTML\n<form #cha=\"ngForm\">\n姓名：<input type=\"text\" name=\"name\" [(ngModel)]=\"charter.name\" required>\n<!--代码块，绑定其它的属性-->\n<p>表单的状态：{{cha.valid}}</p>\n</form>\n```\n当姓名 `input` 框没有值时时，页面中表单的状态为 `false`，一旦有值时，表单的状态为 `true`。\n\n> 当 `input` 为 `number` 类型时，`min=\"10\"` 的验证绑定不到表单中，在该框中直接输入一个比 `10` 小的数，表单的状态不改变\n\n在模板驱动表单中，`Angular` 能用的验证如下所示\n\n> `required`：表示该控件必须要有值，一般用于 `input` 的 `number`类型、`text`类型、`select`类型等，用法如上所示\n\n> `minLength`：表示当前输入的字符最小长度，一般用于 `input` 的 `text` 类型\n\n用法：`<input type=\"text\" name=\"name\" [(ngModel)]=\"charter.name\" minlength=\"2\"`，表示 `name` 必须不小于两个字符\n\n> `maxLength`：表示当前输入的字符最大长度，一般用于 `input` 的 `text` 类型\n\n用法：`<input type=\"text\" name=\"name\" [(ngModel)]=\"charter.name\" minlength=\"10\"`，表示 `name` 必须不大于10个字符\n\n> `pattern`：验证当前输入是否符合某种正则表达式，一般用于 `input` 的 `text` 类型\n\n用法：`<input type=\"text\" name=\"power\" [(ngModel)]=\"charter.power\" pattern=\"[A-z]*\">`，表示当前的 `input` 输入框的输入必须为英文字母（不管大小写）\n\n> `email`：表示当前输入的格式必须符合邮箱的格式，一般用于 `input` 的 `email` 类型\n\n用法：`<input type=\"email\" email name=\"email\" [(ngModel)]=\"charter.email\">`，表示当前 `input` 输入框的输入必须为邮箱格式\n\n\n> **注意：** 在模板驱动表单中，当 `input` 为 `number` 类型时，没有验证其大小的验证器（在响应式表单中为 `Validators.min()` 和 `Validators.max()`）\n\n### 自定义验证器\n在模板驱动表单中，自定义验证器的实质是一个自定义指令，自定义一个其代码如下所示\n\n指令Ts\n```typescript\nimport { Directive, forwardRef, Input } from '@angular/core';\nimport { NG_VALIDATORS, Validator, AbstractControl } from '@angular/forms'\n\n@Directive({ //装饰器定义指令\n  selector: '[appZdy]',\n  providers:[\n    {provide:NG_VALIDATORS,useExisting:forwardRef(()=>ZdyValidator),\n    multi:true\n    } \n  ] \n})\nexport class ZdyValidator implements Validator{\n  @Input() appZdy:string; //输入\n\n  validate(c:AbstractControl):{[key:string]:any;}{\n    let value:string=c.value || ''; //c代表当前控件\n    if(value.startsWith(this.appZdy)){\n      return {mobile:{\n        msg:`手机号不能为${this.appZdy}开头`,\n        actualValue:value}\n      }\n    }\n    return null;\n  }\n }\n```\n\n在模板驱动表单中使用自定义验证器\n```HTML\n<!--代码块-->\n<span>手机：</span>\n<input type=\"text\" required appZdy=\"133\" name=\"phone\" [(ngModel)]=\"charter.phone\">\n<!--代码块-->\n```\n\n在浏览器中，运行该代码时，若在手机 `input` 框输入133为开头的字符串，该控件的状态会为 `INVALID`\n\n### 验证时错误提示\n在表单中，若用户输入不符合要求，需要提醒用户其出错在什么地方。在模板驱动表单中，提供了 `ngModel` 指令来实现该效果，其代码如下所示\n\nHtml\n```HTML\n<!--代码块-->\n<span>手机：</span>\n<input type=\"text\" required appZdy=\"133\" name=\"phone\" [(ngModel)]=\"charter.phone\" #phone=\"ngModel\">\n<div *ngIf=\"phone.invalid && (phone.dirty || phone.touched)\">\n  <p>手机号必填</p>\n  <p *ngIf=\"phone.errors.mobile\">{{phone.errors.mobile.msg}}</p>\n</div>\n<!--代码块-->\n```\n\n在上面的 `Html` 代码中，`input` 标签中的 `#phone=\"ngModel\"` 代表当前控件赋值给 `phone` 变量。即在页面中，`phone` 变量包含这个控件的一切，可以访问该控件的 `value` 或 `status`。\n\n> **dirty 和 touched：**在初始化页面后，开发者一般不希望将错误提示在用户还没有输入时就展示出来，这会降低用户体验，而 `dirty` 和 `touched` 可以解决该该问题。改变控件的值时，控件的 `dirty`（脏）状态发生改变，当控件失去焦点时，会改变控件的 `touched`（碰过）状态。\n\n### 异步验证\n在模板驱动表单中，异步验证的验证器是一个自定义指令，验证用户名唯一的功能代码如下所示\n\nasyc-name.directive.ts\n```typescript\nimport { Directive, forwardRef } from '@angular/core';\nimport { AsyncValidator, NG_ASYNC_VALIDATORS, AbstractControl, ValidationErrors } from '@angular/forms'\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { AsycService } from '../asyc.service';\n\n@Directive({\n  selector: '[appAsycName]',\n  providers:[\n    {provide:NG_ASYNC_VALIDATORS,useExisting:forwardRef(()=>AsycNameValidator),\n    multi:true\n    }\n  ]\n})\nexport class AsycNameValidator implements AsyncValidator {\n\n  constructor(private asycService:AsycService) { }\n\n  validate(ctrl:AbstractControl):Promise<ValidationErrors | null> | Observable<ValidationErrors | null>{\n    return this.asycService._can_use(ctrl.value).pipe(\n      map(xx=>(xx?{can_use:false}:null)),\n      catchError(()=>null)\n    )\n  }\n}\n\n```\n\n在模板驱动表单中使用该异步验证器\n\nHtml\n\n```HTML\n<!--代码块-->\n姓名：<input type=\"text\" name=\"name\" [(ngModel)]=\"charter.name\" [ngModelOptions]=\"{ updateOn: 'blur' }\" appAsycName>\n<!--代码块-->\n```\n\n## 性能影响\n在默认情况下，表单的值一旦发生改变，`Angular` 会执行所有的验证器。对于同步验证器，其对项目没有明显的影响，不过，异步验证一般都会发送 `http` 请求来对控件进行验证，每次按键时，触发验证，若按键的速度过快，程序会在短时间来发送大量的 `http` 请求，这会对项目的性能造成明显的影响，降低用户体验，应该避免这种情况出现。\n\n在异步验证用户名时，在 `input` 框中，可以将 `updateOn` 的值从 `change` 改为 `blur` 来推迟异步验证的时机，即当控件失去焦点时才进行异步验证。其代码如下所示\n\n**模板驱动表单**\nHtml\n```HTML\n<input type=\"text\" name=\"name\" [(ngModel)]=\"charter.name\" ngModelOptions=\"{updateOn:'blur'}\">\n```\n\n**响应式表单**\n\nTs\n```typescript\nnew FormControl('',{updateOn:'blur'})\n```\n\n\n\n\n\n\n","slug":"angular/learn-7","published":1,"updated":"2021-11-24T01:12:15.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwe931jx0006ycsz30v5b7g3","content":"<h2 id=\"模板驱动表单\"><a href=\"#模板驱动表单\" class=\"headerlink\" title=\"模板驱动表单\"></a>模板驱动表单</h2><p>模板驱动表单专注于简单的场景（也可以应用于大型表单）</p>\n<h3 id=\"ngModel\"><a href=\"#ngModel\" class=\"headerlink\" title=\"[(ngModel)]\"></a>[(ngModel)]</h3><p>在模板驱动表单中，通过 <code>[(ngModel)]</code> 将数据模型和视图相关联起来，其为双向绑定（值可以从模型流到视图，也可以从视图流到模型）。其代码如下所示</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义绑定的变量</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> charter=&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;&#x27;</span>,  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span>,   <span class=\"comment\">//年龄默认 18</span></span><br><span class=\"line\">  <span class=\"attr\">power</span>:<span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\">//超能力</span></span><br><span class=\"line\">  <span class=\"attr\">desc</span>:<span class=\"string\">&#x27;&#x27;</span>   <span class=\"comment\">//描述</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"title\">conCha</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.charter)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....//代码块</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  姓名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.name&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  年龄：&gt;<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.age&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  超能力：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;power&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.power&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  描述：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;desc&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.desc&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;conCha()&quot;</span>&gt;</span>控制台输出信息<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在标签上使用 <code>[(ngModel)]</code> 时，需要在该标签加上 <code>name</code> 属性（其值在页面中唯一），建议 <code>name</code> 属性的值和 <code>[(ngModel)]</code> 绑定的值相同。在响应式表单中可以不用加 <code>name</code> 属性</p>\n</blockquote>\n<p>运行代码（上述 <code>Html</code> 代码已移除样式）后，在页面中改变各个输入框的，然后点击 <code>控制台输出信息</code> 按钮，可以看到，在控制台中输出组件的 <code>charter</code> 值，其值的属性值为页面中对应输入框输入的值。 </p>\n<h3 id=\"ngForm-和-ngNoForm\"><a href=\"#ngForm-和-ngNoForm\" class=\"headerlink\" title=\"ngForm 和 ngNoForm\"></a>ngForm 和 ngNoForm</h3><p><code>ngForm</code> 是一个指令，若开发者导入了 <code>FormsModule</code> 模块，该指令会在该模块下所有的 <code>form</code> 标签上生效（默认添加，<code>ngForm</code> 指令不会被自动添加到响应式表单中）。<code>ngForm</code> 指令创建一个顶级的 <code>FormGroup</code>，并把这个 <code>FormGroup</code> 绑定到一个表单上，以跟踪表单的状态和聚和值。</p>\n<blockquote>\n<p>当开发者不希望 <code>Angular</code> 接管表单时，可以在 <code>form</code> 标签上添加 <code>ngNoForm</code> 指令；当标签为 <code>div</code> 时，希望 <code>div</code> 接管表单，可以在 <code>div</code> 上添加 <code>ngForm</code> 指令</p>\n</blockquote>\n<p>其用法如下所示</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">conNgForm</span>(<span class=\"params\">f</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">cha</span>=<span class=\"string\">&quot;ngForm&quot;</span>&gt;</span><span class=\"comment\">&lt;!-- cha 为ngForm的引用--&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 代码块，绑定姓名年龄等 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;conNgForm(cha)&quot;</span>&gt;</span>输出ngForm<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>运行该代码时，点击页面中的 <code>输出ngForm</code> 按钮，可以在控制台看到 <code>ngForm</code> 指令的值，其结果如下图所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-ngForm.png\" alt=\"ngForm的值\"></p>\n<h3 id=\"FormArry-的替代方案\"><a href=\"#FormArry-的替代方案\" class=\"headerlink\" title=\"FormArry 的替代方案\"></a>FormArry 的替代方案</h3><p>当子控件的数量不确定时，在响应式表单中，其解决方案是由 <code>FormArry</code> 管理来子控件。在模板驱动表单中，其解决方案代码如下所示</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> charter=&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;&#x27;</span>,  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span>,   <span class=\"comment\">//年龄默认 18</span></span><br><span class=\"line\">  <span class=\"attr\">power</span>:<span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\">//超能力</span></span><br><span class=\"line\">  <span class=\"attr\">desc</span>:<span class=\"string\">&#x27;&#x27;</span>,  <span class=\"comment\">//描述</span></span><br><span class=\"line\">  <span class=\"attr\">favs</span>:[]   <span class=\"comment\">//爱好（在已有代码中新增的属性）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//添加新 input text 框以输入新爱好</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"title\">addF</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.charter.favs.push(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//防止失去焦点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">indexTracker</span>(<span class=\"params\">index: <span class=\"built_in\">number</span>, value: <span class=\"built_in\">any</span></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//移除当前的爱好</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"title\">removeF</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.charter.favs.splice(i,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">cha</span>=<span class=\"string\">&quot;ngForm&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--代码块，绑定姓名年龄等--&gt;</span></span><br><span class=\"line\">  爱好：</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let item of charter.favs;let i=index;trackBy:indexTracker;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fav&#123;&#123;i&#125;&#125;&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.favs[i]&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;removeF(i)&quot;</span>&gt;</span>移除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--type一定要有--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;addF()&quot;</span>&gt;</span>添加爱好<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>表单的值：&#123;&#123;charter | json&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--代码块--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中运行代码后，其页面效果如下所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-formarray2.png\"></p>\n<blockquote>\n<p><strong>注意1：</strong>在模板驱动表单中，使用上述方法绑定数组时，虽然循环表达式 <code>*ngFor=&quot;let item of charter.favs;let i=index;trackBy:indexTracker;&quot;</code> 中存在item，但其在双向绑定中并没有被使用，在 <code>[(ngModel)]</code> 的双向绑定中使用的是 <code>charter.favs[i]</code> </p>\n</blockquote>\n<blockquote>\n<p><strong>注意2：</strong>在 <code>ngFor</code> 的循环中使用 <code>trackBy</code>，其值 <code>indexTracker</code> 在 <code>Ts</code> 代码中被定义。它的作用是防止表单中绑定数组的 <code>input</code> 框在输入时失去焦点，即在页面中没有 <code>indexTracker</code> 时，表单中的爱好 <code>input</code> 框的值改变时，当前的表单会失去焦点</p>\n</blockquote>\n<blockquote>\n<p><strong>注意3：</strong>在 <code>Html</code> 代码中，按钮 <code>button</code> 需要加上 <code>type</code> 类型，如 <code>button</code>，<code>submit</code>等，若不加上，该按钮会被表单默认为 <code>submit</code> 类型。即当 <code>input</code> 框获取焦点后（不管有没有数据），按键盘上的回车键会触发表单中 <code>submit</code> 提交事件</p>\n</blockquote>\n<h2 id=\"模板表单验证\"><a href=\"#模板表单验证\" class=\"headerlink\" title=\"模板表单验证\"></a>模板表单验证</h2><h3 id=\"Angular-提供的验证器\"><a href=\"#Angular-提供的验证器\" class=\"headerlink\" title=\"Angular 提供的验证器\"></a>Angular 提供的验证器</h3><p>在使用模板驱动表单时，<code>Angular</code> 提供了许多的验证器，其验证器直接在组件 <code>UI</code> 中使用，其代码如下所示</p>\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">cha</span>=<span class=\"string\">&quot;ngForm&quot;</span>&gt;</span></span><br><span class=\"line\">姓名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.name&quot;</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--代码块，绑定其它的属性--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>表单的状态：&#123;&#123;cha.valid&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当姓名 <code>input</code> 框没有值时时，页面中表单的状态为 <code>false</code>，一旦有值时，表单的状态为 <code>true</code>。</p>\n<blockquote>\n<p>当 <code>input</code> 为 <code>number</code> 类型时，<code>min=&quot;10&quot;</code> 的验证绑定不到表单中，在该框中直接输入一个比 <code>10</code> 小的数，表单的状态不改变</p>\n</blockquote>\n<p>在模板驱动表单中，<code>Angular</code> 能用的验证如下所示</p>\n<blockquote>\n<p><code>required</code>：表示该控件必须要有值，一般用于 <code>input</code> 的 <code>number</code>类型、<code>text</code>类型、<code>select</code>类型等，用法如上所示</p>\n</blockquote>\n<blockquote>\n<p><code>minLength</code>：表示当前输入的字符最小长度，一般用于 <code>input</code> 的 <code>text</code> 类型</p>\n</blockquote>\n<p>用法：<code>&lt;input type=&quot;text&quot; name=&quot;name&quot; [(ngModel)]=&quot;charter.name&quot; minlength=&quot;2&quot;</code>，表示 <code>name</code> 必须不小于两个字符</p>\n<blockquote>\n<p><code>maxLength</code>：表示当前输入的字符最大长度，一般用于 <code>input</code> 的 <code>text</code> 类型</p>\n</blockquote>\n<p>用法：<code>&lt;input type=&quot;text&quot; name=&quot;name&quot; [(ngModel)]=&quot;charter.name&quot; minlength=&quot;10&quot;</code>，表示 <code>name</code> 必须不大于10个字符</p>\n<blockquote>\n<p><code>pattern</code>：验证当前输入是否符合某种正则表达式，一般用于 <code>input</code> 的 <code>text</code> 类型</p>\n</blockquote>\n<p>用法：<code>&lt;input type=&quot;text&quot; name=&quot;power&quot; [(ngModel)]=&quot;charter.power&quot; pattern=&quot;[A-z]*&quot;&gt;</code>，表示当前的 <code>input</code> 输入框的输入必须为英文字母（不管大小写）</p>\n<blockquote>\n<p><code>email</code>：表示当前输入的格式必须符合邮箱的格式，一般用于 <code>input</code> 的 <code>email</code> 类型</p>\n</blockquote>\n<p>用法：<code>&lt;input type=&quot;email&quot; email name=&quot;email&quot; [(ngModel)]=&quot;charter.email&quot;&gt;</code>，表示当前 <code>input</code> 输入框的输入必须为邮箱格式</p>\n<blockquote>\n<p><strong>注意：</strong> 在模板驱动表单中，当 <code>input</code> 为 <code>number</code> 类型时，没有验证其大小的验证器（在响应式表单中为 <code>Validators.min()</code> 和 <code>Validators.max()</code>）</p>\n</blockquote>\n<h3 id=\"自定义验证器\"><a href=\"#自定义验证器\" class=\"headerlink\" title=\"自定义验证器\"></a>自定义验证器</h3><p>在模板驱动表单中，自定义验证器的实质是一个自定义指令，自定义一个其代码如下所示</p>\n<p>指令Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Directive, forwardRef, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NG_VALIDATORS, Validator, AbstractControl &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123; <span class=\"comment\">//装饰器定义指令</span></span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appZdy]&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">providers</span>:[</span><br><span class=\"line\">    &#123;<span class=\"attr\">provide</span>:NG_VALIDATORS,<span class=\"attr\">useExisting</span>:forwardRef(<span class=\"function\">()=&gt;</span>ZdyValidator),</span><br><span class=\"line\">    <span class=\"attr\">multi</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  ] </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZdyValidator</span> <span class=\"title\">implements</span> <span class=\"title\">Validator</span></span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() appZdy:<span class=\"built_in\">string</span>; <span class=\"comment\">//输入</span></span><br><span class=\"line\"></span><br><span class=\"line\">  validate(c:AbstractControl):&#123;[key:<span class=\"built_in\">string</span>]:<span class=\"built_in\">any</span>;&#125;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value:<span class=\"built_in\">string</span>=c.value || <span class=\"string\">&#x27;&#x27;</span>; <span class=\"comment\">//c代表当前控件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(value.startsWith(<span class=\"built_in\">this</span>.appZdy))&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;<span class=\"attr\">mobile</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">msg</span>:<span class=\"string\">`手机号不能为<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.appZdy&#125;</span>开头`</span>,</span><br><span class=\"line\">        <span class=\"attr\">actualValue</span>:value&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在模板驱动表单中使用自定义验证器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--代码块--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>手机：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">required</span> <span class=\"attr\">appZdy</span>=<span class=\"string\">&quot;133&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;phone&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.phone&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--代码块--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中，运行该代码时，若在手机 <code>input</code> 框输入133为开头的字符串，该控件的状态会为 <code>INVALID</code></p>\n<h3 id=\"验证时错误提示\"><a href=\"#验证时错误提示\" class=\"headerlink\" title=\"验证时错误提示\"></a>验证时错误提示</h3><p>在表单中，若用户输入不符合要求，需要提醒用户其出错在什么地方。在模板驱动表单中，提供了 <code>ngModel</code> 指令来实现该效果，其代码如下所示</p>\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--代码块--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>手机：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">required</span> <span class=\"attr\">appZdy</span>=<span class=\"string\">&quot;133&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;phone&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.phone&quot;</span> #<span class=\"attr\">phone</span>=<span class=\"string\">&quot;ngModel&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;phone.invalid &amp;&amp; (phone.dirty || phone.touched)&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>手机号必填<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;phone.errors.mobile&quot;</span>&gt;</span>&#123;&#123;phone.errors.mobile.msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--代码块--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面的 <code>Html</code> 代码中，<code>input</code> 标签中的 <code>#phone=&quot;ngModel&quot;</code> 代表当前控件赋值给 <code>phone</code> 变量。即在页面中，<code>phone</code> 变量包含这个控件的一切，可以访问该控件的 <code>value</code> 或 <code>status</code>。</p>\n<blockquote>\n<p><strong>dirty 和 touched：</strong>在初始化页面后，开发者一般不希望将错误提示在用户还没有输入时就展示出来，这会降低用户体验，而 <code>dirty</code> 和 <code>touched</code> 可以解决该该问题。改变控件的值时，控件的 <code>dirty</code>（脏）状态发生改变，当控件失去焦点时，会改变控件的 <code>touched</code>（碰过）状态。</p>\n</blockquote>\n<h3 id=\"异步验证\"><a href=\"#异步验证\" class=\"headerlink\" title=\"异步验证\"></a>异步验证</h3><p>在模板驱动表单中，异步验证的验证器是一个自定义指令，验证用户名唯一的功能代码如下所示</p>\n<p>asyc-name.directive.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Directive, forwardRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AsyncValidator, NG_ASYNC_VALIDATORS, AbstractControl, ValidationErrors &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; map, catchError &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/operators&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AsycService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../asyc.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appAsycName]&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">providers</span>:[</span><br><span class=\"line\">    &#123;<span class=\"attr\">provide</span>:NG_ASYNC_VALIDATORS,<span class=\"attr\">useExisting</span>:forwardRef(<span class=\"function\">()=&gt;</span>AsycNameValidator),</span><br><span class=\"line\">    <span class=\"attr\">multi</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsycNameValidator</span> <span class=\"title\">implements</span> <span class=\"title\">AsyncValidator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> asycService:AsycService</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  validate(ctrl:AbstractControl):<span class=\"built_in\">Promise</span>&lt;ValidationErrors | <span class=\"literal\">null</span>&gt; | Observable&lt;ValidationErrors | <span class=\"literal\">null</span>&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.asycService._can_use(ctrl.value).pipe(</span><br><span class=\"line\">      map(<span class=\"function\"><span class=\"params\">xx</span>=&gt;</span>(xx?&#123;<span class=\"attr\">can_use</span>:<span class=\"literal\">false</span>&#125;:<span class=\"literal\">null</span>)),</span><br><span class=\"line\">      catchError(<span class=\"function\">()=&gt;</span><span class=\"literal\">null</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在模板驱动表单中使用该异步验证器</p>\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--代码块--&gt;</span></span><br><span class=\"line\">姓名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.name&quot;</span> [<span class=\"attr\">ngModelOptions</span>]=<span class=\"string\">&quot;&#123; updateOn: &#x27;blur&#x27; &#125;&quot;</span> <span class=\"attr\">appAsycName</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--代码块--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"性能影响\"><a href=\"#性能影响\" class=\"headerlink\" title=\"性能影响\"></a>性能影响</h2><p>在默认情况下，表单的值一旦发生改变，<code>Angular</code> 会执行所有的验证器。对于同步验证器，其对项目没有明显的影响，不过，异步验证一般都会发送 <code>http</code> 请求来对控件进行验证，每次按键时，触发验证，若按键的速度过快，程序会在短时间来发送大量的 <code>http</code> 请求，这会对项目的性能造成明显的影响，降低用户体验，应该避免这种情况出现。</p>\n<p>在异步验证用户名时，在 <code>input</code> 框中，可以将 <code>updateOn</code> 的值从 <code>change</code> 改为 <code>blur</code> 来推迟异步验证的时机，即当控件失去焦点时才进行异步验证。其代码如下所示</p>\n<p><strong>模板驱动表单</strong><br>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.name&quot;</span> <span class=\"attr\">ngModelOptions</span>=<span class=\"string\">&quot;&#123;updateOn:&#x27;blur&#x27;&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>响应式表单</strong></p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> FormControl(<span class=\"string\">&#x27;&#x27;</span>,&#123;<span class=\"attr\">updateOn</span>:<span class=\"string\">&#x27;blur&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"模板驱动表单\"><a href=\"#模板驱动表单\" class=\"headerlink\" title=\"模板驱动表单\"></a>模板驱动表单</h2><p>模板驱动表单专注于简单的场景（也可以应用于大型表单）</p>\n<h3 id=\"ngModel\"><a href=\"#ngModel\" class=\"headerlink\" title=\"[(ngModel)]\"></a>[(ngModel)]</h3><p>在模板驱动表单中，通过 <code>[(ngModel)]</code> 将数据模型和视图相关联起来，其为双向绑定（值可以从模型流到视图，也可以从视图流到模型）。其代码如下所示</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义绑定的变量</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> charter=&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;&#x27;</span>,  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span>,   <span class=\"comment\">//年龄默认 18</span></span><br><span class=\"line\">  <span class=\"attr\">power</span>:<span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\">//超能力</span></span><br><span class=\"line\">  <span class=\"attr\">desc</span>:<span class=\"string\">&#x27;&#x27;</span>   <span class=\"comment\">//描述</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"title\">conCha</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.charter)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....//代码块</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  姓名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.name&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  年龄：&gt;<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.age&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  超能力：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;power&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.power&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  描述：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;desc&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.desc&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;conCha()&quot;</span>&gt;</span>控制台输出信息<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在标签上使用 <code>[(ngModel)]</code> 时，需要在该标签加上 <code>name</code> 属性（其值在页面中唯一），建议 <code>name</code> 属性的值和 <code>[(ngModel)]</code> 绑定的值相同。在响应式表单中可以不用加 <code>name</code> 属性</p>\n</blockquote>\n<p>运行代码（上述 <code>Html</code> 代码已移除样式）后，在页面中改变各个输入框的，然后点击 <code>控制台输出信息</code> 按钮，可以看到，在控制台中输出组件的 <code>charter</code> 值，其值的属性值为页面中对应输入框输入的值。 </p>\n<h3 id=\"ngForm-和-ngNoForm\"><a href=\"#ngForm-和-ngNoForm\" class=\"headerlink\" title=\"ngForm 和 ngNoForm\"></a>ngForm 和 ngNoForm</h3><p><code>ngForm</code> 是一个指令，若开发者导入了 <code>FormsModule</code> 模块，该指令会在该模块下所有的 <code>form</code> 标签上生效（默认添加，<code>ngForm</code> 指令不会被自动添加到响应式表单中）。<code>ngForm</code> 指令创建一个顶级的 <code>FormGroup</code>，并把这个 <code>FormGroup</code> 绑定到一个表单上，以跟踪表单的状态和聚和值。</p>\n<blockquote>\n<p>当开发者不希望 <code>Angular</code> 接管表单时，可以在 <code>form</code> 标签上添加 <code>ngNoForm</code> 指令；当标签为 <code>div</code> 时，希望 <code>div</code> 接管表单，可以在 <code>div</code> 上添加 <code>ngForm</code> 指令</p>\n</blockquote>\n<p>其用法如下所示</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">conNgForm</span>(<span class=\"params\">f</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">cha</span>=<span class=\"string\">&quot;ngForm&quot;</span>&gt;</span><span class=\"comment\">&lt;!-- cha 为ngForm的引用--&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 代码块，绑定姓名年龄等 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;conNgForm(cha)&quot;</span>&gt;</span>输出ngForm<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>运行该代码时，点击页面中的 <code>输出ngForm</code> 按钮，可以在控制台看到 <code>ngForm</code> 指令的值，其结果如下图所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-ngForm.png\" alt=\"ngForm的值\"></p>\n<h3 id=\"FormArry-的替代方案\"><a href=\"#FormArry-的替代方案\" class=\"headerlink\" title=\"FormArry 的替代方案\"></a>FormArry 的替代方案</h3><p>当子控件的数量不确定时，在响应式表单中，其解决方案是由 <code>FormArry</code> 管理来子控件。在模板驱动表单中，其解决方案代码如下所示</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> charter=&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&#x27;&#x27;</span>,  <span class=\"comment\">//姓名</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span>,   <span class=\"comment\">//年龄默认 18</span></span><br><span class=\"line\">  <span class=\"attr\">power</span>:<span class=\"string\">&#x27;&#x27;</span>, <span class=\"comment\">//超能力</span></span><br><span class=\"line\">  <span class=\"attr\">desc</span>:<span class=\"string\">&#x27;&#x27;</span>,  <span class=\"comment\">//描述</span></span><br><span class=\"line\">  <span class=\"attr\">favs</span>:[]   <span class=\"comment\">//爱好（在已有代码中新增的属性）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//添加新 input text 框以输入新爱好</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"title\">addF</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.charter.favs.push(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//防止失去焦点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">indexTracker</span>(<span class=\"params\">index: <span class=\"built_in\">number</span>, value: <span class=\"built_in\">any</span></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//移除当前的爱好</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"title\">removeF</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.charter.favs.splice(i,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">cha</span>=<span class=\"string\">&quot;ngForm&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--代码块，绑定姓名年龄等--&gt;</span></span><br><span class=\"line\">  爱好：</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let item of charter.favs;let i=index;trackBy:indexTracker;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fav&#123;&#123;i&#125;&#125;&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.favs[i]&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;removeF(i)&quot;</span>&gt;</span>移除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--type一定要有--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;addF()&quot;</span>&gt;</span>添加爱好<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>表单的值：&#123;&#123;charter | json&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--代码块--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中运行代码后，其页面效果如下所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-formarray2.png\"></p>\n<blockquote>\n<p><strong>注意1：</strong>在模板驱动表单中，使用上述方法绑定数组时，虽然循环表达式 <code>*ngFor=&quot;let item of charter.favs;let i=index;trackBy:indexTracker;&quot;</code> 中存在item，但其在双向绑定中并没有被使用，在 <code>[(ngModel)]</code> 的双向绑定中使用的是 <code>charter.favs[i]</code> </p>\n</blockquote>\n<blockquote>\n<p><strong>注意2：</strong>在 <code>ngFor</code> 的循环中使用 <code>trackBy</code>，其值 <code>indexTracker</code> 在 <code>Ts</code> 代码中被定义。它的作用是防止表单中绑定数组的 <code>input</code> 框在输入时失去焦点，即在页面中没有 <code>indexTracker</code> 时，表单中的爱好 <code>input</code> 框的值改变时，当前的表单会失去焦点</p>\n</blockquote>\n<blockquote>\n<p><strong>注意3：</strong>在 <code>Html</code> 代码中，按钮 <code>button</code> 需要加上 <code>type</code> 类型，如 <code>button</code>，<code>submit</code>等，若不加上，该按钮会被表单默认为 <code>submit</code> 类型。即当 <code>input</code> 框获取焦点后（不管有没有数据），按键盘上的回车键会触发表单中 <code>submit</code> 提交事件</p>\n</blockquote>\n<h2 id=\"模板表单验证\"><a href=\"#模板表单验证\" class=\"headerlink\" title=\"模板表单验证\"></a>模板表单验证</h2><h3 id=\"Angular-提供的验证器\"><a href=\"#Angular-提供的验证器\" class=\"headerlink\" title=\"Angular 提供的验证器\"></a>Angular 提供的验证器</h3><p>在使用模板驱动表单时，<code>Angular</code> 提供了许多的验证器，其验证器直接在组件 <code>UI</code> 中使用，其代码如下所示</p>\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> #<span class=\"attr\">cha</span>=<span class=\"string\">&quot;ngForm&quot;</span>&gt;</span></span><br><span class=\"line\">姓名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.name&quot;</span> <span class=\"attr\">required</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--代码块，绑定其它的属性--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>表单的状态：&#123;&#123;cha.valid&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当姓名 <code>input</code> 框没有值时时，页面中表单的状态为 <code>false</code>，一旦有值时，表单的状态为 <code>true</code>。</p>\n<blockquote>\n<p>当 <code>input</code> 为 <code>number</code> 类型时，<code>min=&quot;10&quot;</code> 的验证绑定不到表单中，在该框中直接输入一个比 <code>10</code> 小的数，表单的状态不改变</p>\n</blockquote>\n<p>在模板驱动表单中，<code>Angular</code> 能用的验证如下所示</p>\n<blockquote>\n<p><code>required</code>：表示该控件必须要有值，一般用于 <code>input</code> 的 <code>number</code>类型、<code>text</code>类型、<code>select</code>类型等，用法如上所示</p>\n</blockquote>\n<blockquote>\n<p><code>minLength</code>：表示当前输入的字符最小长度，一般用于 <code>input</code> 的 <code>text</code> 类型</p>\n</blockquote>\n<p>用法：<code>&lt;input type=&quot;text&quot; name=&quot;name&quot; [(ngModel)]=&quot;charter.name&quot; minlength=&quot;2&quot;</code>，表示 <code>name</code> 必须不小于两个字符</p>\n<blockquote>\n<p><code>maxLength</code>：表示当前输入的字符最大长度，一般用于 <code>input</code> 的 <code>text</code> 类型</p>\n</blockquote>\n<p>用法：<code>&lt;input type=&quot;text&quot; name=&quot;name&quot; [(ngModel)]=&quot;charter.name&quot; minlength=&quot;10&quot;</code>，表示 <code>name</code> 必须不大于10个字符</p>\n<blockquote>\n<p><code>pattern</code>：验证当前输入是否符合某种正则表达式，一般用于 <code>input</code> 的 <code>text</code> 类型</p>\n</blockquote>\n<p>用法：<code>&lt;input type=&quot;text&quot; name=&quot;power&quot; [(ngModel)]=&quot;charter.power&quot; pattern=&quot;[A-z]*&quot;&gt;</code>，表示当前的 <code>input</code> 输入框的输入必须为英文字母（不管大小写）</p>\n<blockquote>\n<p><code>email</code>：表示当前输入的格式必须符合邮箱的格式，一般用于 <code>input</code> 的 <code>email</code> 类型</p>\n</blockquote>\n<p>用法：<code>&lt;input type=&quot;email&quot; email name=&quot;email&quot; [(ngModel)]=&quot;charter.email&quot;&gt;</code>，表示当前 <code>input</code> 输入框的输入必须为邮箱格式</p>\n<blockquote>\n<p><strong>注意：</strong> 在模板驱动表单中，当 <code>input</code> 为 <code>number</code> 类型时，没有验证其大小的验证器（在响应式表单中为 <code>Validators.min()</code> 和 <code>Validators.max()</code>）</p>\n</blockquote>\n<h3 id=\"自定义验证器\"><a href=\"#自定义验证器\" class=\"headerlink\" title=\"自定义验证器\"></a>自定义验证器</h3><p>在模板驱动表单中，自定义验证器的实质是一个自定义指令，自定义一个其代码如下所示</p>\n<p>指令Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Directive, forwardRef, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NG_VALIDATORS, Validator, AbstractControl &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123; <span class=\"comment\">//装饰器定义指令</span></span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appZdy]&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">providers</span>:[</span><br><span class=\"line\">    &#123;<span class=\"attr\">provide</span>:NG_VALIDATORS,<span class=\"attr\">useExisting</span>:forwardRef(<span class=\"function\">()=&gt;</span>ZdyValidator),</span><br><span class=\"line\">    <span class=\"attr\">multi</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  ] </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZdyValidator</span> <span class=\"title\">implements</span> <span class=\"title\">Validator</span></span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() appZdy:<span class=\"built_in\">string</span>; <span class=\"comment\">//输入</span></span><br><span class=\"line\"></span><br><span class=\"line\">  validate(c:AbstractControl):&#123;[key:<span class=\"built_in\">string</span>]:<span class=\"built_in\">any</span>;&#125;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value:<span class=\"built_in\">string</span>=c.value || <span class=\"string\">&#x27;&#x27;</span>; <span class=\"comment\">//c代表当前控件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(value.startsWith(<span class=\"built_in\">this</span>.appZdy))&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;<span class=\"attr\">mobile</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">msg</span>:<span class=\"string\">`手机号不能为<span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.appZdy&#125;</span>开头`</span>,</span><br><span class=\"line\">        <span class=\"attr\">actualValue</span>:value&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在模板驱动表单中使用自定义验证器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--代码块--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>手机：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">required</span> <span class=\"attr\">appZdy</span>=<span class=\"string\">&quot;133&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;phone&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.phone&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--代码块--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中，运行该代码时，若在手机 <code>input</code> 框输入133为开头的字符串，该控件的状态会为 <code>INVALID</code></p>\n<h3 id=\"验证时错误提示\"><a href=\"#验证时错误提示\" class=\"headerlink\" title=\"验证时错误提示\"></a>验证时错误提示</h3><p>在表单中，若用户输入不符合要求，需要提醒用户其出错在什么地方。在模板驱动表单中，提供了 <code>ngModel</code> 指令来实现该效果，其代码如下所示</p>\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--代码块--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>手机：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">required</span> <span class=\"attr\">appZdy</span>=<span class=\"string\">&quot;133&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;phone&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.phone&quot;</span> #<span class=\"attr\">phone</span>=<span class=\"string\">&quot;ngModel&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;phone.invalid &amp;&amp; (phone.dirty || phone.touched)&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>手机号必填<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;phone.errors.mobile&quot;</span>&gt;</span>&#123;&#123;phone.errors.mobile.msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--代码块--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面的 <code>Html</code> 代码中，<code>input</code> 标签中的 <code>#phone=&quot;ngModel&quot;</code> 代表当前控件赋值给 <code>phone</code> 变量。即在页面中，<code>phone</code> 变量包含这个控件的一切，可以访问该控件的 <code>value</code> 或 <code>status</code>。</p>\n<blockquote>\n<p><strong>dirty 和 touched：</strong>在初始化页面后，开发者一般不希望将错误提示在用户还没有输入时就展示出来，这会降低用户体验，而 <code>dirty</code> 和 <code>touched</code> 可以解决该该问题。改变控件的值时，控件的 <code>dirty</code>（脏）状态发生改变，当控件失去焦点时，会改变控件的 <code>touched</code>（碰过）状态。</p>\n</blockquote>\n<h3 id=\"异步验证\"><a href=\"#异步验证\" class=\"headerlink\" title=\"异步验证\"></a>异步验证</h3><p>在模板驱动表单中，异步验证的验证器是一个自定义指令，验证用户名唯一的功能代码如下所示</p>\n<p>asyc-name.directive.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Directive, forwardRef &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AsyncValidator, NG_ASYNC_VALIDATORS, AbstractControl, ValidationErrors &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; map, catchError &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/operators&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AsycService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../asyc.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Directive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">selector</span>: <span class=\"string\">&#x27;[appAsycName]&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">providers</span>:[</span><br><span class=\"line\">    &#123;<span class=\"attr\">provide</span>:NG_ASYNC_VALIDATORS,<span class=\"attr\">useExisting</span>:forwardRef(<span class=\"function\">()=&gt;</span>AsycNameValidator),</span><br><span class=\"line\">    <span class=\"attr\">multi</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsycNameValidator</span> <span class=\"title\">implements</span> <span class=\"title\">AsyncValidator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> asycService:AsycService</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  validate(ctrl:AbstractControl):<span class=\"built_in\">Promise</span>&lt;ValidationErrors | <span class=\"literal\">null</span>&gt; | Observable&lt;ValidationErrors | <span class=\"literal\">null</span>&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.asycService._can_use(ctrl.value).pipe(</span><br><span class=\"line\">      map(<span class=\"function\"><span class=\"params\">xx</span>=&gt;</span>(xx?&#123;<span class=\"attr\">can_use</span>:<span class=\"literal\">false</span>&#125;:<span class=\"literal\">null</span>)),</span><br><span class=\"line\">      catchError(<span class=\"function\">()=&gt;</span><span class=\"literal\">null</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在模板驱动表单中使用该异步验证器</p>\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--代码块--&gt;</span></span><br><span class=\"line\">姓名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.name&quot;</span> [<span class=\"attr\">ngModelOptions</span>]=<span class=\"string\">&quot;&#123; updateOn: &#x27;blur&#x27; &#125;&quot;</span> <span class=\"attr\">appAsycName</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--代码块--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"性能影响\"><a href=\"#性能影响\" class=\"headerlink\" title=\"性能影响\"></a>性能影响</h2><p>在默认情况下，表单的值一旦发生改变，<code>Angular</code> 会执行所有的验证器。对于同步验证器，其对项目没有明显的影响，不过，异步验证一般都会发送 <code>http</code> 请求来对控件进行验证，每次按键时，触发验证，若按键的速度过快，程序会在短时间来发送大量的 <code>http</code> 请求，这会对项目的性能造成明显的影响，降低用户体验，应该避免这种情况出现。</p>\n<p>在异步验证用户名时，在 <code>input</code> 框中，可以将 <code>updateOn</code> 的值从 <code>change</code> 改为 <code>blur</code> 来推迟异步验证的时机，即当控件失去焦点时才进行异步验证。其代码如下所示</p>\n<p><strong>模板驱动表单</strong><br>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;charter.name&quot;</span> <span class=\"attr\">ngModelOptions</span>=<span class=\"string\">&quot;&#123;updateOn:&#x27;blur&#x27;&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>响应式表单</strong></p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> FormControl(<span class=\"string\">&#x27;&#x27;</span>,&#123;<span class=\"attr\">updateOn</span>:<span class=\"string\">&#x27;blur&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n"},{"title":"Angular学习-8-Rxjs","date":"2019-01-31T16:00:00.000Z","description":"RxJS（响应式扩展的 JavaScript 版）是一个使用可观察对象进行响应式编程的库，它让组合异步代码和基于回调的代码变得更简单。","_content":"## 什么是Rxjs\n`Rxjs` 是 `javascript` 的响应式扩展。其功能是利用响应式编程的模式来实现 `javascript` 的异步编程\n\n`Rxjs` 相关的对象如下所示\n\n> * `Observable`（可观察对象）：表示一种概念，其支持发布在与订阅者之间传递信息\n> * `observer`（观察者）：回调函数的集合，用于处理可观察对象提供的值\n> * `Subscription`（订阅）：代表可观察对象的执行，一般用于取消订阅\n> * `Subject`（主题）：继承 `Observable` 类，是特殊的 `Observable` 对象\n> * `opterator`（操作符）：采用函数式编程风格的纯函数\n\n## Observable（可观察对象）\n`Observable` 是 `Rxjs` 的核心概念之一，它是一个可以被观察的对象，其状态改变时，会将其改变推送给观察它的对象（观察者）\n### Observables\n可观察对象支持在应用中发布者和订阅者之间传递信息，进行事件处理、异步编程和处理多个值，其有很大的优势。\n\n`Observable` 是声明式，即当有观察者订阅它之后，它才会同步或异步的返回 0 或多个值，其代码如下所示\n\n```typescript\nimport { Observable } from 'rxjs';\n....//代码块\n\nvar observable=Observable.create((observer)=>{\n  setInterval(()=>{\n     observer.next('aaa');\n  },1000)\n})\n```\n\n上面实例创建的一个可观察对象，当它被观察者订阅后，它会向观察者秒发送一次 `aaa`\n\n### Observer（观察者）\n`observer`（观察者）用于接收可观察对象通知的处理器。该对象定义了一些回调函数来处理可观察对象可能发来的三种通知\n\n| 通知类型 | 说明   |  \n| --------   | -----  | \n| next | 必选。 用来处理可观察对象发送的值| \n| error  |  可选。用来处理错误通知   | \n| complete |可选。用来处理执行完毕通知   |\n\n定义一个观察者如下所示\n```typescript\nbb={\n  next:x=>console.log('x的值：'+x), //必写\n  error:err=>console.log('当前错误：'+err), //可写，可不写\n  complete:()=>console.log('完成')  //可写，可不写\n}\n```\n上面定义了一个观察者，当观察者订阅对象后，每次观察者会将接收的值在控制台输出，其代码如下所示\n```typescript\nimport { Observable } from 'rxjs';\n....//代码块\n\nvar observable=Observable.create((observer)=>{\n  setInterval(()=>{\n     observer.next('aaa');\n  },1000)\n})\n\nconst bb={\n  next:x=>console.log('x的值：'+x), //必写\n  error:err=>console.log('当前错误：'+err), //可写，可不写\n  complete:()=>console.log('完成')  //可写，可不写\n}\n\nobservable.subscribe(dd); //观察者 dd 订阅 observable\n```\n\n在浏览器控制台的输出如下图所示\n\n![](https://bingolil.github.io/images/angular-rxjs-observer.png)\n\n### Subscription（订阅）\n`Subscription` 的作用一般用来取消订阅，取消订阅的时间节点根据需求设置，其代码如下所示\n```typescript\nimport { of, Subscription } from 'rxjs';\n....//代码块\n\noob:Subscription;\n....//代码块\n\nconst bb=of(1,2,3); //rxjs 静态方法创建可观察对象\n\nconst dd={ //观察者\n next:x=>console.log('输出的值：'+x),\n error:err=>console.log('当前错误：'+err),\n complete:()=>console.log('完成'),\n}\n\nthis.oob=bb.subscribe(dd); //订阅\n....//代码块\n\nthis.oob.unsubscribe(); //取消订阅\n```\n\n### 创建 Observable\n`Opterator` 提供了多种操作符来创建 `Observable` 对象，具体如下所示\n\n>**of**：处理数据，字符串或数字\n\n具体例子如下所示\n```typescript\nimport { of } from 'rxjs';\n....//代码块\n\nconst bb=of(1,2,3); //可观察对象\n\nbb.subscribe((xx)=>{\n  console.log(xx);\n})\n// 输出  1,2,3\n```\n\n>**from**：处理数据，将数组一个一个的发送\n\n具体例子如下所示\n```typescript\nimport { from } from 'rxjs';\n....//代码块\n\nconst bb=from([1,2,3]);; //可观察对象\n\nbb.subscribe((xx)=>{\n  console.log(xx);\n})\n// 输出  1,2,3\n```\n\n>**fromEvent**：处理事件\n\n具体例子如下所示\n```typescript\nimport { fromEvent } from 'rxjs';\n....//代码块\n\nconst node=document.querySelector('input[type=text]');\n\nconst input$=fromEvent(node,'input');\n\ninput$.subscribe((xx)=>{\n  console.log(xx);\n})\n//输出 input 事件\n```\n\n>**empty**：返回一个空的 `Observable` 对象，若订阅该对象，它会马上返回 `complete` 信息\n\n具体例子如下所示\n```typescript\nimport { empty } from 'rxjs';\n....//代码块\n\nconst cc=empty();\ncc.subscribe({\n  next:xx=>console.log(xx),\n  error:err=>console.log(err),\n  complete:()=>console.log(\"执行完成\")\n})\n//输出  执行完成\n```\n\n>**nerver**：返回一个无穷的 `Observable`，订阅它后，什么都不会发生\n\n具体例子如下所示\n```typescript\nimport { never } from 'rxjs';\n....//代码块\n\nconst dd=never();\ndd.subscribe(xx=>{\n  console.log(xx);\n})\n//无输出\n```\n\n>**throwError**：抛出一个错误的 `Observable`\n\n具体例子如下所示\n```typescript\nimport { throwError } from 'rxjs';\n....//代码块\n\nconst ee=throwError('xx')\nee.subscribe({\n  next:xx=>console.log(xx),\n  error:err=>console.log(\"错误为：\"+err),\n  complete:()=>console.log(\"执行完成\")\n})\n//输出  错误为：xx\n```\n\n>**interval**：接收一个数值为参数，该数值代表时间间隔。每到一定时间，其会推送一个递增的数字，从 0 开始\n\n具体例子如下所示\n```typescript\nimport { interval } from 'rxjs';\n....//代码块\n\nconst ff=interval(1000);\nff.subscribe(xx=>{\n  console.log(xx);\n})\n// 输出  0,1,2,3,4,5......\n```\n\n>**timer**：接收两个参数，第一个参数代表第一次推送需要的时间，第二个参数代表推送第一次推送后，推送其它值的间隔时间\n\n具体例子如下所示\n```typescript\nimport { timer } from 'rxjs';\n....//代码块\n\nconst hh=timer(1000,2000);\nhh.subscribe(xx=>{\n  console.log(xx);\n})\n// 输出  1（第一秒推送）,2（第三秒推送）,3（第五秒推送）....\n```\n\n\n## Subject\n### Subject 和 Observable\n`Subject` 是一种特殊的 `Observable`（可观察对象），它既是 `Observable` 对象，又是 `Observer` 对象；它允许将值多播给多个订阅者，而普通的 `Observable` 是单播的（每个已订阅的观察者都拥有 `Observable` 的独立执行）。\n\n`Subject` 是观察者模式的实现，它继承了 `Obsevalbe`。当有观察者订阅它时，它将订阅者添加到观察者列表中，它每次接收到新值时，它会遍历观察者列表，调用其 `next` 方法，将值推送出去。`Subject` 用法如下\n```typescript\nimport { Subject } from 'rxjs';\n....//代码块\n\n_oob=new Subject<any>();\n....//代码块\n\nthis._oob.subscribe((xx)=>{\n  console.log('observerA订阅到的值为：'+xx);\n})\nthis._oob.subscribe((xx)=>{\n  console.log('observerB订阅到的值为：'+xx);\n})\n\nthis._oob.next(1);\nthis._oob.next(2);\n```\n\n上述代码在浏览控制台中输出如下图所示\n![](https://bingolil.github.io/images/angular-rxjs-subject.png)\n\n### BehaviorSubject \n有时我们希望 `Subject` 能保存当前的最新状态，而不是单纯的对象推送，即每新增加一个观察者，当前 `Subuject` 能够立即向新增加的观察者推送最新的值，而不是没有响应。具体代码如下所示\n```typescript\nimport { Subject } from 'rxjs';\n....//代码块\n\n_oob=new Subject<any>();\n....//代码块\n\nthis._oob.subscribe((xx)=>{\n  console.log('observerA订阅到的值为：'+xx);\n})\n\nthis._oob.next(1);//发送值\nthis._oob.next(2);//发送值\n\nsetTimeout(()=>{\n  this._oob.subscribe((xx)=>{\n    console.log('observerB订阅到的值为：'+xx);\n  })\n},1000)\n```\n\n在浏览器控制台输出结果如下图所示\n\n![](https://bingolil.github.io/images/angular-rxjs-be1.png)\n\n从上图中，可以看到 `observerB` 没有订阅到数据，因为 `obseverB` 订阅 `_oob` 后，`_oob` 没有再调用 `next` 推送数据。很多时候我们希望 `Subject` 能保存当前的最新状态，当新增订阅者时，该订阅者可以获取当前 `Subject` 的最新状态。完成该功能，需要使用 `BehaviorSubject` 对象，其代码如下所示\n```typescript\nimport { BehaviorSubject } from 'rxjs';\n....//代码块\n\n_oob=new BehaviorSubject<any>(0); //设定初始值\n....//代码块\n\nthis._oob.subscribe((xx)=>{\n  console.log('observerA订阅到的值为：'+xx);\n})\n\nthis._oob.next(1);//发送值\nthis._oob.next(2);//发送值\n\nsetTimeout(()=>{\n  this._oob.subscribe((xx)=>{\n    console.log('observerB订阅到的值为：'+xx);\n  })\n},1000)\n```\n\n浏览器控制台中输出如下图所示\n\n![](https://bingolil.github.io/images/angular-rxjs-be2.png)\n\n从上图中可以看到，`observerB` 获取到了 `_obb` 对象的最新状态，并且最开始时，`Subject` 对象推送了一个 `0`\n\n> **注意：**因为新增订阅者需要获取到当前 `Subject` 最新的状态，所以在实例化 `BehaviorSubject` 需要一个初始状态\n\n### ReplaySubject\n有时我们希望 `Subject` 新增订阅者后，能向新增的订阅者发送 `Subjcet` 的最新的几次状态，实现该功能，需要使用到 `ReplaySubject` 对象，其代码如下所示\n```typescript\nimport { ReplaySubject } from 'rxjs';\n....//代码块\n\n_ss=new ReplaySubject<any>(2); //2 代表的是发送最新的几次状态\n....//代码块\n\nthis._ss.subscribe((xx)=>{\n  console.log(\"observerX订阅到的值为：\"+xx)\n})\n\nthis._ss.next(1);\nthis._ss.next(2);\nthis._ss.next(3);\n\nsetTimeout(()=>{\n  this._ss.subscribe((xx)=>{\n    console.log('observerY订阅到的值为：'+xx);\n  })\n},1000)\n```\n\n浏览器控制台中的输出如下图所示\n\n![](https://bingolil.github.io/images/angular-rxjs-rey.png)\n\n从上图中，可以看到 `_ss` 向1秒后新增加的订阅者发送了两次最新的状态\n\n> **`BehaviorSubject(1)` 和 `ReplaySubject(1)` 的区别：**可能有人认为 `BehaviorSubject(1)` 等同于 `ReplaySubject(1)`，其实它们是不一样的，有很大的区别，创建 `BehaviorSubject` 对象时，其参数是对象的初始值，用于表示对象的初始状态；而 `ReplaySubject` 是事件的回放，其参数代表回放的次数\n\n## Opterator\n`Rxjs` 提供了大量的操作符来进行数据处理，常见的操作符如下所示\n\n>**map**：从内部的 `Observable` 获取者，操作完成后返回给父级流对象\n\n```typescript\nimport { of } from 'rxjs';\nimport { map } from 'rxjs/operators'\n....//代码块\n\nconst aa=of(1,2,3);\naa.pipe(map(x=>{return x*x})).subscribe((xx)=>{\n  console.log(xx);\n}) //输出为 1，4，9\n```\n\n>**debounceTime**：主要用于防抖操作，减少订阅次数\n\n```typescript\nimport { of } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators'\n....//代码块\n\nconst aa=of(1,2,3);\naa.pipe(debounceTime(1000)).subscribe((xx)=>{\n  console.log(xx);\n}) //1秒后输出  3\n```\n\n>**filter**：用于过滤数据\n\n```typescript\nimport { of } from 'rxjs';\nimport { filter } from 'rxjs/operators'\n....//代码块\n\nconst aa=of(1,2,3,4);\naa.pipe(filter(xx=>xx%2==0)).subscribe((xx)=>{\n  console.log(xx);\n}) //输出  2，4\n```\n\n>**reduce**\n\n```typescript\nimport { of } from 'rxjs';\nimport { reduce } from 'rxjs/operators'\n....//代码块\n\nconst aa=of(1,2,3);\naa.pipe(reduce(x,y)=>{return x+y})).subscribe((xx)=>{\n  console.log(xx);\n}) //输出  6\n```","source":"_posts/angular/learn-8.md","raw":"title:  Angular学习-8-Rxjs\ncategories: Angular\ndate: 2019-02-01\ntags: [Angular,Rxjs]\ndescription: RxJS（响应式扩展的 JavaScript 版）是一个使用可观察对象进行响应式编程的库，它让组合异步代码和基于回调的代码变得更简单。\n---\n## 什么是Rxjs\n`Rxjs` 是 `javascript` 的响应式扩展。其功能是利用响应式编程的模式来实现 `javascript` 的异步编程\n\n`Rxjs` 相关的对象如下所示\n\n> * `Observable`（可观察对象）：表示一种概念，其支持发布在与订阅者之间传递信息\n> * `observer`（观察者）：回调函数的集合，用于处理可观察对象提供的值\n> * `Subscription`（订阅）：代表可观察对象的执行，一般用于取消订阅\n> * `Subject`（主题）：继承 `Observable` 类，是特殊的 `Observable` 对象\n> * `opterator`（操作符）：采用函数式编程风格的纯函数\n\n## Observable（可观察对象）\n`Observable` 是 `Rxjs` 的核心概念之一，它是一个可以被观察的对象，其状态改变时，会将其改变推送给观察它的对象（观察者）\n### Observables\n可观察对象支持在应用中发布者和订阅者之间传递信息，进行事件处理、异步编程和处理多个值，其有很大的优势。\n\n`Observable` 是声明式，即当有观察者订阅它之后，它才会同步或异步的返回 0 或多个值，其代码如下所示\n\n```typescript\nimport { Observable } from 'rxjs';\n....//代码块\n\nvar observable=Observable.create((observer)=>{\n  setInterval(()=>{\n     observer.next('aaa');\n  },1000)\n})\n```\n\n上面实例创建的一个可观察对象，当它被观察者订阅后，它会向观察者秒发送一次 `aaa`\n\n### Observer（观察者）\n`observer`（观察者）用于接收可观察对象通知的处理器。该对象定义了一些回调函数来处理可观察对象可能发来的三种通知\n\n| 通知类型 | 说明   |  \n| --------   | -----  | \n| next | 必选。 用来处理可观察对象发送的值| \n| error  |  可选。用来处理错误通知   | \n| complete |可选。用来处理执行完毕通知   |\n\n定义一个观察者如下所示\n```typescript\nbb={\n  next:x=>console.log('x的值：'+x), //必写\n  error:err=>console.log('当前错误：'+err), //可写，可不写\n  complete:()=>console.log('完成')  //可写，可不写\n}\n```\n上面定义了一个观察者，当观察者订阅对象后，每次观察者会将接收的值在控制台输出，其代码如下所示\n```typescript\nimport { Observable } from 'rxjs';\n....//代码块\n\nvar observable=Observable.create((observer)=>{\n  setInterval(()=>{\n     observer.next('aaa');\n  },1000)\n})\n\nconst bb={\n  next:x=>console.log('x的值：'+x), //必写\n  error:err=>console.log('当前错误：'+err), //可写，可不写\n  complete:()=>console.log('完成')  //可写，可不写\n}\n\nobservable.subscribe(dd); //观察者 dd 订阅 observable\n```\n\n在浏览器控制台的输出如下图所示\n\n![](https://bingolil.github.io/images/angular-rxjs-observer.png)\n\n### Subscription（订阅）\n`Subscription` 的作用一般用来取消订阅，取消订阅的时间节点根据需求设置，其代码如下所示\n```typescript\nimport { of, Subscription } from 'rxjs';\n....//代码块\n\noob:Subscription;\n....//代码块\n\nconst bb=of(1,2,3); //rxjs 静态方法创建可观察对象\n\nconst dd={ //观察者\n next:x=>console.log('输出的值：'+x),\n error:err=>console.log('当前错误：'+err),\n complete:()=>console.log('完成'),\n}\n\nthis.oob=bb.subscribe(dd); //订阅\n....//代码块\n\nthis.oob.unsubscribe(); //取消订阅\n```\n\n### 创建 Observable\n`Opterator` 提供了多种操作符来创建 `Observable` 对象，具体如下所示\n\n>**of**：处理数据，字符串或数字\n\n具体例子如下所示\n```typescript\nimport { of } from 'rxjs';\n....//代码块\n\nconst bb=of(1,2,3); //可观察对象\n\nbb.subscribe((xx)=>{\n  console.log(xx);\n})\n// 输出  1,2,3\n```\n\n>**from**：处理数据，将数组一个一个的发送\n\n具体例子如下所示\n```typescript\nimport { from } from 'rxjs';\n....//代码块\n\nconst bb=from([1,2,3]);; //可观察对象\n\nbb.subscribe((xx)=>{\n  console.log(xx);\n})\n// 输出  1,2,3\n```\n\n>**fromEvent**：处理事件\n\n具体例子如下所示\n```typescript\nimport { fromEvent } from 'rxjs';\n....//代码块\n\nconst node=document.querySelector('input[type=text]');\n\nconst input$=fromEvent(node,'input');\n\ninput$.subscribe((xx)=>{\n  console.log(xx);\n})\n//输出 input 事件\n```\n\n>**empty**：返回一个空的 `Observable` 对象，若订阅该对象，它会马上返回 `complete` 信息\n\n具体例子如下所示\n```typescript\nimport { empty } from 'rxjs';\n....//代码块\n\nconst cc=empty();\ncc.subscribe({\n  next:xx=>console.log(xx),\n  error:err=>console.log(err),\n  complete:()=>console.log(\"执行完成\")\n})\n//输出  执行完成\n```\n\n>**nerver**：返回一个无穷的 `Observable`，订阅它后，什么都不会发生\n\n具体例子如下所示\n```typescript\nimport { never } from 'rxjs';\n....//代码块\n\nconst dd=never();\ndd.subscribe(xx=>{\n  console.log(xx);\n})\n//无输出\n```\n\n>**throwError**：抛出一个错误的 `Observable`\n\n具体例子如下所示\n```typescript\nimport { throwError } from 'rxjs';\n....//代码块\n\nconst ee=throwError('xx')\nee.subscribe({\n  next:xx=>console.log(xx),\n  error:err=>console.log(\"错误为：\"+err),\n  complete:()=>console.log(\"执行完成\")\n})\n//输出  错误为：xx\n```\n\n>**interval**：接收一个数值为参数，该数值代表时间间隔。每到一定时间，其会推送一个递增的数字，从 0 开始\n\n具体例子如下所示\n```typescript\nimport { interval } from 'rxjs';\n....//代码块\n\nconst ff=interval(1000);\nff.subscribe(xx=>{\n  console.log(xx);\n})\n// 输出  0,1,2,3,4,5......\n```\n\n>**timer**：接收两个参数，第一个参数代表第一次推送需要的时间，第二个参数代表推送第一次推送后，推送其它值的间隔时间\n\n具体例子如下所示\n```typescript\nimport { timer } from 'rxjs';\n....//代码块\n\nconst hh=timer(1000,2000);\nhh.subscribe(xx=>{\n  console.log(xx);\n})\n// 输出  1（第一秒推送）,2（第三秒推送）,3（第五秒推送）....\n```\n\n\n## Subject\n### Subject 和 Observable\n`Subject` 是一种特殊的 `Observable`（可观察对象），它既是 `Observable` 对象，又是 `Observer` 对象；它允许将值多播给多个订阅者，而普通的 `Observable` 是单播的（每个已订阅的观察者都拥有 `Observable` 的独立执行）。\n\n`Subject` 是观察者模式的实现，它继承了 `Obsevalbe`。当有观察者订阅它时，它将订阅者添加到观察者列表中，它每次接收到新值时，它会遍历观察者列表，调用其 `next` 方法，将值推送出去。`Subject` 用法如下\n```typescript\nimport { Subject } from 'rxjs';\n....//代码块\n\n_oob=new Subject<any>();\n....//代码块\n\nthis._oob.subscribe((xx)=>{\n  console.log('observerA订阅到的值为：'+xx);\n})\nthis._oob.subscribe((xx)=>{\n  console.log('observerB订阅到的值为：'+xx);\n})\n\nthis._oob.next(1);\nthis._oob.next(2);\n```\n\n上述代码在浏览控制台中输出如下图所示\n![](https://bingolil.github.io/images/angular-rxjs-subject.png)\n\n### BehaviorSubject \n有时我们希望 `Subject` 能保存当前的最新状态，而不是单纯的对象推送，即每新增加一个观察者，当前 `Subuject` 能够立即向新增加的观察者推送最新的值，而不是没有响应。具体代码如下所示\n```typescript\nimport { Subject } from 'rxjs';\n....//代码块\n\n_oob=new Subject<any>();\n....//代码块\n\nthis._oob.subscribe((xx)=>{\n  console.log('observerA订阅到的值为：'+xx);\n})\n\nthis._oob.next(1);//发送值\nthis._oob.next(2);//发送值\n\nsetTimeout(()=>{\n  this._oob.subscribe((xx)=>{\n    console.log('observerB订阅到的值为：'+xx);\n  })\n},1000)\n```\n\n在浏览器控制台输出结果如下图所示\n\n![](https://bingolil.github.io/images/angular-rxjs-be1.png)\n\n从上图中，可以看到 `observerB` 没有订阅到数据，因为 `obseverB` 订阅 `_oob` 后，`_oob` 没有再调用 `next` 推送数据。很多时候我们希望 `Subject` 能保存当前的最新状态，当新增订阅者时，该订阅者可以获取当前 `Subject` 的最新状态。完成该功能，需要使用 `BehaviorSubject` 对象，其代码如下所示\n```typescript\nimport { BehaviorSubject } from 'rxjs';\n....//代码块\n\n_oob=new BehaviorSubject<any>(0); //设定初始值\n....//代码块\n\nthis._oob.subscribe((xx)=>{\n  console.log('observerA订阅到的值为：'+xx);\n})\n\nthis._oob.next(1);//发送值\nthis._oob.next(2);//发送值\n\nsetTimeout(()=>{\n  this._oob.subscribe((xx)=>{\n    console.log('observerB订阅到的值为：'+xx);\n  })\n},1000)\n```\n\n浏览器控制台中输出如下图所示\n\n![](https://bingolil.github.io/images/angular-rxjs-be2.png)\n\n从上图中可以看到，`observerB` 获取到了 `_obb` 对象的最新状态，并且最开始时，`Subject` 对象推送了一个 `0`\n\n> **注意：**因为新增订阅者需要获取到当前 `Subject` 最新的状态，所以在实例化 `BehaviorSubject` 需要一个初始状态\n\n### ReplaySubject\n有时我们希望 `Subject` 新增订阅者后，能向新增的订阅者发送 `Subjcet` 的最新的几次状态，实现该功能，需要使用到 `ReplaySubject` 对象，其代码如下所示\n```typescript\nimport { ReplaySubject } from 'rxjs';\n....//代码块\n\n_ss=new ReplaySubject<any>(2); //2 代表的是发送最新的几次状态\n....//代码块\n\nthis._ss.subscribe((xx)=>{\n  console.log(\"observerX订阅到的值为：\"+xx)\n})\n\nthis._ss.next(1);\nthis._ss.next(2);\nthis._ss.next(3);\n\nsetTimeout(()=>{\n  this._ss.subscribe((xx)=>{\n    console.log('observerY订阅到的值为：'+xx);\n  })\n},1000)\n```\n\n浏览器控制台中的输出如下图所示\n\n![](https://bingolil.github.io/images/angular-rxjs-rey.png)\n\n从上图中，可以看到 `_ss` 向1秒后新增加的订阅者发送了两次最新的状态\n\n> **`BehaviorSubject(1)` 和 `ReplaySubject(1)` 的区别：**可能有人认为 `BehaviorSubject(1)` 等同于 `ReplaySubject(1)`，其实它们是不一样的，有很大的区别，创建 `BehaviorSubject` 对象时，其参数是对象的初始值，用于表示对象的初始状态；而 `ReplaySubject` 是事件的回放，其参数代表回放的次数\n\n## Opterator\n`Rxjs` 提供了大量的操作符来进行数据处理，常见的操作符如下所示\n\n>**map**：从内部的 `Observable` 获取者，操作完成后返回给父级流对象\n\n```typescript\nimport { of } from 'rxjs';\nimport { map } from 'rxjs/operators'\n....//代码块\n\nconst aa=of(1,2,3);\naa.pipe(map(x=>{return x*x})).subscribe((xx)=>{\n  console.log(xx);\n}) //输出为 1，4，9\n```\n\n>**debounceTime**：主要用于防抖操作，减少订阅次数\n\n```typescript\nimport { of } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators'\n....//代码块\n\nconst aa=of(1,2,3);\naa.pipe(debounceTime(1000)).subscribe((xx)=>{\n  console.log(xx);\n}) //1秒后输出  3\n```\n\n>**filter**：用于过滤数据\n\n```typescript\nimport { of } from 'rxjs';\nimport { filter } from 'rxjs/operators'\n....//代码块\n\nconst aa=of(1,2,3,4);\naa.pipe(filter(xx=>xx%2==0)).subscribe((xx)=>{\n  console.log(xx);\n}) //输出  2，4\n```\n\n>**reduce**\n\n```typescript\nimport { of } from 'rxjs';\nimport { reduce } from 'rxjs/operators'\n....//代码块\n\nconst aa=of(1,2,3);\naa.pipe(reduce(x,y)=>{return x+y})).subscribe((xx)=>{\n  console.log(xx);\n}) //输出  6\n```","slug":"angular/learn-8","published":1,"updated":"2021-11-24T02:58:34.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwe931jy0007ycszc36mhevf","content":"<h2 id=\"什么是Rxjs\"><a href=\"#什么是Rxjs\" class=\"headerlink\" title=\"什么是Rxjs\"></a>什么是Rxjs</h2><p><code>Rxjs</code> 是 <code>javascript</code> 的响应式扩展。其功能是利用响应式编程的模式来实现 <code>javascript</code> 的异步编程</p>\n<p><code>Rxjs</code> 相关的对象如下所示</p>\n<blockquote>\n<ul>\n<li><code>Observable</code>（可观察对象）：表示一种概念，其支持发布在与订阅者之间传递信息</li>\n<li><code>observer</code>（观察者）：回调函数的集合，用于处理可观察对象提供的值</li>\n<li><code>Subscription</code>（订阅）：代表可观察对象的执行，一般用于取消订阅</li>\n<li><code>Subject</code>（主题）：继承 <code>Observable</code> 类，是特殊的 <code>Observable</code> 对象</li>\n<li><code>opterator</code>（操作符）：采用函数式编程风格的纯函数</li>\n</ul>\n</blockquote>\n<h2 id=\"Observable（可观察对象）\"><a href=\"#Observable（可观察对象）\" class=\"headerlink\" title=\"Observable（可观察对象）\"></a>Observable（可观察对象）</h2><p><code>Observable</code> 是 <code>Rxjs</code> 的核心概念之一，它是一个可以被观察的对象，其状态改变时，会将其改变推送给观察它的对象（观察者）</p>\n<h3 id=\"Observables\"><a href=\"#Observables\" class=\"headerlink\" title=\"Observables\"></a>Observables</h3><p>可观察对象支持在应用中发布者和订阅者之间传递信息，进行事件处理、异步编程和处理多个值，其有很大的优势。</p>\n<p><code>Observable</code> 是声明式，即当有观察者订阅它之后，它才会同步或异步的返回 0 或多个值，其代码如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> observable=Observable.create(<span class=\"function\">(<span class=\"params\">observer</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setInterval</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">     observer.next(<span class=\"string\">&#x27;aaa&#x27;</span>);</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上面实例创建的一个可观察对象，当它被观察者订阅后，它会向观察者秒发送一次 <code>aaa</code></p>\n<h3 id=\"Observer（观察者）\"><a href=\"#Observer（观察者）\" class=\"headerlink\" title=\"Observer（观察者）\"></a>Observer（观察者）</h3><p><code>observer</code>（观察者）用于接收可观察对象通知的处理器。该对象定义了一些回调函数来处理可观察对象可能发来的三种通知</p>\n<table>\n<thead>\n<tr>\n<th>通知类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>next</td>\n<td>必选。 用来处理可观察对象发送的值</td>\n</tr>\n<tr>\n<td>error</td>\n<td>可选。用来处理错误通知</td>\n</tr>\n<tr>\n<td>complete</td>\n<td>可选。用来处理执行完毕通知</td>\n</tr>\n</tbody></table>\n<p>定义一个观察者如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bb=&#123;</span><br><span class=\"line\">  <span class=\"attr\">next</span>:<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;x的值：&#x27;</span>+x), <span class=\"comment\">//必写</span></span><br><span class=\"line\">  <span class=\"attr\">error</span>:<span class=\"function\"><span class=\"params\">err</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;当前错误：&#x27;</span>+err), <span class=\"comment\">//可写，可不写</span></span><br><span class=\"line\">  <span class=\"attr\">complete</span>:<span class=\"function\">()=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;完成&#x27;</span>)  <span class=\"comment\">//可写，可不写</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面定义了一个观察者，当观察者订阅对象后，每次观察者会将接收的值在控制台输出，其代码如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> observable=Observable.create(<span class=\"function\">(<span class=\"params\">observer</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setInterval</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">     observer.next(<span class=\"string\">&#x27;aaa&#x27;</span>);</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bb=&#123;</span><br><span class=\"line\">  <span class=\"attr\">next</span>:<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;x的值：&#x27;</span>+x), <span class=\"comment\">//必写</span></span><br><span class=\"line\">  <span class=\"attr\">error</span>:<span class=\"function\"><span class=\"params\">err</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;当前错误：&#x27;</span>+err), <span class=\"comment\">//可写，可不写</span></span><br><span class=\"line\">  <span class=\"attr\">complete</span>:<span class=\"function\">()=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;完成&#x27;</span>)  <span class=\"comment\">//可写，可不写</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">observable.subscribe(dd); <span class=\"comment\">//观察者 dd 订阅 observable</span></span><br></pre></td></tr></table></figure>\n\n<p>在浏览器控制台的输出如下图所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-rxjs-observer.png\"></p>\n<h3 id=\"Subscription（订阅）\"><a href=\"#Subscription（订阅）\" class=\"headerlink\" title=\"Subscription（订阅）\"></a>Subscription（订阅）</h3><p><code>Subscription</code> 的作用一般用来取消订阅，取消订阅的时间节点根据需求设置，其代码如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">of</span>, Subscription &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">oob</span>:Subscription;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bb=<span class=\"keyword\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>); <span class=\"comment\">//rxjs 静态方法创建可观察对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dd=&#123; <span class=\"comment\">//观察者</span></span><br><span class=\"line\"> <span class=\"attr\">next</span>:<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;输出的值：&#x27;</span>+x),</span><br><span class=\"line\"> <span class=\"attr\">error</span>:<span class=\"function\"><span class=\"params\">err</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;当前错误：&#x27;</span>+err),</span><br><span class=\"line\"> <span class=\"attr\">complete</span>:<span class=\"function\">()=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;完成&#x27;</span>),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.oob=bb.subscribe(dd); <span class=\"comment\">//订阅</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.oob.unsubscribe(); <span class=\"comment\">//取消订阅</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-Observable\"><a href=\"#创建-Observable\" class=\"headerlink\" title=\"创建 Observable\"></a>创建 Observable</h3><p><code>Opterator</code> 提供了多种操作符来创建 <code>Observable</code> 对象，具体如下所示</p>\n<blockquote>\n<p><strong>of</strong>：处理数据，字符串或数字</p>\n</blockquote>\n<p>具体例子如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">of</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bb=<span class=\"keyword\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>); <span class=\"comment\">//可观察对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">bb.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 输出  1,2,3</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>from</strong>：处理数据，将数组一个一个的发送</p>\n</blockquote>\n<p>具体例子如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">from</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bb=<span class=\"keyword\">from</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);; <span class=\"comment\">//可观察对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">bb.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 输出  1,2,3</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>fromEvent</strong>：处理事件</p>\n</blockquote>\n<p>具体例子如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; fromEvent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> node=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;input[type=text]&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> input$=fromEvent(node,<span class=\"string\">&#x27;input&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">input$.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//输出 input 事件</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>empty</strong>：返回一个空的 <code>Observable</code> 对象，若订阅该对象，它会马上返回 <code>complete</code> 信息</p>\n</blockquote>\n<p>具体例子如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; empty &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc=empty();</span><br><span class=\"line\">cc.subscribe(&#123;</span><br><span class=\"line\">  <span class=\"attr\">next</span>:<span class=\"function\"><span class=\"params\">xx</span>=&gt;</span><span class=\"built_in\">console</span>.log(xx),</span><br><span class=\"line\">  <span class=\"attr\">error</span>:<span class=\"function\"><span class=\"params\">err</span>=&gt;</span><span class=\"built_in\">console</span>.log(err),</span><br><span class=\"line\">  <span class=\"attr\">complete</span>:<span class=\"function\">()=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;执行完成&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//输出  执行完成</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>nerver</strong>：返回一个无穷的 <code>Observable</code>，订阅它后，什么都不会发生</p>\n</blockquote>\n<p>具体例子如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"built_in\">never</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dd=<span class=\"built_in\">never</span>();</span><br><span class=\"line\">dd.subscribe(<span class=\"function\"><span class=\"params\">xx</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//无输出</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>throwError</strong>：抛出一个错误的 <code>Observable</code></p>\n</blockquote>\n<p>具体例子如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; throwError &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ee=throwError(<span class=\"string\">&#x27;xx&#x27;</span>)</span><br><span class=\"line\">ee.subscribe(&#123;</span><br><span class=\"line\">  <span class=\"attr\">next</span>:<span class=\"function\"><span class=\"params\">xx</span>=&gt;</span><span class=\"built_in\">console</span>.log(xx),</span><br><span class=\"line\">  <span class=\"attr\">error</span>:<span class=\"function\"><span class=\"params\">err</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;错误为：&quot;</span>+err),</span><br><span class=\"line\">  <span class=\"attr\">complete</span>:<span class=\"function\">()=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;执行完成&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//输出  错误为：xx</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>interval</strong>：接收一个数值为参数，该数值代表时间间隔。每到一定时间，其会推送一个递增的数字，从 0 开始</p>\n</blockquote>\n<p>具体例子如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; interval &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ff=interval(<span class=\"number\">1000</span>);</span><br><span class=\"line\">ff.subscribe(<span class=\"function\"><span class=\"params\">xx</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 输出  0,1,2,3,4,5......</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>timer</strong>：接收两个参数，第一个参数代表第一次推送需要的时间，第二个参数代表推送第一次推送后，推送其它值的间隔时间</p>\n</blockquote>\n<p>具体例子如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; timer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hh=timer(<span class=\"number\">1000</span>,<span class=\"number\">2000</span>);</span><br><span class=\"line\">hh.subscribe(<span class=\"function\"><span class=\"params\">xx</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 输出  1（第一秒推送）,2（第三秒推送）,3（第五秒推送）....</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Subject\"><a href=\"#Subject\" class=\"headerlink\" title=\"Subject\"></a>Subject</h2><h3 id=\"Subject-和-Observable\"><a href=\"#Subject-和-Observable\" class=\"headerlink\" title=\"Subject 和 Observable\"></a>Subject 和 Observable</h3><p><code>Subject</code> 是一种特殊的 <code>Observable</code>（可观察对象），它既是 <code>Observable</code> 对象，又是 <code>Observer</code> 对象；它允许将值多播给多个订阅者，而普通的 <code>Observable</code> 是单播的（每个已订阅的观察者都拥有 <code>Observable</code> 的独立执行）。</p>\n<p><code>Subject</code> 是观察者模式的实现，它继承了 <code>Obsevalbe</code>。当有观察者订阅它时，它将订阅者添加到观察者列表中，它每次接收到新值时，它会遍历观察者列表，调用其 <code>next</code> 方法，将值推送出去。<code>Subject</code> 用法如下</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Subject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">_oob=<span class=\"keyword\">new</span> Subject&lt;<span class=\"built_in\">any</span>&gt;();</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;observerA订阅到的值为：&#x27;</span>+xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;observerB订阅到的值为：&#x27;</span>+xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.next(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.next(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上述代码在浏览控制台中输出如下图所示<br><img src=\"https://bingolil.github.io/images/angular-rxjs-subject.png\"></p>\n<h3 id=\"BehaviorSubject\"><a href=\"#BehaviorSubject\" class=\"headerlink\" title=\"BehaviorSubject\"></a>BehaviorSubject</h3><p>有时我们希望 <code>Subject</code> 能保存当前的最新状态，而不是单纯的对象推送，即每新增加一个观察者，当前 <code>Subuject</code> 能够立即向新增加的观察者推送最新的值，而不是没有响应。具体代码如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Subject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">_oob=<span class=\"keyword\">new</span> Subject&lt;<span class=\"built_in\">any</span>&gt;();</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;observerA订阅到的值为：&#x27;</span>+xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.next(<span class=\"number\">1</span>);<span class=\"comment\">//发送值</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.next(<span class=\"number\">2</span>);<span class=\"comment\">//发送值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>._oob.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;observerB订阅到的值为：&#x27;</span>+xx);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器控制台输出结果如下图所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-rxjs-be1.png\"></p>\n<p>从上图中，可以看到 <code>observerB</code> 没有订阅到数据，因为 <code>obseverB</code> 订阅 <code>_oob</code> 后，<code>_oob</code> 没有再调用 <code>next</code> 推送数据。很多时候我们希望 <code>Subject</code> 能保存当前的最新状态，当新增订阅者时，该订阅者可以获取当前 <code>Subject</code> 的最新状态。完成该功能，需要使用 <code>BehaviorSubject</code> 对象，其代码如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BehaviorSubject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">_oob=<span class=\"keyword\">new</span> BehaviorSubject&lt;<span class=\"built_in\">any</span>&gt;(<span class=\"number\">0</span>); <span class=\"comment\">//设定初始值</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;observerA订阅到的值为：&#x27;</span>+xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.next(<span class=\"number\">1</span>);<span class=\"comment\">//发送值</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.next(<span class=\"number\">2</span>);<span class=\"comment\">//发送值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>._oob.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;observerB订阅到的值为：&#x27;</span>+xx);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>浏览器控制台中输出如下图所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-rxjs-be2.png\"></p>\n<p>从上图中可以看到，<code>observerB</code> 获取到了 <code>_obb</code> 对象的最新状态，并且最开始时，<code>Subject</code> 对象推送了一个 <code>0</code></p>\n<blockquote>\n<p><strong>注意：</strong>因为新增订阅者需要获取到当前 <code>Subject</code> 最新的状态，所以在实例化 <code>BehaviorSubject</code> 需要一个初始状态</p>\n</blockquote>\n<h3 id=\"ReplaySubject\"><a href=\"#ReplaySubject\" class=\"headerlink\" title=\"ReplaySubject\"></a>ReplaySubject</h3><p>有时我们希望 <code>Subject</code> 新增订阅者后，能向新增的订阅者发送 <code>Subjcet</code> 的最新的几次状态，实现该功能，需要使用到 <code>ReplaySubject</code> 对象，其代码如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ReplaySubject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">_ss=<span class=\"keyword\">new</span> ReplaySubject&lt;<span class=\"built_in\">any</span>&gt;(<span class=\"number\">2</span>); <span class=\"comment\">//2 代表的是发送最新的几次状态</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>._ss.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;observerX订阅到的值为：&quot;</span>+xx)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>._ss.next(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">this</span>._ss.next(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">this</span>._ss.next(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>._ss.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;observerY订阅到的值为：&#x27;</span>+xx);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>浏览器控制台中的输出如下图所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-rxjs-rey.png\"></p>\n<p>从上图中，可以看到 <code>_ss</code> 向1秒后新增加的订阅者发送了两次最新的状态</p>\n<blockquote>\n<p><strong><code>BehaviorSubject(1)</code> 和 <code>ReplaySubject(1)</code> 的区别：</strong>可能有人认为 <code>BehaviorSubject(1)</code> 等同于 <code>ReplaySubject(1)</code>，其实它们是不一样的，有很大的区别，创建 <code>BehaviorSubject</code> 对象时，其参数是对象的初始值，用于表示对象的初始状态；而 <code>ReplaySubject</code> 是事件的回放，其参数代表回放的次数</p>\n</blockquote>\n<h2 id=\"Opterator\"><a href=\"#Opterator\" class=\"headerlink\" title=\"Opterator\"></a>Opterator</h2><p><code>Rxjs</code> 提供了大量的操作符来进行数据处理，常见的操作符如下所示</p>\n<blockquote>\n<p><strong>map</strong>：从内部的 <code>Observable</code> 获取者，操作完成后返回给父级流对象</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">of</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; map &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/operators&#x27;</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> aa=<span class=\"keyword\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">aa.pipe(map(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span>&#123;<span class=\"keyword\">return</span> x*x&#125;)).subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;) <span class=\"comment\">//输出为 1，4，9</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>debounceTime</strong>：主要用于防抖操作，减少订阅次数</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">of</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; debounceTime &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/operators&#x27;</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> aa=<span class=\"keyword\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">aa.pipe(debounceTime(<span class=\"number\">1000</span>)).subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;) <span class=\"comment\">//1秒后输出  3</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>filter</strong>：用于过滤数据</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">of</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; filter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/operators&#x27;</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> aa=<span class=\"keyword\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">aa.pipe(filter(<span class=\"function\"><span class=\"params\">xx</span>=&gt;</span>xx%<span class=\"number\">2</span>==<span class=\"number\">0</span>)).subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;) <span class=\"comment\">//输出  2，4</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>reduce</strong></p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">of</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; reduce &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/operators&#x27;</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> aa=<span class=\"keyword\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">aa.pipe(reduce(x,y)=&gt;&#123;<span class=\"keyword\">return</span> x+y&#125;)).subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;) <span class=\"comment\">//输出  6</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是Rxjs\"><a href=\"#什么是Rxjs\" class=\"headerlink\" title=\"什么是Rxjs\"></a>什么是Rxjs</h2><p><code>Rxjs</code> 是 <code>javascript</code> 的响应式扩展。其功能是利用响应式编程的模式来实现 <code>javascript</code> 的异步编程</p>\n<p><code>Rxjs</code> 相关的对象如下所示</p>\n<blockquote>\n<ul>\n<li><code>Observable</code>（可观察对象）：表示一种概念，其支持发布在与订阅者之间传递信息</li>\n<li><code>observer</code>（观察者）：回调函数的集合，用于处理可观察对象提供的值</li>\n<li><code>Subscription</code>（订阅）：代表可观察对象的执行，一般用于取消订阅</li>\n<li><code>Subject</code>（主题）：继承 <code>Observable</code> 类，是特殊的 <code>Observable</code> 对象</li>\n<li><code>opterator</code>（操作符）：采用函数式编程风格的纯函数</li>\n</ul>\n</blockquote>\n<h2 id=\"Observable（可观察对象）\"><a href=\"#Observable（可观察对象）\" class=\"headerlink\" title=\"Observable（可观察对象）\"></a>Observable（可观察对象）</h2><p><code>Observable</code> 是 <code>Rxjs</code> 的核心概念之一，它是一个可以被观察的对象，其状态改变时，会将其改变推送给观察它的对象（观察者）</p>\n<h3 id=\"Observables\"><a href=\"#Observables\" class=\"headerlink\" title=\"Observables\"></a>Observables</h3><p>可观察对象支持在应用中发布者和订阅者之间传递信息，进行事件处理、异步编程和处理多个值，其有很大的优势。</p>\n<p><code>Observable</code> 是声明式，即当有观察者订阅它之后，它才会同步或异步的返回 0 或多个值，其代码如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> observable=Observable.create(<span class=\"function\">(<span class=\"params\">observer</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setInterval</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">     observer.next(<span class=\"string\">&#x27;aaa&#x27;</span>);</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上面实例创建的一个可观察对象，当它被观察者订阅后，它会向观察者秒发送一次 <code>aaa</code></p>\n<h3 id=\"Observer（观察者）\"><a href=\"#Observer（观察者）\" class=\"headerlink\" title=\"Observer（观察者）\"></a>Observer（观察者）</h3><p><code>observer</code>（观察者）用于接收可观察对象通知的处理器。该对象定义了一些回调函数来处理可观察对象可能发来的三种通知</p>\n<table>\n<thead>\n<tr>\n<th>通知类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>next</td>\n<td>必选。 用来处理可观察对象发送的值</td>\n</tr>\n<tr>\n<td>error</td>\n<td>可选。用来处理错误通知</td>\n</tr>\n<tr>\n<td>complete</td>\n<td>可选。用来处理执行完毕通知</td>\n</tr>\n</tbody></table>\n<p>定义一个观察者如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bb=&#123;</span><br><span class=\"line\">  <span class=\"attr\">next</span>:<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;x的值：&#x27;</span>+x), <span class=\"comment\">//必写</span></span><br><span class=\"line\">  <span class=\"attr\">error</span>:<span class=\"function\"><span class=\"params\">err</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;当前错误：&#x27;</span>+err), <span class=\"comment\">//可写，可不写</span></span><br><span class=\"line\">  <span class=\"attr\">complete</span>:<span class=\"function\">()=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;完成&#x27;</span>)  <span class=\"comment\">//可写，可不写</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面定义了一个观察者，当观察者订阅对象后，每次观察者会将接收的值在控制台输出，其代码如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> observable=Observable.create(<span class=\"function\">(<span class=\"params\">observer</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setInterval</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">     observer.next(<span class=\"string\">&#x27;aaa&#x27;</span>);</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bb=&#123;</span><br><span class=\"line\">  <span class=\"attr\">next</span>:<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;x的值：&#x27;</span>+x), <span class=\"comment\">//必写</span></span><br><span class=\"line\">  <span class=\"attr\">error</span>:<span class=\"function\"><span class=\"params\">err</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;当前错误：&#x27;</span>+err), <span class=\"comment\">//可写，可不写</span></span><br><span class=\"line\">  <span class=\"attr\">complete</span>:<span class=\"function\">()=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;完成&#x27;</span>)  <span class=\"comment\">//可写，可不写</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">observable.subscribe(dd); <span class=\"comment\">//观察者 dd 订阅 observable</span></span><br></pre></td></tr></table></figure>\n\n<p>在浏览器控制台的输出如下图所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-rxjs-observer.png\"></p>\n<h3 id=\"Subscription（订阅）\"><a href=\"#Subscription（订阅）\" class=\"headerlink\" title=\"Subscription（订阅）\"></a>Subscription（订阅）</h3><p><code>Subscription</code> 的作用一般用来取消订阅，取消订阅的时间节点根据需求设置，其代码如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">of</span>, Subscription &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">oob</span>:Subscription;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bb=<span class=\"keyword\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>); <span class=\"comment\">//rxjs 静态方法创建可观察对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dd=&#123; <span class=\"comment\">//观察者</span></span><br><span class=\"line\"> <span class=\"attr\">next</span>:<span class=\"function\"><span class=\"params\">x</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;输出的值：&#x27;</span>+x),</span><br><span class=\"line\"> <span class=\"attr\">error</span>:<span class=\"function\"><span class=\"params\">err</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;当前错误：&#x27;</span>+err),</span><br><span class=\"line\"> <span class=\"attr\">complete</span>:<span class=\"function\">()=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;完成&#x27;</span>),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.oob=bb.subscribe(dd); <span class=\"comment\">//订阅</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.oob.unsubscribe(); <span class=\"comment\">//取消订阅</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-Observable\"><a href=\"#创建-Observable\" class=\"headerlink\" title=\"创建 Observable\"></a>创建 Observable</h3><p><code>Opterator</code> 提供了多种操作符来创建 <code>Observable</code> 对象，具体如下所示</p>\n<blockquote>\n<p><strong>of</strong>：处理数据，字符串或数字</p>\n</blockquote>\n<p>具体例子如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">of</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bb=<span class=\"keyword\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>); <span class=\"comment\">//可观察对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">bb.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 输出  1,2,3</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>from</strong>：处理数据，将数组一个一个的发送</p>\n</blockquote>\n<p>具体例子如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">from</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bb=<span class=\"keyword\">from</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);; <span class=\"comment\">//可观察对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">bb.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 输出  1,2,3</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>fromEvent</strong>：处理事件</p>\n</blockquote>\n<p>具体例子如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; fromEvent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> node=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;input[type=text]&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> input$=fromEvent(node,<span class=\"string\">&#x27;input&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">input$.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//输出 input 事件</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>empty</strong>：返回一个空的 <code>Observable</code> 对象，若订阅该对象，它会马上返回 <code>complete</code> 信息</p>\n</blockquote>\n<p>具体例子如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; empty &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc=empty();</span><br><span class=\"line\">cc.subscribe(&#123;</span><br><span class=\"line\">  <span class=\"attr\">next</span>:<span class=\"function\"><span class=\"params\">xx</span>=&gt;</span><span class=\"built_in\">console</span>.log(xx),</span><br><span class=\"line\">  <span class=\"attr\">error</span>:<span class=\"function\"><span class=\"params\">err</span>=&gt;</span><span class=\"built_in\">console</span>.log(err),</span><br><span class=\"line\">  <span class=\"attr\">complete</span>:<span class=\"function\">()=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;执行完成&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//输出  执行完成</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>nerver</strong>：返回一个无穷的 <code>Observable</code>，订阅它后，什么都不会发生</p>\n</blockquote>\n<p>具体例子如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"built_in\">never</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dd=<span class=\"built_in\">never</span>();</span><br><span class=\"line\">dd.subscribe(<span class=\"function\"><span class=\"params\">xx</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//无输出</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>throwError</strong>：抛出一个错误的 <code>Observable</code></p>\n</blockquote>\n<p>具体例子如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; throwError &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ee=throwError(<span class=\"string\">&#x27;xx&#x27;</span>)</span><br><span class=\"line\">ee.subscribe(&#123;</span><br><span class=\"line\">  <span class=\"attr\">next</span>:<span class=\"function\"><span class=\"params\">xx</span>=&gt;</span><span class=\"built_in\">console</span>.log(xx),</span><br><span class=\"line\">  <span class=\"attr\">error</span>:<span class=\"function\"><span class=\"params\">err</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;错误为：&quot;</span>+err),</span><br><span class=\"line\">  <span class=\"attr\">complete</span>:<span class=\"function\">()=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;执行完成&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//输出  错误为：xx</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>interval</strong>：接收一个数值为参数，该数值代表时间间隔。每到一定时间，其会推送一个递增的数字，从 0 开始</p>\n</blockquote>\n<p>具体例子如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; interval &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ff=interval(<span class=\"number\">1000</span>);</span><br><span class=\"line\">ff.subscribe(<span class=\"function\"><span class=\"params\">xx</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 输出  0,1,2,3,4,5......</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>timer</strong>：接收两个参数，第一个参数代表第一次推送需要的时间，第二个参数代表推送第一次推送后，推送其它值的间隔时间</p>\n</blockquote>\n<p>具体例子如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; timer &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hh=timer(<span class=\"number\">1000</span>,<span class=\"number\">2000</span>);</span><br><span class=\"line\">hh.subscribe(<span class=\"function\"><span class=\"params\">xx</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 输出  1（第一秒推送）,2（第三秒推送）,3（第五秒推送）....</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Subject\"><a href=\"#Subject\" class=\"headerlink\" title=\"Subject\"></a>Subject</h2><h3 id=\"Subject-和-Observable\"><a href=\"#Subject-和-Observable\" class=\"headerlink\" title=\"Subject 和 Observable\"></a>Subject 和 Observable</h3><p><code>Subject</code> 是一种特殊的 <code>Observable</code>（可观察对象），它既是 <code>Observable</code> 对象，又是 <code>Observer</code> 对象；它允许将值多播给多个订阅者，而普通的 <code>Observable</code> 是单播的（每个已订阅的观察者都拥有 <code>Observable</code> 的独立执行）。</p>\n<p><code>Subject</code> 是观察者模式的实现，它继承了 <code>Obsevalbe</code>。当有观察者订阅它时，它将订阅者添加到观察者列表中，它每次接收到新值时，它会遍历观察者列表，调用其 <code>next</code> 方法，将值推送出去。<code>Subject</code> 用法如下</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Subject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">_oob=<span class=\"keyword\">new</span> Subject&lt;<span class=\"built_in\">any</span>&gt;();</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;observerA订阅到的值为：&#x27;</span>+xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;observerB订阅到的值为：&#x27;</span>+xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.next(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.next(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p>上述代码在浏览控制台中输出如下图所示<br><img src=\"https://bingolil.github.io/images/angular-rxjs-subject.png\"></p>\n<h3 id=\"BehaviorSubject\"><a href=\"#BehaviorSubject\" class=\"headerlink\" title=\"BehaviorSubject\"></a>BehaviorSubject</h3><p>有时我们希望 <code>Subject</code> 能保存当前的最新状态，而不是单纯的对象推送，即每新增加一个观察者，当前 <code>Subuject</code> 能够立即向新增加的观察者推送最新的值，而不是没有响应。具体代码如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Subject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">_oob=<span class=\"keyword\">new</span> Subject&lt;<span class=\"built_in\">any</span>&gt;();</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;observerA订阅到的值为：&#x27;</span>+xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.next(<span class=\"number\">1</span>);<span class=\"comment\">//发送值</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.next(<span class=\"number\">2</span>);<span class=\"comment\">//发送值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>._oob.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;observerB订阅到的值为：&#x27;</span>+xx);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器控制台输出结果如下图所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-rxjs-be1.png\"></p>\n<p>从上图中，可以看到 <code>observerB</code> 没有订阅到数据，因为 <code>obseverB</code> 订阅 <code>_oob</code> 后，<code>_oob</code> 没有再调用 <code>next</code> 推送数据。很多时候我们希望 <code>Subject</code> 能保存当前的最新状态，当新增订阅者时，该订阅者可以获取当前 <code>Subject</code> 的最新状态。完成该功能，需要使用 <code>BehaviorSubject</code> 对象，其代码如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BehaviorSubject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">_oob=<span class=\"keyword\">new</span> BehaviorSubject&lt;<span class=\"built_in\">any</span>&gt;(<span class=\"number\">0</span>); <span class=\"comment\">//设定初始值</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;observerA订阅到的值为：&#x27;</span>+xx);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.next(<span class=\"number\">1</span>);<span class=\"comment\">//发送值</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>._oob.next(<span class=\"number\">2</span>);<span class=\"comment\">//发送值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>._oob.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;observerB订阅到的值为：&#x27;</span>+xx);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>浏览器控制台中输出如下图所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-rxjs-be2.png\"></p>\n<p>从上图中可以看到，<code>observerB</code> 获取到了 <code>_obb</code> 对象的最新状态，并且最开始时，<code>Subject</code> 对象推送了一个 <code>0</code></p>\n<blockquote>\n<p><strong>注意：</strong>因为新增订阅者需要获取到当前 <code>Subject</code> 最新的状态，所以在实例化 <code>BehaviorSubject</code> 需要一个初始状态</p>\n</blockquote>\n<h3 id=\"ReplaySubject\"><a href=\"#ReplaySubject\" class=\"headerlink\" title=\"ReplaySubject\"></a>ReplaySubject</h3><p>有时我们希望 <code>Subject</code> 新增订阅者后，能向新增的订阅者发送 <code>Subjcet</code> 的最新的几次状态，实现该功能，需要使用到 <code>ReplaySubject</code> 对象，其代码如下所示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ReplaySubject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">_ss=<span class=\"keyword\">new</span> ReplaySubject&lt;<span class=\"built_in\">any</span>&gt;(<span class=\"number\">2</span>); <span class=\"comment\">//2 代表的是发送最新的几次状态</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>._ss.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;observerX订阅到的值为：&quot;</span>+xx)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>._ss.next(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">this</span>._ss.next(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">this</span>._ss.next(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>._ss.subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;observerY订阅到的值为：&#x27;</span>+xx);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>浏览器控制台中的输出如下图所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-rxjs-rey.png\"></p>\n<p>从上图中，可以看到 <code>_ss</code> 向1秒后新增加的订阅者发送了两次最新的状态</p>\n<blockquote>\n<p><strong><code>BehaviorSubject(1)</code> 和 <code>ReplaySubject(1)</code> 的区别：</strong>可能有人认为 <code>BehaviorSubject(1)</code> 等同于 <code>ReplaySubject(1)</code>，其实它们是不一样的，有很大的区别，创建 <code>BehaviorSubject</code> 对象时，其参数是对象的初始值，用于表示对象的初始状态；而 <code>ReplaySubject</code> 是事件的回放，其参数代表回放的次数</p>\n</blockquote>\n<h2 id=\"Opterator\"><a href=\"#Opterator\" class=\"headerlink\" title=\"Opterator\"></a>Opterator</h2><p><code>Rxjs</code> 提供了大量的操作符来进行数据处理，常见的操作符如下所示</p>\n<blockquote>\n<p><strong>map</strong>：从内部的 <code>Observable</code> 获取者，操作完成后返回给父级流对象</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">of</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; map &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/operators&#x27;</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> aa=<span class=\"keyword\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">aa.pipe(map(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span>&#123;<span class=\"keyword\">return</span> x*x&#125;)).subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;) <span class=\"comment\">//输出为 1，4，9</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>debounceTime</strong>：主要用于防抖操作，减少订阅次数</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">of</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; debounceTime &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/operators&#x27;</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> aa=<span class=\"keyword\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">aa.pipe(debounceTime(<span class=\"number\">1000</span>)).subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;) <span class=\"comment\">//1秒后输出  3</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>filter</strong>：用于过滤数据</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">of</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; filter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/operators&#x27;</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> aa=<span class=\"keyword\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">aa.pipe(filter(<span class=\"function\"><span class=\"params\">xx</span>=&gt;</span>xx%<span class=\"number\">2</span>==<span class=\"number\">0</span>)).subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;) <span class=\"comment\">//输出  2，4</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>reduce</strong></p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">of</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; reduce &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/operators&#x27;</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> aa=<span class=\"keyword\">of</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">aa.pipe(reduce(x,y)=&gt;&#123;<span class=\"keyword\">return</span> x+y&#125;)).subscribe(<span class=\"function\">(<span class=\"params\">xx</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(xx);</span><br><span class=\"line\">&#125;) <span class=\"comment\">//输出  6</span></span><br></pre></td></tr></table></figure>"},{"title":"Angular学习-3-生命周期钩子","date":"2018-11-22T16:00:00.000Z","description":"当 Angular 实例化组件类并渲染组件视图及其子视图时，组件实例的生命周期就开始了。生命周期一直伴随着变更检测，Angular 会检查数据绑定属性何时发生变化，并按需更新视图和组件实例。当 Angular 销毁组件实例并从 DOM 中移除它渲染的模板时，生命周期就结束了。当 Angular 在执行过程中创建、更新和销毁实例时，指令就有了类似的生命周期。","_content":"在`Angular` 中，每个组件都有一个被 `Angular` 管理的生命周期。\n\n`Angular` 提供了生命周期钩子，把这些关键生命时刻（新建、更新和销毁）暴露出来，赋予开发者在它们发生时采取行动的能力。\n\n除了组件具有生命周期钩子外，指令同样也具有生命周期钩子。\n\n**注意：**指令不能实现带有 `content` 和 `view` 相关的钩子，因为在 `Angular2` 以后，指令不存在UI视图，即和 `content` 以及 `view` 没有关系。\n`Angular` 组件的生命周期钩子如下图所示。\n\n![](https://bingolil.github.io/images/angular-gouzi.png)\n\n如图所示，`Angular` 组件的生命周期钩子执行顺序从图中的1到8，但没有一个组件或指令会实现全部的生命周期钩子。\n其中青色的钩子可能在生命周期中执行多次，紫色的钩子在生命周期中只能执行一次。\n## ngOnChanges\n> 适用于组件和指令\n\n`ngOnChanges` 钩子只有存在输入属性（`@Input`）时才能调用，如果不存在该属性，则不能调用该钩子。`ngOnChanges` 钩子在生命周期中可以被多次调用，但其第一次被调用发生 `ngOnInit` 钩子之前。\n### 触发条件\n一旦检测到该组件(或指令)的**输入属性**（`@Input`）发生了变化，`Angular` 组件就会调用 `ngOnChanges` 钩子 。\n**注意：**若输入属性是一个对象，对象的某个属性的值变化时，不会触发这个钩子，只有该对象引用发生变化时，才会触发这个钩子。\n### 用处\n`ngOnChanges` 钩子在项目中被使用的频率一般。其相当于实现了 `angularjs` 的 `$scope.watch()` 功能。\n### 示例\n1，组件中有且只有1个 `@Input` 输入属性，且不为对象\n\n代码如下所示\nparent.component.html\n```HTML\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"parVar\">\n</div>\n<hr>\n<app-child [comVar]=\"parVar\"></app-child>\n```\n\nchild.component.ts\n```typescript\nimport { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\n\n....//代码块\n                    //使用钩子，需要继承钩子的接口\nexport class ChildComponent implements OnInit,OnChanges {\n  @Input() comVar:string;\n  constructor() { }\n  ngOnInit() {\n    console.log('A')\n  }\n  //ngOnChanges钩子变化的信息存储在SimpleChanges对象里面\n  ngOnChanges(changes: SimpleChanges) {\n    console.log(changes);\n  }\n}\n```\n\n在浏览器中打开本地4200端口地址，按键盘上的 `f12`进入浏览器控制台，可以看见先输出 `SimpleChanges` 对象，该对象有一个 `comVar` 属性，这个`comVar` 属性的值是一个对象，该对象存储了3个属性，即 `comVar` 变量的当前值，前一个值和 `firstChange`（是否第一次改变，`boolean` 类型，`true` 代表第一次改变，`false` 代表不是第一次），然后才输出 `ngOnIint` 钩子中的 `A` 。\n\n当在页面中的 `input框` 输入值的时候，`app-child` 组件的输入值发生了改变，触发了 `ngOnChanges` 钩子，控制台会出 `SimpleChanges` 对象，其属性 `comVar` 的值还是3个，即 `comVar` 的当前值，前一个值和 `firstChange`。\n\n**即 `ngOnChanges` 钩子第一次被调用发生调用 `ngOnInit` 钩子之前，`ngOnChanges` 钩子可能被多次调用**\n\n2，组件中有且只有多个 `@Input` 输入属性，且不为对象\n其代码如下所示\nparent.component.html\n```HTML\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"parVar1\">\n</div>\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"parVar2\">\n</div>\n<hr>\n<app-child [comVar1]=\"parVar1\" [comVar2]=\"parVar2\"></app-child>\n```\n\nchild.component.ts\n```typescript\nimport { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\n\n..../代码块\n\nexport class ChildComponent implements OnInit,OnChanges {\n  @Input() comVar1:string;\n  @Input() comVar2:string;\n  constructor() { }\n  ngOnInit() {\n  }\n  ngOnChanges(changes: SimpleChanges) {\n    console.log(changes);\n  }\n}\n```\n\n在浏览器控制台中，可以看到输出的 `SimpleChanges` 对象，该对象有两个属性，分别是 `comVar1` 和 `comVar2` ，这两个属性的值为对象，分别存放着输入属性 `comVar1` 和 `comVar2` 的当前值，前一个值和 `firstChange`。\n\n**注意：** 在 `input` 改变时，控制台输出的 `SimpleChanges` 对象只有当前绑定的值的属性，不会输出其它绑定绑定值的属性，因为其它绑定值的没有发生变化。\n\n## ngOnInit\n> 适用于组件和指令\n\n`ngOnInit` 钩子在组件中已经被 `Angular` 默认实现了，`ngOnInit` 在 `Angular` 中被使用的次数最多，其在第一次 `ngOnChanges` 之后被调用。\n\n在 `Angular` 中，`ngOnInit` 钩子主要的作用就是：\n1. 在构造函数后马上执行复杂的初始化逻辑；\n2. 在 `Angular` 设置完输入属性之后，对该组件进行准备。\n\n## ngDoCheck\n> 适用于组件和指令\n\n### 变更检测\n变更检测就是 `Angular` 检测视图和数据模型之间绑定的值是否发生了改变，当检测到模型中绑定的值发生改变时，同步到UI视图上。\n>* `Angular` 的变更检测是通过 zone.js 库来实现的，保证组件的变化和UI视图一致\n>* 组件中的任何异步事件都会触发变更检测\n>* 每个组件都有独属于自己的变更检测器，当任何一个变更检测器检测到变化，zone.js 库会根据 `变更检测策略` 来检测组件，以判断组件是否需要更新模板。\n\n### Angular变更检测策略\n\n`Angular` 有两种变更检测策略，分别是 `Default` 策略和 `OnPush` 策略。\n\n>Default策略\n    `Default` 策略是 `Angular` 默认的变更检测策略，该策略会在发生变更时，`zone.js` 会检测所有的组件。\n\n>OnPush策略\n    `Onpush`策略的组件只有输入属性（@Input）发生改变时，才会检测该组件及其子组件。如果所有的组件都采用 `Default` 策略，当某个组件的变更检测器检测到变化，`zone.js` 会检测整个组件树，但它会跳过使用 `OnPush` 策略的组件。\n### ngDoCheck和变更检测\n>触发变更检测机制时会调用 `ngDoCheck` 钩子\n\n### 示例\n在 `ngOnChanges` 钩子中，若 `@Input` 输入属性是一个对象，修改该对象某个属性的值，不会触发 `ngOnChanges` 钩子，但其会触发 `ngDoCheck` 钩子，开发者可以利用这个钩子做开发者需要做的事情。其代码如下所示\npar.component.ts\n```typescript\n....//代码块\n  User={ //定义一个对象\n    par1:null,\n    par2:null\n  }\n```\n\npar.component.html\n```HTML\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"User.parVar1\">\n</div>\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"User.parVar2\">\n</div>\n<hr>\n<app-child [comObj]=\"User\"></app-child>\n```\n\nchild.component.ts\n```typescript\nimport { Component, OnInit, Input, OnChanges, DoCheck } from '@angular/core';\n\n....//代码块\n\nexport class ChildComponent implements OnInit,OnChanges,DoCheck {\n  @Input() comObj:any;\n \n ....//代码块\n \n  ngOnChanges() {\n    console.log('触发了ngOnChanges钩子')\n  }\n  ngDoCheck(){\n    console.log('发生了变更检测');\n  }\n}\n```\n\n在浏览器中打开本地4200端口地址，进入浏览器控制台，可以看到在浏览器中输出了 `触发了ngOnChanges钩子` 和 `发生了变更检测` ，不断改变页面中 `input` 框（两个 `input` ，随便哪一个都可以）的值，可以看到在控制台中，不断的输出 `发生了变更检测` ，但控制台中不会再输出 `触发了ngOnChanges钩子`，因为 `User` 输入对象引用没有发生改变，不会 `ngOnChanges` 钩子。\n\n**注意：** 虽然 `Angular` 暴露了 `ngDoCheck` 钩子，但是由于 `ngDocheck` 钩子调用频繁，所以开发者尽量不要在 `ngDoCheck` 钩子中写入复杂的逻辑，否则会降低 `Angular` 项目的性能，影响用户体验。\n\n## ngAfterContentInit\n> 适用于组件\n\n在 `Angular` 的8个生命周期钩子中，带有 `view` 和 `content` 的4个钩子只适用于组件。其它的4个钩子适用于指令和组件。\n`ngAfterContentInit` 钩子只执行一次，在当把内容投影进组件之后调用这个钩子，在这个钩子里面可以访问被投影进来的组件。\n**注意：** 在组件中，若没有发生组件投影，`ngAfterContentInit`  钩子还是会执行。\n### 意义\n在传统的HTML页面中，标签可以嵌套标签，而在 `Angular` 中，可以把组件看成是标签，一般情况下是不能直接组件嵌套组件。`内容投影shadow` 实现了在 `Angular` 中可以组件嵌套组件。在投影组件时，开发者可能需要在组件投影后马上进行一些操作，可以使用 `ngAfterContentInit` 钩子。\n### 示例\napp.component.html\n```HTML\n<app-shadow-wrap> \n  <app-content-child></app-content-child> //被投影的组件\n</app-shadow-wrap>\n```\n\n在根组件中，页面UI代码如上所示，这时在页面中不会展示和 `app-content-child` 组件有关的UI内容\nshadow-wrap.conponent.html\n```HTML\n<div class=\"container\">\n  <h1>内容投影</h1>\n  <ng-content select=\"app-content-child\"></ng-content> \n</div>\n```\n\n在 `app-shadow-wrap` 组件的UI代码中， `<ng-content select=\"app-content-child\"></ng-content> ` 是占位符，这个占位符存放的就是根组件UI代码中的 `<app-content-child></app-content-child>` 组件，其通过 `<ng-content select=\"app-content-child\"></ng-content> ` 中的 `select` 属性的值来确定这个占位符展示组件投影中的哪一个组件。\n**注意：** `ng-content` 占位符中 `select` 属性还可以为类名，标签名和属性等。在该占位符中不应该有任何内容，若存在内容，也会被投影的组件内容覆盖。\n如下所示：\n```HTML\n<ng-content select=\".blue\"></ng-content>//匹配class名为blue的显示内容 \n<ng-content select=\"header\"></ng-content>//匹配header标签的显示内容 \n<ng-content select=\"[name]=red\"></ng-content>//匹配name属性值为red的显示内容\n```\n\ncontent-child.component.html\n```HTML\n<p>这儿是content-child组件</p>\n```\n\ncontent-child.component.ts\n\n```typescript\n....//代码块\npublic comVar(){\n  console.log(\"A\");\n}\n```\n\n到此，最基本的内容投影完成（关于内容投影，后面会讲解），假如开发者需要在 `shadow-wrap` 组件中访问 `content-child` 组件的值或者方法，可以通过调用 `ngAfterConentInit` 钩子实现。\n\nshadow-wrap.component.ts\n```typescript\nimport { Component, OnInit, ContentChild, AfterContentInit } from '@angular/core';\nimport { ContentChildComponent } from '../content-child/content-child.component';\n\n....//代码块\nexport class ShadowWrapComponent implements OnInit,AfterContentInit {\n  \n  @ContentChild(ContentChildComponent) child1:ContentChildComponent;\n\n  ....//代码块\n\n  ngAfterContentInit(){\n    this.child1.comVar();\n  }\n}\n\n```\n\n可以在控制台看到输出了 `A`，即在 `shadow-wrap` 组件中访问了 `content-child` 组件的public值或者方法。\n**注意：**如果组件中没有发生组件投影，那么就不需要实现这个生命周期钩子。\n\n### AfterContent 和 AfterView\n`AfterContent` 钩子和 `AfterView` 相似。关键的不同点是子组件的类型不同。\n\n>`AfterView 钩子`所关心的是 `ViewChildren`，这些子组件的元素标签会出现在该组件的模板里面。\n>`AfterContent 钩子` 所关心的是 `ContentChildren`，这些子组件被 `Angular` 投影进该组件中。\n\n## ngAfterContentChecked\n> 适用于组件\n\n代码结构和 `ngAfterContentInit` 相同，若被投影的组件发生了变更检测，需要在 `shadow-wrap` 组件中访问被投影组件 `content-child` 的公共属性或方法，这时开发者可以使用 `ngAfterContentChecked` 钩子查看被被投影组件的公共方法或属性。\n\n## ngAfterViewInit\n> 适用于组件\n\n在组件和其所有子组件相应的 `视图` 初始化之后执行 `ngAfterViewInit` 钩子，只执行一次。\n**注意：** 在执行 `ngAfterViewInit` 钩子时，说明组件的 `视图` 已经组装完毕，开发者不能在该钩子中修改和 `组件UI视图` 有关的属性。虽然在UI视图中显示修改成功，但浏览器控制台会报错。\n### 错误示例1-修改组件属性\n view-init.component.ts\n \n```typescript\n....//代码块\n  look:string='jackyy';\n  ngAfterViewInit(){\n    this.look='loook at';\n  }\n```\n\nview-init.component.html\n```HTML\n<div>{{look}}</div>\n```\n\n其控制台台报错如下图所示\n\n![](https://bingolil.github.io/images/angular-ngVInitError.png)\n\n**结论：** 在一个变更检测周期中禁止一个视图被组装好之后再去更新视图。\n\n在带有 `view` 的生命周期钩子（`ngAfterViewInit` 和 `ngAfterViewChecked`）中，禁止更新视图。在上面的 `示例` 中，若属性 `look` 没有出现在 `组件UI视图` 中，即修改 `look` 属性，不会更新 `组件UI视图`，那么浏览器控制台不会报错。\n \n## ngAfterViewChecked\n> 适用于组件\n\n在 `Angular` 检查完组件中的绑定后调用 `ngAfterViewChecked` 钩子，在该钩子中，和 `ngAfterViewInit` 钩子一样，禁止开发者更新视图。\n\n**注意：** 当父组和子组件都有该钩子时，子组件的该钩子先于父组件的该钩子执行。\n\n每次执行该钩子，组件的 `UI视图` 更新完一次，可以在这个钩子中实时获取组件中某个 `DOM` 元素的信息，比如其在页面中的位置，高度或宽度等。\n## ngOnDestory\n> 适用于组件和指令\n\n在 `ngOnDestory` 钩子中，代表组件或指令的生命周期来到了销毁之前，在该钩子中，开发者一般都是解绑事件或者取消订阅，或者清除定时器。\n> **解绑事件：** 比如开发者在某个组件中使用了 `jquery` 绑定了一个点击页面 `body` 事件，路由进入到其它页面中时，不需要这个点击事件，但由于 `Angular` 路由切换机制，会保留这个点击事件，这就需要在组件中的 `ngOnDestory` 钩子里面解除绑定的点击事件，即该组件被销毁后，不会存在点击 `body` 事件。清除定时器的思路和解绑事件的思路一样。\n\n> **取消订阅：** 在 `Angular` 项目中，组件间的通讯有一部分是 `订阅对象` 完成，为了提升用户体验和项目性能，需要取消订阅。\n\n取消订阅代码如下所示：\n\n```typescript\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router'\nimport { Subscription } from 'rxjs';\n\n....//代码块\n  \n  subscription:Subscription\n  constructor(private routeInfo: ActivatedRoute, private){}\n  ngOnInit(){                         //订阅路由参数\n    this.subscription = this.routeInfo.queryParams.subscribe((data)=>{\n      ....//代码块\n    })\n  }\n  ngOnDestroy() { //取消订阅\n    this.subscription.unsubscribe();\n  }\n\n```\n\n## 生命周期钩子总结\n### 初始化阶段\n在组件的生命周期中，组件的初始化由一个构造函数3个生命周期钩子完成\n> `构造函数`：初始化对象\n> `ngOnChanges`：初始化组件输入属性 (@Input)\n> `ngOnInit`：初始化除了输入属性外的所有属性\n> `ngDoCheck`：做一次变更检查\n\n### 渲染阶段\n组件初始化完成后，开始渲染UI视图，首先渲染的就是被投影进来的内容，如果被投影的内容渲染完毕后，会调用 `ngAfterContentInit` 钩子和 `ngAfterContentChecked` 钩子，被投影的内容渲染完毕后，开始渲染组件的内容，当组件内容也渲染完毕后，会调用 `ngAfterViewInit` 钩子和 `ngAfterViewChecked`钩子。\n\n至此，组件的渲染完毕，组件进入存活阶段，即与用户的交互阶段。\n\n### 存活阶段\n在组件的存活阶段，由于用户和组件发生了交互，该阶段主要由4个生命周期钩子完成。\n\n> `ngOnChanges`：发生交互，组件的输入属性改变，会触发该钩子。\n> `ngDoCheck`：数据每发生一个变化，会触发一次变更检测，会调用一次该钩子。\n> `ngAfterContentChecked`：被投影的内容每发生一次变更检测，会调用一次该钩子。\n> `ngAfterViewChecked`：每发生一次视图更新，会调用一次该钩子。\n\n### 销毁阶段\n组件进入销毁阶段，就只有一个钩子 `ngOnDestory` 被调用，在该钩子中，一般都是销毁一些引用的资源，比如取消订阅，清除定时器，解除绑定事件等。","source":"_posts/angular/learn-3.md","raw":"title: Angular学习-3-生命周期钩子\ncategories: Angular\ndate: 2018-11-23\ntags: [Angular,Angular生命周期钩子]\ndescription: 当 Angular 实例化组件类并渲染组件视图及其子视图时，组件实例的生命周期就开始了。生命周期一直伴随着变更检测，Angular 会检查数据绑定属性何时发生变化，并按需更新视图和组件实例。当 Angular 销毁组件实例并从 DOM 中移除它渲染的模板时，生命周期就结束了。当 Angular 在执行过程中创建、更新和销毁实例时，指令就有了类似的生命周期。\n---\n在`Angular` 中，每个组件都有一个被 `Angular` 管理的生命周期。\n\n`Angular` 提供了生命周期钩子，把这些关键生命时刻（新建、更新和销毁）暴露出来，赋予开发者在它们发生时采取行动的能力。\n\n除了组件具有生命周期钩子外，指令同样也具有生命周期钩子。\n\n**注意：**指令不能实现带有 `content` 和 `view` 相关的钩子，因为在 `Angular2` 以后，指令不存在UI视图，即和 `content` 以及 `view` 没有关系。\n`Angular` 组件的生命周期钩子如下图所示。\n\n![](https://bingolil.github.io/images/angular-gouzi.png)\n\n如图所示，`Angular` 组件的生命周期钩子执行顺序从图中的1到8，但没有一个组件或指令会实现全部的生命周期钩子。\n其中青色的钩子可能在生命周期中执行多次，紫色的钩子在生命周期中只能执行一次。\n## ngOnChanges\n> 适用于组件和指令\n\n`ngOnChanges` 钩子只有存在输入属性（`@Input`）时才能调用，如果不存在该属性，则不能调用该钩子。`ngOnChanges` 钩子在生命周期中可以被多次调用，但其第一次被调用发生 `ngOnInit` 钩子之前。\n### 触发条件\n一旦检测到该组件(或指令)的**输入属性**（`@Input`）发生了变化，`Angular` 组件就会调用 `ngOnChanges` 钩子 。\n**注意：**若输入属性是一个对象，对象的某个属性的值变化时，不会触发这个钩子，只有该对象引用发生变化时，才会触发这个钩子。\n### 用处\n`ngOnChanges` 钩子在项目中被使用的频率一般。其相当于实现了 `angularjs` 的 `$scope.watch()` 功能。\n### 示例\n1，组件中有且只有1个 `@Input` 输入属性，且不为对象\n\n代码如下所示\nparent.component.html\n```HTML\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"parVar\">\n</div>\n<hr>\n<app-child [comVar]=\"parVar\"></app-child>\n```\n\nchild.component.ts\n```typescript\nimport { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\n\n....//代码块\n                    //使用钩子，需要继承钩子的接口\nexport class ChildComponent implements OnInit,OnChanges {\n  @Input() comVar:string;\n  constructor() { }\n  ngOnInit() {\n    console.log('A')\n  }\n  //ngOnChanges钩子变化的信息存储在SimpleChanges对象里面\n  ngOnChanges(changes: SimpleChanges) {\n    console.log(changes);\n  }\n}\n```\n\n在浏览器中打开本地4200端口地址，按键盘上的 `f12`进入浏览器控制台，可以看见先输出 `SimpleChanges` 对象，该对象有一个 `comVar` 属性，这个`comVar` 属性的值是一个对象，该对象存储了3个属性，即 `comVar` 变量的当前值，前一个值和 `firstChange`（是否第一次改变，`boolean` 类型，`true` 代表第一次改变，`false` 代表不是第一次），然后才输出 `ngOnIint` 钩子中的 `A` 。\n\n当在页面中的 `input框` 输入值的时候，`app-child` 组件的输入值发生了改变，触发了 `ngOnChanges` 钩子，控制台会出 `SimpleChanges` 对象，其属性 `comVar` 的值还是3个，即 `comVar` 的当前值，前一个值和 `firstChange`。\n\n**即 `ngOnChanges` 钩子第一次被调用发生调用 `ngOnInit` 钩子之前，`ngOnChanges` 钩子可能被多次调用**\n\n2，组件中有且只有多个 `@Input` 输入属性，且不为对象\n其代码如下所示\nparent.component.html\n```HTML\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"parVar1\">\n</div>\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"parVar2\">\n</div>\n<hr>\n<app-child [comVar1]=\"parVar1\" [comVar2]=\"parVar2\"></app-child>\n```\n\nchild.component.ts\n```typescript\nimport { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\n\n..../代码块\n\nexport class ChildComponent implements OnInit,OnChanges {\n  @Input() comVar1:string;\n  @Input() comVar2:string;\n  constructor() { }\n  ngOnInit() {\n  }\n  ngOnChanges(changes: SimpleChanges) {\n    console.log(changes);\n  }\n}\n```\n\n在浏览器控制台中，可以看到输出的 `SimpleChanges` 对象，该对象有两个属性，分别是 `comVar1` 和 `comVar2` ，这两个属性的值为对象，分别存放着输入属性 `comVar1` 和 `comVar2` 的当前值，前一个值和 `firstChange`。\n\n**注意：** 在 `input` 改变时，控制台输出的 `SimpleChanges` 对象只有当前绑定的值的属性，不会输出其它绑定绑定值的属性，因为其它绑定值的没有发生变化。\n\n## ngOnInit\n> 适用于组件和指令\n\n`ngOnInit` 钩子在组件中已经被 `Angular` 默认实现了，`ngOnInit` 在 `Angular` 中被使用的次数最多，其在第一次 `ngOnChanges` 之后被调用。\n\n在 `Angular` 中，`ngOnInit` 钩子主要的作用就是：\n1. 在构造函数后马上执行复杂的初始化逻辑；\n2. 在 `Angular` 设置完输入属性之后，对该组件进行准备。\n\n## ngDoCheck\n> 适用于组件和指令\n\n### 变更检测\n变更检测就是 `Angular` 检测视图和数据模型之间绑定的值是否发生了改变，当检测到模型中绑定的值发生改变时，同步到UI视图上。\n>* `Angular` 的变更检测是通过 zone.js 库来实现的，保证组件的变化和UI视图一致\n>* 组件中的任何异步事件都会触发变更检测\n>* 每个组件都有独属于自己的变更检测器，当任何一个变更检测器检测到变化，zone.js 库会根据 `变更检测策略` 来检测组件，以判断组件是否需要更新模板。\n\n### Angular变更检测策略\n\n`Angular` 有两种变更检测策略，分别是 `Default` 策略和 `OnPush` 策略。\n\n>Default策略\n    `Default` 策略是 `Angular` 默认的变更检测策略，该策略会在发生变更时，`zone.js` 会检测所有的组件。\n\n>OnPush策略\n    `Onpush`策略的组件只有输入属性（@Input）发生改变时，才会检测该组件及其子组件。如果所有的组件都采用 `Default` 策略，当某个组件的变更检测器检测到变化，`zone.js` 会检测整个组件树，但它会跳过使用 `OnPush` 策略的组件。\n### ngDoCheck和变更检测\n>触发变更检测机制时会调用 `ngDoCheck` 钩子\n\n### 示例\n在 `ngOnChanges` 钩子中，若 `@Input` 输入属性是一个对象，修改该对象某个属性的值，不会触发 `ngOnChanges` 钩子，但其会触发 `ngDoCheck` 钩子，开发者可以利用这个钩子做开发者需要做的事情。其代码如下所示\npar.component.ts\n```typescript\n....//代码块\n  User={ //定义一个对象\n    par1:null,\n    par2:null\n  }\n```\n\npar.component.html\n```HTML\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"User.parVar1\">\n</div>\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"User.parVar2\">\n</div>\n<hr>\n<app-child [comObj]=\"User\"></app-child>\n```\n\nchild.component.ts\n```typescript\nimport { Component, OnInit, Input, OnChanges, DoCheck } from '@angular/core';\n\n....//代码块\n\nexport class ChildComponent implements OnInit,OnChanges,DoCheck {\n  @Input() comObj:any;\n \n ....//代码块\n \n  ngOnChanges() {\n    console.log('触发了ngOnChanges钩子')\n  }\n  ngDoCheck(){\n    console.log('发生了变更检测');\n  }\n}\n```\n\n在浏览器中打开本地4200端口地址，进入浏览器控制台，可以看到在浏览器中输出了 `触发了ngOnChanges钩子` 和 `发生了变更检测` ，不断改变页面中 `input` 框（两个 `input` ，随便哪一个都可以）的值，可以看到在控制台中，不断的输出 `发生了变更检测` ，但控制台中不会再输出 `触发了ngOnChanges钩子`，因为 `User` 输入对象引用没有发生改变，不会 `ngOnChanges` 钩子。\n\n**注意：** 虽然 `Angular` 暴露了 `ngDoCheck` 钩子，但是由于 `ngDocheck` 钩子调用频繁，所以开发者尽量不要在 `ngDoCheck` 钩子中写入复杂的逻辑，否则会降低 `Angular` 项目的性能，影响用户体验。\n\n## ngAfterContentInit\n> 适用于组件\n\n在 `Angular` 的8个生命周期钩子中，带有 `view` 和 `content` 的4个钩子只适用于组件。其它的4个钩子适用于指令和组件。\n`ngAfterContentInit` 钩子只执行一次，在当把内容投影进组件之后调用这个钩子，在这个钩子里面可以访问被投影进来的组件。\n**注意：** 在组件中，若没有发生组件投影，`ngAfterContentInit`  钩子还是会执行。\n### 意义\n在传统的HTML页面中，标签可以嵌套标签，而在 `Angular` 中，可以把组件看成是标签，一般情况下是不能直接组件嵌套组件。`内容投影shadow` 实现了在 `Angular` 中可以组件嵌套组件。在投影组件时，开发者可能需要在组件投影后马上进行一些操作，可以使用 `ngAfterContentInit` 钩子。\n### 示例\napp.component.html\n```HTML\n<app-shadow-wrap> \n  <app-content-child></app-content-child> //被投影的组件\n</app-shadow-wrap>\n```\n\n在根组件中，页面UI代码如上所示，这时在页面中不会展示和 `app-content-child` 组件有关的UI内容\nshadow-wrap.conponent.html\n```HTML\n<div class=\"container\">\n  <h1>内容投影</h1>\n  <ng-content select=\"app-content-child\"></ng-content> \n</div>\n```\n\n在 `app-shadow-wrap` 组件的UI代码中， `<ng-content select=\"app-content-child\"></ng-content> ` 是占位符，这个占位符存放的就是根组件UI代码中的 `<app-content-child></app-content-child>` 组件，其通过 `<ng-content select=\"app-content-child\"></ng-content> ` 中的 `select` 属性的值来确定这个占位符展示组件投影中的哪一个组件。\n**注意：** `ng-content` 占位符中 `select` 属性还可以为类名，标签名和属性等。在该占位符中不应该有任何内容，若存在内容，也会被投影的组件内容覆盖。\n如下所示：\n```HTML\n<ng-content select=\".blue\"></ng-content>//匹配class名为blue的显示内容 \n<ng-content select=\"header\"></ng-content>//匹配header标签的显示内容 \n<ng-content select=\"[name]=red\"></ng-content>//匹配name属性值为red的显示内容\n```\n\ncontent-child.component.html\n```HTML\n<p>这儿是content-child组件</p>\n```\n\ncontent-child.component.ts\n\n```typescript\n....//代码块\npublic comVar(){\n  console.log(\"A\");\n}\n```\n\n到此，最基本的内容投影完成（关于内容投影，后面会讲解），假如开发者需要在 `shadow-wrap` 组件中访问 `content-child` 组件的值或者方法，可以通过调用 `ngAfterConentInit` 钩子实现。\n\nshadow-wrap.component.ts\n```typescript\nimport { Component, OnInit, ContentChild, AfterContentInit } from '@angular/core';\nimport { ContentChildComponent } from '../content-child/content-child.component';\n\n....//代码块\nexport class ShadowWrapComponent implements OnInit,AfterContentInit {\n  \n  @ContentChild(ContentChildComponent) child1:ContentChildComponent;\n\n  ....//代码块\n\n  ngAfterContentInit(){\n    this.child1.comVar();\n  }\n}\n\n```\n\n可以在控制台看到输出了 `A`，即在 `shadow-wrap` 组件中访问了 `content-child` 组件的public值或者方法。\n**注意：**如果组件中没有发生组件投影，那么就不需要实现这个生命周期钩子。\n\n### AfterContent 和 AfterView\n`AfterContent` 钩子和 `AfterView` 相似。关键的不同点是子组件的类型不同。\n\n>`AfterView 钩子`所关心的是 `ViewChildren`，这些子组件的元素标签会出现在该组件的模板里面。\n>`AfterContent 钩子` 所关心的是 `ContentChildren`，这些子组件被 `Angular` 投影进该组件中。\n\n## ngAfterContentChecked\n> 适用于组件\n\n代码结构和 `ngAfterContentInit` 相同，若被投影的组件发生了变更检测，需要在 `shadow-wrap` 组件中访问被投影组件 `content-child` 的公共属性或方法，这时开发者可以使用 `ngAfterContentChecked` 钩子查看被被投影组件的公共方法或属性。\n\n## ngAfterViewInit\n> 适用于组件\n\n在组件和其所有子组件相应的 `视图` 初始化之后执行 `ngAfterViewInit` 钩子，只执行一次。\n**注意：** 在执行 `ngAfterViewInit` 钩子时，说明组件的 `视图` 已经组装完毕，开发者不能在该钩子中修改和 `组件UI视图` 有关的属性。虽然在UI视图中显示修改成功，但浏览器控制台会报错。\n### 错误示例1-修改组件属性\n view-init.component.ts\n \n```typescript\n....//代码块\n  look:string='jackyy';\n  ngAfterViewInit(){\n    this.look='loook at';\n  }\n```\n\nview-init.component.html\n```HTML\n<div>{{look}}</div>\n```\n\n其控制台台报错如下图所示\n\n![](https://bingolil.github.io/images/angular-ngVInitError.png)\n\n**结论：** 在一个变更检测周期中禁止一个视图被组装好之后再去更新视图。\n\n在带有 `view` 的生命周期钩子（`ngAfterViewInit` 和 `ngAfterViewChecked`）中，禁止更新视图。在上面的 `示例` 中，若属性 `look` 没有出现在 `组件UI视图` 中，即修改 `look` 属性，不会更新 `组件UI视图`，那么浏览器控制台不会报错。\n \n## ngAfterViewChecked\n> 适用于组件\n\n在 `Angular` 检查完组件中的绑定后调用 `ngAfterViewChecked` 钩子，在该钩子中，和 `ngAfterViewInit` 钩子一样，禁止开发者更新视图。\n\n**注意：** 当父组和子组件都有该钩子时，子组件的该钩子先于父组件的该钩子执行。\n\n每次执行该钩子，组件的 `UI视图` 更新完一次，可以在这个钩子中实时获取组件中某个 `DOM` 元素的信息，比如其在页面中的位置，高度或宽度等。\n## ngOnDestory\n> 适用于组件和指令\n\n在 `ngOnDestory` 钩子中，代表组件或指令的生命周期来到了销毁之前，在该钩子中，开发者一般都是解绑事件或者取消订阅，或者清除定时器。\n> **解绑事件：** 比如开发者在某个组件中使用了 `jquery` 绑定了一个点击页面 `body` 事件，路由进入到其它页面中时，不需要这个点击事件，但由于 `Angular` 路由切换机制，会保留这个点击事件，这就需要在组件中的 `ngOnDestory` 钩子里面解除绑定的点击事件，即该组件被销毁后，不会存在点击 `body` 事件。清除定时器的思路和解绑事件的思路一样。\n\n> **取消订阅：** 在 `Angular` 项目中，组件间的通讯有一部分是 `订阅对象` 完成，为了提升用户体验和项目性能，需要取消订阅。\n\n取消订阅代码如下所示：\n\n```typescript\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router'\nimport { Subscription } from 'rxjs';\n\n....//代码块\n  \n  subscription:Subscription\n  constructor(private routeInfo: ActivatedRoute, private){}\n  ngOnInit(){                         //订阅路由参数\n    this.subscription = this.routeInfo.queryParams.subscribe((data)=>{\n      ....//代码块\n    })\n  }\n  ngOnDestroy() { //取消订阅\n    this.subscription.unsubscribe();\n  }\n\n```\n\n## 生命周期钩子总结\n### 初始化阶段\n在组件的生命周期中，组件的初始化由一个构造函数3个生命周期钩子完成\n> `构造函数`：初始化对象\n> `ngOnChanges`：初始化组件输入属性 (@Input)\n> `ngOnInit`：初始化除了输入属性外的所有属性\n> `ngDoCheck`：做一次变更检查\n\n### 渲染阶段\n组件初始化完成后，开始渲染UI视图，首先渲染的就是被投影进来的内容，如果被投影的内容渲染完毕后，会调用 `ngAfterContentInit` 钩子和 `ngAfterContentChecked` 钩子，被投影的内容渲染完毕后，开始渲染组件的内容，当组件内容也渲染完毕后，会调用 `ngAfterViewInit` 钩子和 `ngAfterViewChecked`钩子。\n\n至此，组件的渲染完毕，组件进入存活阶段，即与用户的交互阶段。\n\n### 存活阶段\n在组件的存活阶段，由于用户和组件发生了交互，该阶段主要由4个生命周期钩子完成。\n\n> `ngOnChanges`：发生交互，组件的输入属性改变，会触发该钩子。\n> `ngDoCheck`：数据每发生一个变化，会触发一次变更检测，会调用一次该钩子。\n> `ngAfterContentChecked`：被投影的内容每发生一次变更检测，会调用一次该钩子。\n> `ngAfterViewChecked`：每发生一次视图更新，会调用一次该钩子。\n\n### 销毁阶段\n组件进入销毁阶段，就只有一个钩子 `ngOnDestory` 被调用，在该钩子中，一般都是销毁一些引用的资源，比如取消订阅，清除定时器，解除绑定事件等。","slug":"angular/learn-3","published":1,"updated":"2021-11-24T01:17:58.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwe931kz000tycsz0zic6im2","content":"<p>在<code>Angular</code> 中，每个组件都有一个被 <code>Angular</code> 管理的生命周期。</p>\n<p><code>Angular</code> 提供了生命周期钩子，把这些关键生命时刻（新建、更新和销毁）暴露出来，赋予开发者在它们发生时采取行动的能力。</p>\n<p>除了组件具有生命周期钩子外，指令同样也具有生命周期钩子。</p>\n<p><strong>注意：</strong>指令不能实现带有 <code>content</code> 和 <code>view</code> 相关的钩子，因为在 <code>Angular2</code> 以后，指令不存在UI视图，即和 <code>content</code> 以及 <code>view</code> 没有关系。<br><code>Angular</code> 组件的生命周期钩子如下图所示。</p>\n<p><img src=\"https://bingolil.github.io/images/angular-gouzi.png\"></p>\n<p>如图所示，<code>Angular</code> 组件的生命周期钩子执行顺序从图中的1到8，但没有一个组件或指令会实现全部的生命周期钩子。<br>其中青色的钩子可能在生命周期中执行多次，紫色的钩子在生命周期中只能执行一次。</p>\n<h2 id=\"ngOnChanges\"><a href=\"#ngOnChanges\" class=\"headerlink\" title=\"ngOnChanges\"></a>ngOnChanges</h2><blockquote>\n<p>适用于组件和指令</p>\n</blockquote>\n<p><code>ngOnChanges</code> 钩子只有存在输入属性（<code>@Input</code>）时才能调用，如果不存在该属性，则不能调用该钩子。<code>ngOnChanges</code> 钩子在生命周期中可以被多次调用，但其第一次被调用发生 <code>ngOnInit</code> 钩子之前。</p>\n<h3 id=\"触发条件\"><a href=\"#触发条件\" class=\"headerlink\" title=\"触发条件\"></a>触发条件</h3><p>一旦检测到该组件(或指令)的<strong>输入属性</strong>（<code>@Input</code>）发生了变化，<code>Angular</code> 组件就会调用 <code>ngOnChanges</code> 钩子 。<br><strong>注意：</strong>若输入属性是一个对象，对象的某个属性的值变化时，不会触发这个钩子，只有该对象引用发生变化时，才会触发这个钩子。</p>\n<h3 id=\"用处\"><a href=\"#用处\" class=\"headerlink\" title=\"用处\"></a>用处</h3><p><code>ngOnChanges</code> 钩子在项目中被使用的频率一般。其相当于实现了 <code>angularjs</code> 的 <code>$scope.watch()</code> 功能。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>1，组件中有且只有1个 <code>@Input</code> 输入属性，且不为对象</p>\n<p>代码如下所示<br>parent.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;parVar&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> [<span class=\"attr\">comVar</span>]=<span class=\"string\">&quot;parVar&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>child.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, Input, OnChanges, SimpleChanges &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">                    <span class=\"comment\">//使用钩子，需要继承钩子的接口</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span>,<span class=\"title\">OnChanges</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() comVar:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;A&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//ngOnChanges钩子变化的信息存储在SimpleChanges对象里面</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnChanges</span>(<span class=\"params\">changes: SimpleChanges</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(changes);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中打开本地4200端口地址，按键盘上的 <code>f12</code>进入浏览器控制台，可以看见先输出 <code>SimpleChanges</code> 对象，该对象有一个 <code>comVar</code> 属性，这个<code>comVar</code> 属性的值是一个对象，该对象存储了3个属性，即 <code>comVar</code> 变量的当前值，前一个值和 <code>firstChange</code>（是否第一次改变，<code>boolean</code> 类型，<code>true</code> 代表第一次改变，<code>false</code> 代表不是第一次），然后才输出 <code>ngOnIint</code> 钩子中的 <code>A</code> 。</p>\n<p>当在页面中的 <code>input框</code> 输入值的时候，<code>app-child</code> 组件的输入值发生了改变，触发了 <code>ngOnChanges</code> 钩子，控制台会出 <code>SimpleChanges</code> 对象，其属性 <code>comVar</code> 的值还是3个，即 <code>comVar</code> 的当前值，前一个值和 <code>firstChange</code>。</p>\n<p><strong>即 <code>ngOnChanges</code> 钩子第一次被调用发生调用 <code>ngOnInit</code> 钩子之前，<code>ngOnChanges</code> 钩子可能被多次调用</strong></p>\n<p>2，组件中有且只有多个 <code>@Input</code> 输入属性，且不为对象<br>其代码如下所示<br>parent.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;parVar1&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;parVar2&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> [<span class=\"attr\">comVar1</span>]=<span class=\"string\">&quot;parVar1&quot;</span> [<span class=\"attr\">comVar2</span>]=<span class=\"string\">&quot;parVar2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>child.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, Input, OnChanges, SimpleChanges &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">..../代码块</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span>,<span class=\"title\">OnChanges</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() comVar1:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() comVar2:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnChanges</span>(<span class=\"params\">changes: SimpleChanges</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(changes);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器控制台中，可以看到输出的 <code>SimpleChanges</code> 对象，该对象有两个属性，分别是 <code>comVar1</code> 和 <code>comVar2</code> ，这两个属性的值为对象，分别存放着输入属性 <code>comVar1</code> 和 <code>comVar2</code> 的当前值，前一个值和 <code>firstChange</code>。</p>\n<p><strong>注意：</strong> 在 <code>input</code> 改变时，控制台输出的 <code>SimpleChanges</code> 对象只有当前绑定的值的属性，不会输出其它绑定绑定值的属性，因为其它绑定值的没有发生变化。</p>\n<h2 id=\"ngOnInit\"><a href=\"#ngOnInit\" class=\"headerlink\" title=\"ngOnInit\"></a>ngOnInit</h2><blockquote>\n<p>适用于组件和指令</p>\n</blockquote>\n<p><code>ngOnInit</code> 钩子在组件中已经被 <code>Angular</code> 默认实现了，<code>ngOnInit</code> 在 <code>Angular</code> 中被使用的次数最多，其在第一次 <code>ngOnChanges</code> 之后被调用。</p>\n<p>在 <code>Angular</code> 中，<code>ngOnInit</code> 钩子主要的作用就是：</p>\n<ol>\n<li>在构造函数后马上执行复杂的初始化逻辑；</li>\n<li>在 <code>Angular</code> 设置完输入属性之后，对该组件进行准备。</li>\n</ol>\n<h2 id=\"ngDoCheck\"><a href=\"#ngDoCheck\" class=\"headerlink\" title=\"ngDoCheck\"></a>ngDoCheck</h2><blockquote>\n<p>适用于组件和指令</p>\n</blockquote>\n<h3 id=\"变更检测\"><a href=\"#变更检测\" class=\"headerlink\" title=\"变更检测\"></a>变更检测</h3><p>变更检测就是 <code>Angular</code> 检测视图和数据模型之间绑定的值是否发生了改变，当检测到模型中绑定的值发生改变时，同步到UI视图上。</p>\n<blockquote>\n<ul>\n<li><code>Angular</code> 的变更检测是通过 zone.js 库来实现的，保证组件的变化和UI视图一致</li>\n<li>组件中的任何异步事件都会触发变更检测</li>\n<li>每个组件都有独属于自己的变更检测器，当任何一个变更检测器检测到变化，zone.js 库会根据 <code>变更检测策略</code> 来检测组件，以判断组件是否需要更新模板。</li>\n</ul>\n</blockquote>\n<h3 id=\"Angular变更检测策略\"><a href=\"#Angular变更检测策略\" class=\"headerlink\" title=\"Angular变更检测策略\"></a>Angular变更检测策略</h3><p><code>Angular</code> 有两种变更检测策略，分别是 <code>Default</code> 策略和 <code>OnPush</code> 策略。</p>\n<blockquote>\n<p>Default策略<br>    <code>Default</code> 策略是 <code>Angular</code> 默认的变更检测策略，该策略会在发生变更时，<code>zone.js</code> 会检测所有的组件。</p>\n</blockquote>\n<blockquote>\n<p>OnPush策略<br>    <code>Onpush</code>策略的组件只有输入属性（@Input）发生改变时，才会检测该组件及其子组件。如果所有的组件都采用 <code>Default</code> 策略，当某个组件的变更检测器检测到变化，<code>zone.js</code> 会检测整个组件树，但它会跳过使用 <code>OnPush</code> 策略的组件。</p>\n</blockquote>\n<h3 id=\"ngDoCheck和变更检测\"><a href=\"#ngDoCheck和变更检测\" class=\"headerlink\" title=\"ngDoCheck和变更检测\"></a>ngDoCheck和变更检测</h3><blockquote>\n<p>触发变更检测机制时会调用 <code>ngDoCheck</code> 钩子</p>\n</blockquote>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>在 <code>ngOnChanges</code> 钩子中，若 <code>@Input</code> 输入属性是一个对象，修改该对象某个属性的值，不会触发 <code>ngOnChanges</code> 钩子，但其会触发 <code>ngDoCheck</code> 钩子，开发者可以利用这个钩子做开发者需要做的事情。其代码如下所示<br>par.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">  User=&#123; <span class=\"comment\">//定义一个对象</span></span><br><span class=\"line\">    <span class=\"attr\">par1</span>:<span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">par2</span>:<span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>par.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;User.parVar1&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;User.parVar2&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> [<span class=\"attr\">comObj</span>]=<span class=\"string\">&quot;User&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>child.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, Input, OnChanges, DoCheck &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span>,<span class=\"title\">OnChanges</span>,<span class=\"title\">DoCheck</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() comObj:<span class=\"built_in\">any</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"> ....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnChanges</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;触发了ngOnChanges钩子&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngDoCheck</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;发生了变更检测&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中打开本地4200端口地址，进入浏览器控制台，可以看到在浏览器中输出了 <code>触发了ngOnChanges钩子</code> 和 <code>发生了变更检测</code> ，不断改变页面中 <code>input</code> 框（两个 <code>input</code> ，随便哪一个都可以）的值，可以看到在控制台中，不断的输出 <code>发生了变更检测</code> ，但控制台中不会再输出 <code>触发了ngOnChanges钩子</code>，因为 <code>User</code> 输入对象引用没有发生改变，不会 <code>ngOnChanges</code> 钩子。</p>\n<p><strong>注意：</strong> 虽然 <code>Angular</code> 暴露了 <code>ngDoCheck</code> 钩子，但是由于 <code>ngDocheck</code> 钩子调用频繁，所以开发者尽量不要在 <code>ngDoCheck</code> 钩子中写入复杂的逻辑，否则会降低 <code>Angular</code> 项目的性能，影响用户体验。</p>\n<h2 id=\"ngAfterContentInit\"><a href=\"#ngAfterContentInit\" class=\"headerlink\" title=\"ngAfterContentInit\"></a>ngAfterContentInit</h2><blockquote>\n<p>适用于组件</p>\n</blockquote>\n<p>在 <code>Angular</code> 的8个生命周期钩子中，带有 <code>view</code> 和 <code>content</code> 的4个钩子只适用于组件。其它的4个钩子适用于指令和组件。<br><code>ngAfterContentInit</code> 钩子只执行一次，在当把内容投影进组件之后调用这个钩子，在这个钩子里面可以访问被投影进来的组件。<br><strong>注意：</strong> 在组件中，若没有发生组件投影，<code>ngAfterContentInit</code>  钩子还是会执行。</p>\n<h3 id=\"意义\"><a href=\"#意义\" class=\"headerlink\" title=\"意义\"></a>意义</h3><p>在传统的HTML页面中，标签可以嵌套标签，而在 <code>Angular</code> 中，可以把组件看成是标签，一般情况下是不能直接组件嵌套组件。<code>内容投影shadow</code> 实现了在 <code>Angular</code> 中可以组件嵌套组件。在投影组件时，开发者可能需要在组件投影后马上进行一些操作，可以使用 <code>ngAfterContentInit</code> 钩子。</p>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-shadow-wrap</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-content-child</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-content-child</span>&gt;</span> //被投影的组件</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-shadow-wrap</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在根组件中，页面UI代码如上所示，这时在页面中不会展示和 <code>app-content-child</code> 组件有关的UI内容<br>shadow-wrap.conponent.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>内容投影<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;app-content-child&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>app-shadow-wrap</code> 组件的UI代码中， <code>&lt;ng-content select=&quot;app-content-child&quot;&gt;&lt;/ng-content&gt; </code> 是占位符，这个占位符存放的就是根组件UI代码中的 <code>&lt;app-content-child&gt;&lt;/app-content-child&gt;</code> 组件，其通过 <code>&lt;ng-content select=&quot;app-content-child&quot;&gt;&lt;/ng-content&gt; </code> 中的 <code>select</code> 属性的值来确定这个占位符展示组件投影中的哪一个组件。<br><strong>注意：</strong> <code>ng-content</code> 占位符中 <code>select</code> 属性还可以为类名，标签名和属性等。在该占位符中不应该有任何内容，若存在内容，也会被投影的组件内容覆盖。<br>如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;.blue&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span>//匹配class名为blue的显示内容 </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span>//匹配header标签的显示内容 </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;[name]=red&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span>//匹配name属性值为red的显示内容</span><br></pre></td></tr></table></figure>\n\n<p>content-child.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这儿是content-child组件<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>content-child.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"title\">comVar</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到此，最基本的内容投影完成（关于内容投影，后面会讲解），假如开发者需要在 <code>shadow-wrap</code> 组件中访问 <code>content-child</code> 组件的值或者方法，可以通过调用 <code>ngAfterConentInit</code> 钩子实现。</p>\n<p>shadow-wrap.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, ContentChild, AfterContentInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ContentChildComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../content-child/content-child.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShadowWrapComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span>,<span class=\"title\">AfterContentInit</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@ContentChild</span>(ContentChildComponent) child1:ContentChildComponent;</span><br><span class=\"line\"></span><br><span class=\"line\">  ....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngAfterContentInit</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.child1.comVar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以在控制台看到输出了 <code>A</code>，即在 <code>shadow-wrap</code> 组件中访问了 <code>content-child</code> 组件的public值或者方法。<br><strong>注意：</strong>如果组件中没有发生组件投影，那么就不需要实现这个生命周期钩子。</p>\n<h3 id=\"AfterContent-和-AfterView\"><a href=\"#AfterContent-和-AfterView\" class=\"headerlink\" title=\"AfterContent 和 AfterView\"></a>AfterContent 和 AfterView</h3><p><code>AfterContent</code> 钩子和 <code>AfterView</code> 相似。关键的不同点是子组件的类型不同。</p>\n<blockquote>\n<p><code>AfterView 钩子</code>所关心的是 <code>ViewChildren</code>，这些子组件的元素标签会出现在该组件的模板里面。<br><code>AfterContent 钩子</code> 所关心的是 <code>ContentChildren</code>，这些子组件被 <code>Angular</code> 投影进该组件中。</p>\n</blockquote>\n<h2 id=\"ngAfterContentChecked\"><a href=\"#ngAfterContentChecked\" class=\"headerlink\" title=\"ngAfterContentChecked\"></a>ngAfterContentChecked</h2><blockquote>\n<p>适用于组件</p>\n</blockquote>\n<p>代码结构和 <code>ngAfterContentInit</code> 相同，若被投影的组件发生了变更检测，需要在 <code>shadow-wrap</code> 组件中访问被投影组件 <code>content-child</code> 的公共属性或方法，这时开发者可以使用 <code>ngAfterContentChecked</code> 钩子查看被被投影组件的公共方法或属性。</p>\n<h2 id=\"ngAfterViewInit\"><a href=\"#ngAfterViewInit\" class=\"headerlink\" title=\"ngAfterViewInit\"></a>ngAfterViewInit</h2><blockquote>\n<p>适用于组件</p>\n</blockquote>\n<p>在组件和其所有子组件相应的 <code>视图</code> 初始化之后执行 <code>ngAfterViewInit</code> 钩子，只执行一次。<br><strong>注意：</strong> 在执行 <code>ngAfterViewInit</code> 钩子时，说明组件的 <code>视图</code> 已经组装完毕，开发者不能在该钩子中修改和 <code>组件UI视图</code> 有关的属性。虽然在UI视图中显示修改成功，但浏览器控制台会报错。</p>\n<h3 id=\"错误示例1-修改组件属性\"><a href=\"#错误示例1-修改组件属性\" class=\"headerlink\" title=\"错误示例1-修改组件属性\"></a>错误示例1-修改组件属性</h3><p> view-init.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">  <span class=\"attr\">look</span>:<span class=\"built_in\">string</span>=<span class=\"string\">&#x27;jackyy&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngAfterViewInit</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.look=<span class=\"string\">&#x27;loook at&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>view-init.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;look&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其控制台台报错如下图所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-ngVInitError.png\"></p>\n<p><strong>结论：</strong> 在一个变更检测周期中禁止一个视图被组装好之后再去更新视图。</p>\n<p>在带有 <code>view</code> 的生命周期钩子（<code>ngAfterViewInit</code> 和 <code>ngAfterViewChecked</code>）中，禁止更新视图。在上面的 <code>示例</code> 中，若属性 <code>look</code> 没有出现在 <code>组件UI视图</code> 中，即修改 <code>look</code> 属性，不会更新 <code>组件UI视图</code>，那么浏览器控制台不会报错。</p>\n<h2 id=\"ngAfterViewChecked\"><a href=\"#ngAfterViewChecked\" class=\"headerlink\" title=\"ngAfterViewChecked\"></a>ngAfterViewChecked</h2><blockquote>\n<p>适用于组件</p>\n</blockquote>\n<p>在 <code>Angular</code> 检查完组件中的绑定后调用 <code>ngAfterViewChecked</code> 钩子，在该钩子中，和 <code>ngAfterViewInit</code> 钩子一样，禁止开发者更新视图。</p>\n<p><strong>注意：</strong> 当父组和子组件都有该钩子时，子组件的该钩子先于父组件的该钩子执行。</p>\n<p>每次执行该钩子，组件的 <code>UI视图</code> 更新完一次，可以在这个钩子中实时获取组件中某个 <code>DOM</code> 元素的信息，比如其在页面中的位置，高度或宽度等。</p>\n<h2 id=\"ngOnDestory\"><a href=\"#ngOnDestory\" class=\"headerlink\" title=\"ngOnDestory\"></a>ngOnDestory</h2><blockquote>\n<p>适用于组件和指令</p>\n</blockquote>\n<p>在 <code>ngOnDestory</code> 钩子中，代表组件或指令的生命周期来到了销毁之前，在该钩子中，开发者一般都是解绑事件或者取消订阅，或者清除定时器。</p>\n<blockquote>\n<p><strong>解绑事件：</strong> 比如开发者在某个组件中使用了 <code>jquery</code> 绑定了一个点击页面 <code>body</code> 事件，路由进入到其它页面中时，不需要这个点击事件，但由于 <code>Angular</code> 路由切换机制，会保留这个点击事件，这就需要在组件中的 <code>ngOnDestory</code> 钩子里面解除绑定的点击事件，即该组件被销毁后，不会存在点击 <code>body</code> 事件。清除定时器的思路和解绑事件的思路一样。</p>\n</blockquote>\n<blockquote>\n<p><strong>取消订阅：</strong> 在 <code>Angular</code> 项目中，组件间的通讯有一部分是 <code>订阅对象</code> 完成，为了提升用户体验和项目性能，需要取消订阅。</p>\n</blockquote>\n<p>取消订阅代码如下所示：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, OnDestroy &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Subscription &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">subscription</span>:Subscription</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> routeInfo: ActivatedRoute, <span class=\"keyword\">private</span></span>)</span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span>&#123;                         <span class=\"comment\">//订阅路由参数</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.subscription = <span class=\"built_in\">this</span>.routeInfo.queryParams.subscribe(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      ....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnDestroy</span>(<span class=\"params\"></span>)</span> &#123; <span class=\"comment\">//取消订阅</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.subscription.unsubscribe();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生命周期钩子总结\"><a href=\"#生命周期钩子总结\" class=\"headerlink\" title=\"生命周期钩子总结\"></a>生命周期钩子总结</h2><h3 id=\"初始化阶段\"><a href=\"#初始化阶段\" class=\"headerlink\" title=\"初始化阶段\"></a>初始化阶段</h3><p>在组件的生命周期中，组件的初始化由一个构造函数3个生命周期钩子完成</p>\n<blockquote>\n<p><code>构造函数</code>：初始化对象<br><code>ngOnChanges</code>：初始化组件输入属性 (@Input)<br><code>ngOnInit</code>：初始化除了输入属性外的所有属性<br><code>ngDoCheck</code>：做一次变更检查</p>\n</blockquote>\n<h3 id=\"渲染阶段\"><a href=\"#渲染阶段\" class=\"headerlink\" title=\"渲染阶段\"></a>渲染阶段</h3><p>组件初始化完成后，开始渲染UI视图，首先渲染的就是被投影进来的内容，如果被投影的内容渲染完毕后，会调用 <code>ngAfterContentInit</code> 钩子和 <code>ngAfterContentChecked</code> 钩子，被投影的内容渲染完毕后，开始渲染组件的内容，当组件内容也渲染完毕后，会调用 <code>ngAfterViewInit</code> 钩子和 <code>ngAfterViewChecked</code>钩子。</p>\n<p>至此，组件的渲染完毕，组件进入存活阶段，即与用户的交互阶段。</p>\n<h3 id=\"存活阶段\"><a href=\"#存活阶段\" class=\"headerlink\" title=\"存活阶段\"></a>存活阶段</h3><p>在组件的存活阶段，由于用户和组件发生了交互，该阶段主要由4个生命周期钩子完成。</p>\n<blockquote>\n<p><code>ngOnChanges</code>：发生交互，组件的输入属性改变，会触发该钩子。<br><code>ngDoCheck</code>：数据每发生一个变化，会触发一次变更检测，会调用一次该钩子。<br><code>ngAfterContentChecked</code>：被投影的内容每发生一次变更检测，会调用一次该钩子。<br><code>ngAfterViewChecked</code>：每发生一次视图更新，会调用一次该钩子。</p>\n</blockquote>\n<h3 id=\"销毁阶段\"><a href=\"#销毁阶段\" class=\"headerlink\" title=\"销毁阶段\"></a>销毁阶段</h3><p>组件进入销毁阶段，就只有一个钩子 <code>ngOnDestory</code> 被调用，在该钩子中，一般都是销毁一些引用的资源，比如取消订阅，清除定时器，解除绑定事件等。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在<code>Angular</code> 中，每个组件都有一个被 <code>Angular</code> 管理的生命周期。</p>\n<p><code>Angular</code> 提供了生命周期钩子，把这些关键生命时刻（新建、更新和销毁）暴露出来，赋予开发者在它们发生时采取行动的能力。</p>\n<p>除了组件具有生命周期钩子外，指令同样也具有生命周期钩子。</p>\n<p><strong>注意：</strong>指令不能实现带有 <code>content</code> 和 <code>view</code> 相关的钩子，因为在 <code>Angular2</code> 以后，指令不存在UI视图，即和 <code>content</code> 以及 <code>view</code> 没有关系。<br><code>Angular</code> 组件的生命周期钩子如下图所示。</p>\n<p><img src=\"https://bingolil.github.io/images/angular-gouzi.png\"></p>\n<p>如图所示，<code>Angular</code> 组件的生命周期钩子执行顺序从图中的1到8，但没有一个组件或指令会实现全部的生命周期钩子。<br>其中青色的钩子可能在生命周期中执行多次，紫色的钩子在生命周期中只能执行一次。</p>\n<h2 id=\"ngOnChanges\"><a href=\"#ngOnChanges\" class=\"headerlink\" title=\"ngOnChanges\"></a>ngOnChanges</h2><blockquote>\n<p>适用于组件和指令</p>\n</blockquote>\n<p><code>ngOnChanges</code> 钩子只有存在输入属性（<code>@Input</code>）时才能调用，如果不存在该属性，则不能调用该钩子。<code>ngOnChanges</code> 钩子在生命周期中可以被多次调用，但其第一次被调用发生 <code>ngOnInit</code> 钩子之前。</p>\n<h3 id=\"触发条件\"><a href=\"#触发条件\" class=\"headerlink\" title=\"触发条件\"></a>触发条件</h3><p>一旦检测到该组件(或指令)的<strong>输入属性</strong>（<code>@Input</code>）发生了变化，<code>Angular</code> 组件就会调用 <code>ngOnChanges</code> 钩子 。<br><strong>注意：</strong>若输入属性是一个对象，对象的某个属性的值变化时，不会触发这个钩子，只有该对象引用发生变化时，才会触发这个钩子。</p>\n<h3 id=\"用处\"><a href=\"#用处\" class=\"headerlink\" title=\"用处\"></a>用处</h3><p><code>ngOnChanges</code> 钩子在项目中被使用的频率一般。其相当于实现了 <code>angularjs</code> 的 <code>$scope.watch()</code> 功能。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>1，组件中有且只有1个 <code>@Input</code> 输入属性，且不为对象</p>\n<p>代码如下所示<br>parent.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;parVar&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> [<span class=\"attr\">comVar</span>]=<span class=\"string\">&quot;parVar&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>child.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, Input, OnChanges, SimpleChanges &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">                    <span class=\"comment\">//使用钩子，需要继承钩子的接口</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span>,<span class=\"title\">OnChanges</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() comVar:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;A&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//ngOnChanges钩子变化的信息存储在SimpleChanges对象里面</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnChanges</span>(<span class=\"params\">changes: SimpleChanges</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(changes);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中打开本地4200端口地址，按键盘上的 <code>f12</code>进入浏览器控制台，可以看见先输出 <code>SimpleChanges</code> 对象，该对象有一个 <code>comVar</code> 属性，这个<code>comVar</code> 属性的值是一个对象，该对象存储了3个属性，即 <code>comVar</code> 变量的当前值，前一个值和 <code>firstChange</code>（是否第一次改变，<code>boolean</code> 类型，<code>true</code> 代表第一次改变，<code>false</code> 代表不是第一次），然后才输出 <code>ngOnIint</code> 钩子中的 <code>A</code> 。</p>\n<p>当在页面中的 <code>input框</code> 输入值的时候，<code>app-child</code> 组件的输入值发生了改变，触发了 <code>ngOnChanges</code> 钩子，控制台会出 <code>SimpleChanges</code> 对象，其属性 <code>comVar</code> 的值还是3个，即 <code>comVar</code> 的当前值，前一个值和 <code>firstChange</code>。</p>\n<p><strong>即 <code>ngOnChanges</code> 钩子第一次被调用发生调用 <code>ngOnInit</code> 钩子之前，<code>ngOnChanges</code> 钩子可能被多次调用</strong></p>\n<p>2，组件中有且只有多个 <code>@Input</code> 输入属性，且不为对象<br>其代码如下所示<br>parent.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;parVar1&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;parVar2&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> [<span class=\"attr\">comVar1</span>]=<span class=\"string\">&quot;parVar1&quot;</span> [<span class=\"attr\">comVar2</span>]=<span class=\"string\">&quot;parVar2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>child.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, Input, OnChanges, SimpleChanges &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">..../代码块</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span>,<span class=\"title\">OnChanges</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() comVar1:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() comVar2:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnChanges</span>(<span class=\"params\">changes: SimpleChanges</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(changes);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器控制台中，可以看到输出的 <code>SimpleChanges</code> 对象，该对象有两个属性，分别是 <code>comVar1</code> 和 <code>comVar2</code> ，这两个属性的值为对象，分别存放着输入属性 <code>comVar1</code> 和 <code>comVar2</code> 的当前值，前一个值和 <code>firstChange</code>。</p>\n<p><strong>注意：</strong> 在 <code>input</code> 改变时，控制台输出的 <code>SimpleChanges</code> 对象只有当前绑定的值的属性，不会输出其它绑定绑定值的属性，因为其它绑定值的没有发生变化。</p>\n<h2 id=\"ngOnInit\"><a href=\"#ngOnInit\" class=\"headerlink\" title=\"ngOnInit\"></a>ngOnInit</h2><blockquote>\n<p>适用于组件和指令</p>\n</blockquote>\n<p><code>ngOnInit</code> 钩子在组件中已经被 <code>Angular</code> 默认实现了，<code>ngOnInit</code> 在 <code>Angular</code> 中被使用的次数最多，其在第一次 <code>ngOnChanges</code> 之后被调用。</p>\n<p>在 <code>Angular</code> 中，<code>ngOnInit</code> 钩子主要的作用就是：</p>\n<ol>\n<li>在构造函数后马上执行复杂的初始化逻辑；</li>\n<li>在 <code>Angular</code> 设置完输入属性之后，对该组件进行准备。</li>\n</ol>\n<h2 id=\"ngDoCheck\"><a href=\"#ngDoCheck\" class=\"headerlink\" title=\"ngDoCheck\"></a>ngDoCheck</h2><blockquote>\n<p>适用于组件和指令</p>\n</blockquote>\n<h3 id=\"变更检测\"><a href=\"#变更检测\" class=\"headerlink\" title=\"变更检测\"></a>变更检测</h3><p>变更检测就是 <code>Angular</code> 检测视图和数据模型之间绑定的值是否发生了改变，当检测到模型中绑定的值发生改变时，同步到UI视图上。</p>\n<blockquote>\n<ul>\n<li><code>Angular</code> 的变更检测是通过 zone.js 库来实现的，保证组件的变化和UI视图一致</li>\n<li>组件中的任何异步事件都会触发变更检测</li>\n<li>每个组件都有独属于自己的变更检测器，当任何一个变更检测器检测到变化，zone.js 库会根据 <code>变更检测策略</code> 来检测组件，以判断组件是否需要更新模板。</li>\n</ul>\n</blockquote>\n<h3 id=\"Angular变更检测策略\"><a href=\"#Angular变更检测策略\" class=\"headerlink\" title=\"Angular变更检测策略\"></a>Angular变更检测策略</h3><p><code>Angular</code> 有两种变更检测策略，分别是 <code>Default</code> 策略和 <code>OnPush</code> 策略。</p>\n<blockquote>\n<p>Default策略<br>    <code>Default</code> 策略是 <code>Angular</code> 默认的变更检测策略，该策略会在发生变更时，<code>zone.js</code> 会检测所有的组件。</p>\n</blockquote>\n<blockquote>\n<p>OnPush策略<br>    <code>Onpush</code>策略的组件只有输入属性（@Input）发生改变时，才会检测该组件及其子组件。如果所有的组件都采用 <code>Default</code> 策略，当某个组件的变更检测器检测到变化，<code>zone.js</code> 会检测整个组件树，但它会跳过使用 <code>OnPush</code> 策略的组件。</p>\n</blockquote>\n<h3 id=\"ngDoCheck和变更检测\"><a href=\"#ngDoCheck和变更检测\" class=\"headerlink\" title=\"ngDoCheck和变更检测\"></a>ngDoCheck和变更检测</h3><blockquote>\n<p>触发变更检测机制时会调用 <code>ngDoCheck</code> 钩子</p>\n</blockquote>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>在 <code>ngOnChanges</code> 钩子中，若 <code>@Input</code> 输入属性是一个对象，修改该对象某个属性的值，不会触发 <code>ngOnChanges</code> 钩子，但其会触发 <code>ngDoCheck</code> 钩子，开发者可以利用这个钩子做开发者需要做的事情。其代码如下所示<br>par.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">  User=&#123; <span class=\"comment\">//定义一个对象</span></span><br><span class=\"line\">    <span class=\"attr\">par1</span>:<span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">par2</span>:<span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>par.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;User.parVar1&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;User.parVar2&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> [<span class=\"attr\">comObj</span>]=<span class=\"string\">&quot;User&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>child.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, Input, OnChanges, DoCheck &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span>,<span class=\"title\">OnChanges</span>,<span class=\"title\">DoCheck</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() comObj:<span class=\"built_in\">any</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"> ....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnChanges</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;触发了ngOnChanges钩子&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngDoCheck</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;发生了变更检测&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在浏览器中打开本地4200端口地址，进入浏览器控制台，可以看到在浏览器中输出了 <code>触发了ngOnChanges钩子</code> 和 <code>发生了变更检测</code> ，不断改变页面中 <code>input</code> 框（两个 <code>input</code> ，随便哪一个都可以）的值，可以看到在控制台中，不断的输出 <code>发生了变更检测</code> ，但控制台中不会再输出 <code>触发了ngOnChanges钩子</code>，因为 <code>User</code> 输入对象引用没有发生改变，不会 <code>ngOnChanges</code> 钩子。</p>\n<p><strong>注意：</strong> 虽然 <code>Angular</code> 暴露了 <code>ngDoCheck</code> 钩子，但是由于 <code>ngDocheck</code> 钩子调用频繁，所以开发者尽量不要在 <code>ngDoCheck</code> 钩子中写入复杂的逻辑，否则会降低 <code>Angular</code> 项目的性能，影响用户体验。</p>\n<h2 id=\"ngAfterContentInit\"><a href=\"#ngAfterContentInit\" class=\"headerlink\" title=\"ngAfterContentInit\"></a>ngAfterContentInit</h2><blockquote>\n<p>适用于组件</p>\n</blockquote>\n<p>在 <code>Angular</code> 的8个生命周期钩子中，带有 <code>view</code> 和 <code>content</code> 的4个钩子只适用于组件。其它的4个钩子适用于指令和组件。<br><code>ngAfterContentInit</code> 钩子只执行一次，在当把内容投影进组件之后调用这个钩子，在这个钩子里面可以访问被投影进来的组件。<br><strong>注意：</strong> 在组件中，若没有发生组件投影，<code>ngAfterContentInit</code>  钩子还是会执行。</p>\n<h3 id=\"意义\"><a href=\"#意义\" class=\"headerlink\" title=\"意义\"></a>意义</h3><p>在传统的HTML页面中，标签可以嵌套标签，而在 <code>Angular</code> 中，可以把组件看成是标签，一般情况下是不能直接组件嵌套组件。<code>内容投影shadow</code> 实现了在 <code>Angular</code> 中可以组件嵌套组件。在投影组件时，开发者可能需要在组件投影后马上进行一些操作，可以使用 <code>ngAfterContentInit</code> 钩子。</p>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-shadow-wrap</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-content-child</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-content-child</span>&gt;</span> //被投影的组件</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-shadow-wrap</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在根组件中，页面UI代码如上所示，这时在页面中不会展示和 <code>app-content-child</code> 组件有关的UI内容<br>shadow-wrap.conponent.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>内容投影<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;app-content-child&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>app-shadow-wrap</code> 组件的UI代码中， <code>&lt;ng-content select=&quot;app-content-child&quot;&gt;&lt;/ng-content&gt; </code> 是占位符，这个占位符存放的就是根组件UI代码中的 <code>&lt;app-content-child&gt;&lt;/app-content-child&gt;</code> 组件，其通过 <code>&lt;ng-content select=&quot;app-content-child&quot;&gt;&lt;/ng-content&gt; </code> 中的 <code>select</code> 属性的值来确定这个占位符展示组件投影中的哪一个组件。<br><strong>注意：</strong> <code>ng-content</code> 占位符中 <code>select</code> 属性还可以为类名，标签名和属性等。在该占位符中不应该有任何内容，若存在内容，也会被投影的组件内容覆盖。<br>如下所示：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;.blue&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span>//匹配class名为blue的显示内容 </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span>//匹配header标签的显示内容 </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">&quot;[name]=red&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span>//匹配name属性值为red的显示内容</span><br></pre></td></tr></table></figure>\n\n<p>content-child.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这儿是content-child组件<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>content-child.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"title\">comVar</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到此，最基本的内容投影完成（关于内容投影，后面会讲解），假如开发者需要在 <code>shadow-wrap</code> 组件中访问 <code>content-child</code> 组件的值或者方法，可以通过调用 <code>ngAfterConentInit</code> 钩子实现。</p>\n<p>shadow-wrap.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, ContentChild, AfterContentInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ContentChildComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../content-child/content-child.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShadowWrapComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span>,<span class=\"title\">AfterContentInit</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@ContentChild</span>(ContentChildComponent) child1:ContentChildComponent;</span><br><span class=\"line\"></span><br><span class=\"line\">  ....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngAfterContentInit</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.child1.comVar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以在控制台看到输出了 <code>A</code>，即在 <code>shadow-wrap</code> 组件中访问了 <code>content-child</code> 组件的public值或者方法。<br><strong>注意：</strong>如果组件中没有发生组件投影，那么就不需要实现这个生命周期钩子。</p>\n<h3 id=\"AfterContent-和-AfterView\"><a href=\"#AfterContent-和-AfterView\" class=\"headerlink\" title=\"AfterContent 和 AfterView\"></a>AfterContent 和 AfterView</h3><p><code>AfterContent</code> 钩子和 <code>AfterView</code> 相似。关键的不同点是子组件的类型不同。</p>\n<blockquote>\n<p><code>AfterView 钩子</code>所关心的是 <code>ViewChildren</code>，这些子组件的元素标签会出现在该组件的模板里面。<br><code>AfterContent 钩子</code> 所关心的是 <code>ContentChildren</code>，这些子组件被 <code>Angular</code> 投影进该组件中。</p>\n</blockquote>\n<h2 id=\"ngAfterContentChecked\"><a href=\"#ngAfterContentChecked\" class=\"headerlink\" title=\"ngAfterContentChecked\"></a>ngAfterContentChecked</h2><blockquote>\n<p>适用于组件</p>\n</blockquote>\n<p>代码结构和 <code>ngAfterContentInit</code> 相同，若被投影的组件发生了变更检测，需要在 <code>shadow-wrap</code> 组件中访问被投影组件 <code>content-child</code> 的公共属性或方法，这时开发者可以使用 <code>ngAfterContentChecked</code> 钩子查看被被投影组件的公共方法或属性。</p>\n<h2 id=\"ngAfterViewInit\"><a href=\"#ngAfterViewInit\" class=\"headerlink\" title=\"ngAfterViewInit\"></a>ngAfterViewInit</h2><blockquote>\n<p>适用于组件</p>\n</blockquote>\n<p>在组件和其所有子组件相应的 <code>视图</code> 初始化之后执行 <code>ngAfterViewInit</code> 钩子，只执行一次。<br><strong>注意：</strong> 在执行 <code>ngAfterViewInit</code> 钩子时，说明组件的 <code>视图</code> 已经组装完毕，开发者不能在该钩子中修改和 <code>组件UI视图</code> 有关的属性。虽然在UI视图中显示修改成功，但浏览器控制台会报错。</p>\n<h3 id=\"错误示例1-修改组件属性\"><a href=\"#错误示例1-修改组件属性\" class=\"headerlink\" title=\"错误示例1-修改组件属性\"></a>错误示例1-修改组件属性</h3><p> view-init.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">  <span class=\"attr\">look</span>:<span class=\"built_in\">string</span>=<span class=\"string\">&#x27;jackyy&#x27;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngAfterViewInit</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.look=<span class=\"string\">&#x27;loook at&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>view-init.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;look&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其控制台台报错如下图所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-ngVInitError.png\"></p>\n<p><strong>结论：</strong> 在一个变更检测周期中禁止一个视图被组装好之后再去更新视图。</p>\n<p>在带有 <code>view</code> 的生命周期钩子（<code>ngAfterViewInit</code> 和 <code>ngAfterViewChecked</code>）中，禁止更新视图。在上面的 <code>示例</code> 中，若属性 <code>look</code> 没有出现在 <code>组件UI视图</code> 中，即修改 <code>look</code> 属性，不会更新 <code>组件UI视图</code>，那么浏览器控制台不会报错。</p>\n<h2 id=\"ngAfterViewChecked\"><a href=\"#ngAfterViewChecked\" class=\"headerlink\" title=\"ngAfterViewChecked\"></a>ngAfterViewChecked</h2><blockquote>\n<p>适用于组件</p>\n</blockquote>\n<p>在 <code>Angular</code> 检查完组件中的绑定后调用 <code>ngAfterViewChecked</code> 钩子，在该钩子中，和 <code>ngAfterViewInit</code> 钩子一样，禁止开发者更新视图。</p>\n<p><strong>注意：</strong> 当父组和子组件都有该钩子时，子组件的该钩子先于父组件的该钩子执行。</p>\n<p>每次执行该钩子，组件的 <code>UI视图</code> 更新完一次，可以在这个钩子中实时获取组件中某个 <code>DOM</code> 元素的信息，比如其在页面中的位置，高度或宽度等。</p>\n<h2 id=\"ngOnDestory\"><a href=\"#ngOnDestory\" class=\"headerlink\" title=\"ngOnDestory\"></a>ngOnDestory</h2><blockquote>\n<p>适用于组件和指令</p>\n</blockquote>\n<p>在 <code>ngOnDestory</code> 钩子中，代表组件或指令的生命周期来到了销毁之前，在该钩子中，开发者一般都是解绑事件或者取消订阅，或者清除定时器。</p>\n<blockquote>\n<p><strong>解绑事件：</strong> 比如开发者在某个组件中使用了 <code>jquery</code> 绑定了一个点击页面 <code>body</code> 事件，路由进入到其它页面中时，不需要这个点击事件，但由于 <code>Angular</code> 路由切换机制，会保留这个点击事件，这就需要在组件中的 <code>ngOnDestory</code> 钩子里面解除绑定的点击事件，即该组件被销毁后，不会存在点击 <code>body</code> 事件。清除定时器的思路和解绑事件的思路一样。</p>\n</blockquote>\n<blockquote>\n<p><strong>取消订阅：</strong> 在 <code>Angular</code> 项目中，组件间的通讯有一部分是 <code>订阅对象</code> 完成，为了提升用户体验和项目性能，需要取消订阅。</p>\n</blockquote>\n<p>取消订阅代码如下所示：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, OnDestroy &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Subscription &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">subscription</span>:Subscription</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> routeInfo: ActivatedRoute, <span class=\"keyword\">private</span></span>)</span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span>&#123;                         <span class=\"comment\">//订阅路由参数</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.subscription = <span class=\"built_in\">this</span>.routeInfo.queryParams.subscribe(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      ....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnDestroy</span>(<span class=\"params\"></span>)</span> &#123; <span class=\"comment\">//取消订阅</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.subscription.unsubscribe();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生命周期钩子总结\"><a href=\"#生命周期钩子总结\" class=\"headerlink\" title=\"生命周期钩子总结\"></a>生命周期钩子总结</h2><h3 id=\"初始化阶段\"><a href=\"#初始化阶段\" class=\"headerlink\" title=\"初始化阶段\"></a>初始化阶段</h3><p>在组件的生命周期中，组件的初始化由一个构造函数3个生命周期钩子完成</p>\n<blockquote>\n<p><code>构造函数</code>：初始化对象<br><code>ngOnChanges</code>：初始化组件输入属性 (@Input)<br><code>ngOnInit</code>：初始化除了输入属性外的所有属性<br><code>ngDoCheck</code>：做一次变更检查</p>\n</blockquote>\n<h3 id=\"渲染阶段\"><a href=\"#渲染阶段\" class=\"headerlink\" title=\"渲染阶段\"></a>渲染阶段</h3><p>组件初始化完成后，开始渲染UI视图，首先渲染的就是被投影进来的内容，如果被投影的内容渲染完毕后，会调用 <code>ngAfterContentInit</code> 钩子和 <code>ngAfterContentChecked</code> 钩子，被投影的内容渲染完毕后，开始渲染组件的内容，当组件内容也渲染完毕后，会调用 <code>ngAfterViewInit</code> 钩子和 <code>ngAfterViewChecked</code>钩子。</p>\n<p>至此，组件的渲染完毕，组件进入存活阶段，即与用户的交互阶段。</p>\n<h3 id=\"存活阶段\"><a href=\"#存活阶段\" class=\"headerlink\" title=\"存活阶段\"></a>存活阶段</h3><p>在组件的存活阶段，由于用户和组件发生了交互，该阶段主要由4个生命周期钩子完成。</p>\n<blockquote>\n<p><code>ngOnChanges</code>：发生交互，组件的输入属性改变，会触发该钩子。<br><code>ngDoCheck</code>：数据每发生一个变化，会触发一次变更检测，会调用一次该钩子。<br><code>ngAfterContentChecked</code>：被投影的内容每发生一次变更检测，会调用一次该钩子。<br><code>ngAfterViewChecked</code>：每发生一次视图更新，会调用一次该钩子。</p>\n</blockquote>\n<h3 id=\"销毁阶段\"><a href=\"#销毁阶段\" class=\"headerlink\" title=\"销毁阶段\"></a>销毁阶段</h3><p>组件进入销毁阶段，就只有一个钩子 <code>ngOnDestory</code> 被调用，在该钩子中，一般都是销毁一些引用的资源，比如取消订阅，清除定时器，解除绑定事件等。</p>\n"},{"title":"Angular学习-4-路由1","date":"2018-12-09T16:00:00.000Z","description":"在单页应用中，你可以通过显示或隐藏与特定组件相对应的部分来更改用户看到的内容，而不用去服务器获取新页面。用户执行应用程序任务时，他们需要在定义好的不同视图之间移动。","_content":"`路由` 在 `Angular` 中是一个非常重要的模块，一个好的路由对项目的开发有着巨大的促进作用。\n\n`Angular` 是单页面应用，在用户使用程序时，`Angular` 的 `路由` 能让用户从一个视图导航到另一个视图。\n## 基本路由\n### 路由配置文件\n在 `Angular` 项目中，`Angular` 的路由配置信息一般存放在单独的文件中（如xxxx-routing.module.ts），当然，放到 `Angular` 的模块中也可以。\n\n一般来说，存放路由配置信息的文件的生成方式有两种，一是手动生成，一是通过命令自动生成。\n> **手动生成**\n\n在 `Angular` 项目的app文件夹目录下，手动新建一个文件，名为 `app-routing.module.ts`，将路由配置信息放到该文件中。需要开发者在跟模块 `AppModule` 里面引用路由配置信息模块。\n\n> **自动生成**\n\n在 `cmd` 环境中，新建项目时，增加一个 `--routing` 的参数，如下所示：\n\n```\nng new 项目名 --routing\n```\n\n使用该命令创建项目，会在项目文件夹 `app` 下面生成 `app-routing.module.ts` 文件。\n\n由于是使用命令生成的路由配置信息文件，`app-routing.module.ts` 文件中的 `AppRoutingModule` 模块自动被 `AppModule` 根模块 `import` 了，不需要开发者在 `AppModule` 根模块里面去手动引用路由模块；`app.component.html` 页面中 `router-outlet` 占位符也会自动生成。 \n\n开发者在使用 `懒加载` 时，需要新建一个模块，新建的模块里面也存在路由，开发者也可以使用命令在创建模块时自动生成路由信息配置文件，其命令如下所示：\n\n```\nng g m 模块名 --routing  //最简写法\n```\n\n### 路由相关属性\n`Angular` 的路由中涉及到许多的属性，如下所示。\n\n> **Rotues：** 存在于路由模块中，存放路由配置信息，即那个 `Url` 对应那个组件以及在那个 `outlet-outlet` 中展示组件，其用法: `const routes: Routes = [ 配置信息 ]`\n\n> **router-outlet：** 该属性是组件UI中的路由占位符，存在于组件UI中，其用法：`<router-outlet></router-outlet>`\n\n> **routerLink：** 在组件UI中负责路由跳转，存在于组件UI中，其用法：`1，<a routerKink=\"xxx\">xxxx</a>`，`2，<a [routerKink]=\"['xxx']\">xxxx</a>`\n\n> **routerLinkActive：** 当前路由被激活时的样式，存在于组件UI中，其用法：`<a routerLinkActive='active' routerKink=\"['xxx']\">xxxx</a>`，即当前路由激活时，给当前 `a标签` 增加 `active` 样式类\n\n> **Router：** 负责在运行时执行的路由对象，可以通过其 `navigate()`  方法和 `navigateByUrl()` 方法进行路由跳转，`Router` 是一个类，在使用时，需要实例化，其用法：`Router.navigate(['/xxx'])`\n\n> **ActivedRoute：** 代表当前激活的路由对象，保存当前路由的 `URL` 以及路由参数，这是一个类，在使用时，需要实例化，其用法：`1，参数订阅 ActivedRoute.params.subscribe((data)=>{})`，`2，参数快照 ActivedRoute..snapshot.queryParams[\"id\"]`\n\n> **useHash：** 其路由使用哈希展现，即多了一个 `#` 号，存在于根配置信息文件 `app-routing.module.ts` 中，其用法：`RouterModule.forRoot(routes,{useHash:true})`\n\n> **redirectTo：** 路由重定向，一般存在于根路由配置文件 `app-routing.module.ts` 中，其用法：`{path:'',redirectTo:'/home',pathMatch:'full'}`，即当前路由为空时，转到路由为 `home` 的页面\n\n> **pathMatch：** 路由完全匹配，一般存在于根路由配置 `app-routing.module.ts` 文件中，其用法：`{path:'',redirectTo:'/home',pathMatch:'full'}`\n\n### 示例\n1，在 `cmd` 环境中，使用命令 `ng new learn-route --rouing` 创建 `learn-route` 项目\n\n2，`cd learn-route` 进入 `learn-route` 目录下，使用命令 `ng g c home` 创建 `home` 组件，使用命令 `ng g c joke` 创建 `joke` 组件\n\n其 `learn-route` 项目部分代码如下所示。\n\napp.module.ts\n```typescript\n....//代码块\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\nimport { JokeComponent } from './joke/joke.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    JokeComponent\n  ],\n..../代码块\n```\n\napp-routing.mdule.ts\n```typescript\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n```\napp.component.html\n```HTML\n<!-- 代码块 -->\n<router-outlet></router-outlet>\n```\n\n3，修改代码，如下所示。\napp-routing.module.ts\n```typescript\n....//代码块\nimport { HomeComponent } from './home/home.component';\nimport { JokeComponent } from './joke/joke.component';\n\nconst routes: Routes = [\n  {path:'',redirectTo:'home',pathMatch:'full'},\n  {path:'home',component:HomeComponent},\n  {path:'joke',component:JokeComponent}\n];\n....//代码块\n```\n\napp.component.html\n```HTML\n<!-- 代码块 -->\nul class=\"nav navbar-nav\">\n  <!-- routerLink的两种写法 -->  \n  <li routerLinkActive=\"active\"><a routerLink='/home'>Home</a></li>\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/joke']\">Joke</a></li>\n</ul>\n<!-- 代码块 -->\n<div class=\"container\"><router-outlet></router-outlet></div>\n```\n\n页面效果图如下所示\n\n![home路由](https://bingolil.github.io/images/angular-route-home.png)\n\n![joke路由](https://bingolil.github.io/images/angular-route-joke.png)\n\n## 懒加载\n###  优势\n> **模块化管理：** 在实际的 `Angular` 项目中，可能存在几十上百的组件，每一个组件都会在组件所属的模块里面声明，若项目所有的组件都在根模块 `app.moudle.ts` 里面声明，那会导致根模块代码庞大，并且不易管理，使用 `懒加载` 时，将相关的组件放到同一个模块，组件在该模块声明，开发者需要修改这个模块的代码时，直接在项目中找这个模块即可。\n\n\n> **用户体验：** `Angular` 开发的项目是单页面应用，在实际的 `Angular` 项目中，由于 `Angular` 项目过于庞大，如果不采用 `懒加载` 模式，用户进入到项目的页面时，浏览器会请求整个项目的文件，这会导致项目的页面打开速度过慢\n\n### 示例\n1，在 `cmd` 环境下使用命令 `ng g m poduct --routing` 生成需要懒加载的 `product` 模块，该命令还会自动生成懒加载模块的路由配置信息文件 `product-routing.module.ts`\n\n2，使用命令 `ng g c product/list` 在 `product` 模块下生成 `lsit组件`\n\n项目部分代码如下所示。\nproduct.module.ts\n```typescript\n....//代码块\nimport { ProductRoutingModule } from './product-routing.module';\nimport { ListComponent } from './list/list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ProductRoutingModule\n  ],\n....//代码块\n```\n\nproduct-routing.module.ts\n```typescript\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n....//代码块\n```\n\n3，修改代码如下所示\napp.component.html\n```HTML\n<!-- 代码块 -->\n<ul class=\"nav navbar-nav\">\n  <li routerLinkActive=\"active\"><a routerLink='/home'>Home</a></li>\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/joke']\">Joke</a></li>\n  <!-- 新增链接 -->\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/prodcut']\">Product</a></li>\n</ul>\n<!-- 代码块 -->\n<div class=\"container\"><router-outlet></router-outlet></div>\n```\n\napp-routing.module.ts\n```typescript\n....//代码块\nconst routes: Routes = [\n  {path:'',redirectTo:'home',pathMatch:'full'},\n  {path:'home',component:HomeComponent},\n  {path:'joke',component:JokeComponent},\n  //惰性加载路由\n  {path:'product',loadChildren:'./product/product.module#ProductModule'}\n];\n....//代码块\n```\n\nproduct-routing.module.ts\n```typescript\n....//代码块\nimport { ListComponent } from './list/list.component';\n\nconst routes: Routes = [\n  {path:'',component:ListComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n....//代码块\n```\n\n其页面效果图如下所示\n\n![home路由请求的文件](https://bingolil.github.io/images/angular-lazy-home.png)\n\n![product路由请求的文件](https://bingolil.github.io/images/angular-lazy-product.png)\n\n4，对照上面两张图片，在 `home` 路由中请求文件和 `product` 路由中请求的文件有一定的区别，在 `product` 路由中多请求了 `product-product-module.js` 文件。即用户进入项目页面时，不会请求项目所有的文件，这提高了项目的用户体验，同时还可以将和 `product` 模块相关的组件或服务放到项目文件中的 `product` 文件夹下，进行模块化管理。\n\n> **注意：** 若初始化路由重定向路由到 `product` 下，那么 `product-product-module.js` 文件一开始就会被加载，因为 `product` 路由对应的文件中存在 `product-product-module.js` 文件\n\n## 子路由\n在实际 `Angular` 项目中，路由不止一层，即路由还会嵌套路由，被嵌套的路由就是子路由，又或者叫二级路由。\n### 意义\n在 `惰性加载` 的模块 `setting` 中，存在 `product` 和 `joke` 两个页面，分别用 `setting/product` 路由和 `setting/joke` 进行管理，两个页面有一部分内容是相同的，若两个页面使用两个组件完成 `setting` 下的所有内容，那么两个页面相同的部分被实现两次，这显然增加了开发者的负担。这时，可以使用子路由解决，即路由嵌套路由。\n### 示例解决\n1，使用命令 `ng g m setting --routing` 创建 `setting` 模块\n\n2，使用命令 `ng g c setting/layout`，`ng g c setting/product` 和 `ng g c setting/joke` 创建 `layout` 组件，`product` 组件和 `joke` 组件\n\n3，修改代码如下所示。\napp.component.html\n```HTML\n<!-- 代码块 -->\n<ul class=\"nav navbar-nav\">\n  <li routerLinkActive=\"active\"><a routerLink='/home'>Home</a></li>\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/joke']\">Joke</a></li>\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/prodcut']\">Product</a></li>\n  <!-- 新增链接 -->\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/setting']\">setting</a></li>\n</ul>\n<!-- 代码块 -->\n<div class=\"container\"><router-outlet></router-outlet></div>\n```\n\napp-routing.module.ts\n```typescript\nconst routes: Routes = [\n  {path:'',redirectTo:'home',pathMatch:'full'},\n  {path:'home',component:HomeComponent},\n  {path:'joke',component:JokeComponent},\n  {path:'product',loadChildren:'./product/product.module#ProductModule'},\n  //新增setting路由\n  {path:'setting',loadChildren:'./setting/setting.module#SettingModule'}\n];\n```\n\nproduct/setting-routing.module.ts\n```ts\n....//代码块\nimport { LayoutComponent } from './layout/layout.component';\nimport { ProductComponent } from './product/product.component';\nimport { JokeComponent } from './joke/joke.component';\n\nconst routes: Routes = [\n  {path:'',component:LayoutComponent,\n    children:[ //子路由\n      {path:'',redirectTo:'product',pathMatch:'full'},\n      {path:'product',component:ProductComponent},\n      {path:'joke',component:JokeComponent}\n    ]\n  }\n];\n....//代码块\n```\n\nproduct/laout/layout.component.html\n```HTML\n<div class=\"jumbotron\"><h1>共享部分</h1></div>\n<ul class=\"nav nav-tabs\">\n  <li routerLinkActive=\"active\"><a routerLink=\"product\">product</a></li>\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['joke']\">joke</a></li>\n</ul>\n<!-- 子路由占位符 -->\n<router-outlet></router-outlet>\n```\n\n其页面效果图如下所示\n\n![setting/product路由](https://bingolil.github.io/images/angular-setting-1.png)\n\n\n![setting/joke路由](https://bingolil.github.io/images/angular-setting-2.png)\n\n其中共享部分可以做成一个组件，该组件在 `setting` 模块中声明，在 `product/laout/layout.component.html` 中引用也可以达到同样的效果。\n\n## 预加载\n### 意义\n在 `Agnular` 项目中，使用 `懒加载` 时有助于提高用户体验和模块化管理项目。\n\n假如现在有一个新的模块 `prod`，开发者使用懒加载模式加载这个模块。但是开发者可以预见 `prod` 模块会被用户频繁浏览（用户初始进入项目是 `home` 路由，然后大部分用户会浏览 `prod` 模块），在加载时 `prod` 模块时，浏览器会停顿一小段时间（需要加载 `prod` 模块对应的文件），这会对降低用户体验，而预加载就是解决浏览器停顿这一小段时间的方法。\n\n### 代码准备\n\n使用命令 `ng g m prod --routing` 新建 `prod` 模块，然后使用命令 `ng g c prod/layout` 在  `prod` 模块下新建 `layout` 组件。最后修改代码如下所示。\n\napp-routing.module.ts\n```typescript\n....//代码块\nconst routes: Routes = [\n  {path:'',redirectTo:'home',pathMatch:'full'},\n  {path:'home',component:HomeComponent},\n  {path:'joke',component:JokeComponent},\n  {path:'product',loadChildren:'./product/product.module#ProductModule'},\n  {path:'setting',loadChildren:'./setting/setting.module#SettingModule'},\n  //新增路由\n  {path:'prod',loadChildren:'./prod/prod.module#ProdModule'}\n];\n....//代码块\n```\n\napp.component.html\n```HTML\n<!-- 代码块 -->\n<ul class=\"nav navbar-nav\">\n  <li routerLinkActive=\"active\"><a routerLink='/home'>Home</a></li>\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/joke']\">Joke</a></li>\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/prodcut']\">Product</a></li>\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/setting']\">setting</a></li>\n  <!-- 新增链接 -->\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/prod']\">prod</a></li>\n</ul>\n<!-- 代码块 -->\n<div class=\"container\"><router-outlet></router-outlet></div>\n```\n\nprod-routing.module.ts\n```typescript\n....//代码块\nimport { LayoutComponent } from './layout/layout.component';\nconst routes: Routes = [\n  {path:'',component:LayoutComponent}\n];\n....//代码块\n```\n\n### 自带预加载策略\n`Angular` 对于项目的预加载功能有一个自带的策略。其代码如下。\napp-routing.module.ts\n```typescript\nimport { Routes, RouterModule, PreloadAllModules } from '@angular/router';\n....//代码块\n@NgModule({\n  imports: [RouterModule.forRoot(routes,{ preloadingStrategy:  PreloadAllModules })],\n  exports: [RouterModule]\n})\n....//代码块\n```\n\n在 `Angular` 项目中，使用 `Angular` 自带的预加载策略时， 只需要修改 `app-routing.module.ts` 根路由文件，在根路由文件中引入 `PreloadAllModules` 模块，并在根文件中如上使用即可。\n\n其效果图如下所示。\n\n![](https://bingolil.github.io/images/angular-allprod.png)\n\n在 `app-routing.module.ts` 文件中，加载模块的模式是 `懒加载` 模式，但是由于使用了 `预加载`，从上图中可以看到在 `home` 路由时，项目加载了对应 `prod` 路由下的 `prod-prod-module.js` 文件，说明 `Angular` 自带的预加载策略使用成功。\n\n但在上图中，可以看到由于使用了预加载，加载了所有的懒加载模块，这是 `Angular` 自带加载策略的一个缺陷。\n\n对于 `Angular` 预加载，开发者可以定义符合开发者需求的预加载策略，即自定义预加载\n\n### 自定义预加载\n1，使用命令 `ng g s own-prod` 新建一个服务，修改 `own-prod.service.ts` 文件如下所示。\n\nown-prod.service.ts\n```typescript\nimport { Injectable } from '@angular/core';\nimport { Route, PreloadingStrategy } from '@angular/router';\nimport { Observable, of } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class OwnProdService implements PreloadingStrategy{\n  preload(route: Route, load: () => Observable<any>): Observable<any> {\n    if (route.data && route.data['preload']) {\n      return load();\n    } else {\n      return of(null);\n    }\n  }\n}\n```\n\n在根路由中使用上面新建的服务，`app-routing.module.ts` 代码如下所示。\n\n```typescript\n....//代码块\nimport { OwnProdService } from './own-prod.service'\n\nconst routes: Routes = [\n  {path:'',redirectTo:'home',pathMatch:'full'},\n  {path:'home',component:HomeComponent},\n  {path:'joke',component:JokeComponent},\n  {path:'product',loadChildren:'./product/product.module#ProductModule'},\n  {path:'setting',loadChildren:'./setting/setting.module#SettingModule'},\n  //根据路由中data的preload的true或false判断是否预加载\n  {path:'prod',loadChildren:'./prod/prod.module#ProdModule',data:{preload:true}}\n];\n\n@NgModule({                                                    //使用服务\n  imports: [RouterModule.forRoot(routes,{ preloadingStrategy:  OwnProdService })],\n....//代码块\n```\n\n使用自定义预加载后，在浏览器中效果图如下所示。\n![](https://bingolil.github.io/images/angular-route-prod.png)\n\n\n\n\n\n\n","source":"_posts/angular/learn-4.md","raw":"title: Angular学习-4-路由1\ncategories: Angular\ndate: 2018-12-10\ntags: [Angular,Angular路由]\ndescription: 在单页应用中，你可以通过显示或隐藏与特定组件相对应的部分来更改用户看到的内容，而不用去服务器获取新页面。用户执行应用程序任务时，他们需要在定义好的不同视图之间移动。\n---\n`路由` 在 `Angular` 中是一个非常重要的模块，一个好的路由对项目的开发有着巨大的促进作用。\n\n`Angular` 是单页面应用，在用户使用程序时，`Angular` 的 `路由` 能让用户从一个视图导航到另一个视图。\n## 基本路由\n### 路由配置文件\n在 `Angular` 项目中，`Angular` 的路由配置信息一般存放在单独的文件中（如xxxx-routing.module.ts），当然，放到 `Angular` 的模块中也可以。\n\n一般来说，存放路由配置信息的文件的生成方式有两种，一是手动生成，一是通过命令自动生成。\n> **手动生成**\n\n在 `Angular` 项目的app文件夹目录下，手动新建一个文件，名为 `app-routing.module.ts`，将路由配置信息放到该文件中。需要开发者在跟模块 `AppModule` 里面引用路由配置信息模块。\n\n> **自动生成**\n\n在 `cmd` 环境中，新建项目时，增加一个 `--routing` 的参数，如下所示：\n\n```\nng new 项目名 --routing\n```\n\n使用该命令创建项目，会在项目文件夹 `app` 下面生成 `app-routing.module.ts` 文件。\n\n由于是使用命令生成的路由配置信息文件，`app-routing.module.ts` 文件中的 `AppRoutingModule` 模块自动被 `AppModule` 根模块 `import` 了，不需要开发者在 `AppModule` 根模块里面去手动引用路由模块；`app.component.html` 页面中 `router-outlet` 占位符也会自动生成。 \n\n开发者在使用 `懒加载` 时，需要新建一个模块，新建的模块里面也存在路由，开发者也可以使用命令在创建模块时自动生成路由信息配置文件，其命令如下所示：\n\n```\nng g m 模块名 --routing  //最简写法\n```\n\n### 路由相关属性\n`Angular` 的路由中涉及到许多的属性，如下所示。\n\n> **Rotues：** 存在于路由模块中，存放路由配置信息，即那个 `Url` 对应那个组件以及在那个 `outlet-outlet` 中展示组件，其用法: `const routes: Routes = [ 配置信息 ]`\n\n> **router-outlet：** 该属性是组件UI中的路由占位符，存在于组件UI中，其用法：`<router-outlet></router-outlet>`\n\n> **routerLink：** 在组件UI中负责路由跳转，存在于组件UI中，其用法：`1，<a routerKink=\"xxx\">xxxx</a>`，`2，<a [routerKink]=\"['xxx']\">xxxx</a>`\n\n> **routerLinkActive：** 当前路由被激活时的样式，存在于组件UI中，其用法：`<a routerLinkActive='active' routerKink=\"['xxx']\">xxxx</a>`，即当前路由激活时，给当前 `a标签` 增加 `active` 样式类\n\n> **Router：** 负责在运行时执行的路由对象，可以通过其 `navigate()`  方法和 `navigateByUrl()` 方法进行路由跳转，`Router` 是一个类，在使用时，需要实例化，其用法：`Router.navigate(['/xxx'])`\n\n> **ActivedRoute：** 代表当前激活的路由对象，保存当前路由的 `URL` 以及路由参数，这是一个类，在使用时，需要实例化，其用法：`1，参数订阅 ActivedRoute.params.subscribe((data)=>{})`，`2，参数快照 ActivedRoute..snapshot.queryParams[\"id\"]`\n\n> **useHash：** 其路由使用哈希展现，即多了一个 `#` 号，存在于根配置信息文件 `app-routing.module.ts` 中，其用法：`RouterModule.forRoot(routes,{useHash:true})`\n\n> **redirectTo：** 路由重定向，一般存在于根路由配置文件 `app-routing.module.ts` 中，其用法：`{path:'',redirectTo:'/home',pathMatch:'full'}`，即当前路由为空时，转到路由为 `home` 的页面\n\n> **pathMatch：** 路由完全匹配，一般存在于根路由配置 `app-routing.module.ts` 文件中，其用法：`{path:'',redirectTo:'/home',pathMatch:'full'}`\n\n### 示例\n1，在 `cmd` 环境中，使用命令 `ng new learn-route --rouing` 创建 `learn-route` 项目\n\n2，`cd learn-route` 进入 `learn-route` 目录下，使用命令 `ng g c home` 创建 `home` 组件，使用命令 `ng g c joke` 创建 `joke` 组件\n\n其 `learn-route` 项目部分代码如下所示。\n\napp.module.ts\n```typescript\n....//代码块\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\nimport { JokeComponent } from './joke/joke.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    JokeComponent\n  ],\n..../代码块\n```\n\napp-routing.mdule.ts\n```typescript\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n```\napp.component.html\n```HTML\n<!-- 代码块 -->\n<router-outlet></router-outlet>\n```\n\n3，修改代码，如下所示。\napp-routing.module.ts\n```typescript\n....//代码块\nimport { HomeComponent } from './home/home.component';\nimport { JokeComponent } from './joke/joke.component';\n\nconst routes: Routes = [\n  {path:'',redirectTo:'home',pathMatch:'full'},\n  {path:'home',component:HomeComponent},\n  {path:'joke',component:JokeComponent}\n];\n....//代码块\n```\n\napp.component.html\n```HTML\n<!-- 代码块 -->\nul class=\"nav navbar-nav\">\n  <!-- routerLink的两种写法 -->  \n  <li routerLinkActive=\"active\"><a routerLink='/home'>Home</a></li>\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/joke']\">Joke</a></li>\n</ul>\n<!-- 代码块 -->\n<div class=\"container\"><router-outlet></router-outlet></div>\n```\n\n页面效果图如下所示\n\n![home路由](https://bingolil.github.io/images/angular-route-home.png)\n\n![joke路由](https://bingolil.github.io/images/angular-route-joke.png)\n\n## 懒加载\n###  优势\n> **模块化管理：** 在实际的 `Angular` 项目中，可能存在几十上百的组件，每一个组件都会在组件所属的模块里面声明，若项目所有的组件都在根模块 `app.moudle.ts` 里面声明，那会导致根模块代码庞大，并且不易管理，使用 `懒加载` 时，将相关的组件放到同一个模块，组件在该模块声明，开发者需要修改这个模块的代码时，直接在项目中找这个模块即可。\n\n\n> **用户体验：** `Angular` 开发的项目是单页面应用，在实际的 `Angular` 项目中，由于 `Angular` 项目过于庞大，如果不采用 `懒加载` 模式，用户进入到项目的页面时，浏览器会请求整个项目的文件，这会导致项目的页面打开速度过慢\n\n### 示例\n1，在 `cmd` 环境下使用命令 `ng g m poduct --routing` 生成需要懒加载的 `product` 模块，该命令还会自动生成懒加载模块的路由配置信息文件 `product-routing.module.ts`\n\n2，使用命令 `ng g c product/list` 在 `product` 模块下生成 `lsit组件`\n\n项目部分代码如下所示。\nproduct.module.ts\n```typescript\n....//代码块\nimport { ProductRoutingModule } from './product-routing.module';\nimport { ListComponent } from './list/list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ProductRoutingModule\n  ],\n....//代码块\n```\n\nproduct-routing.module.ts\n```typescript\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n....//代码块\n```\n\n3，修改代码如下所示\napp.component.html\n```HTML\n<!-- 代码块 -->\n<ul class=\"nav navbar-nav\">\n  <li routerLinkActive=\"active\"><a routerLink='/home'>Home</a></li>\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/joke']\">Joke</a></li>\n  <!-- 新增链接 -->\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/prodcut']\">Product</a></li>\n</ul>\n<!-- 代码块 -->\n<div class=\"container\"><router-outlet></router-outlet></div>\n```\n\napp-routing.module.ts\n```typescript\n....//代码块\nconst routes: Routes = [\n  {path:'',redirectTo:'home',pathMatch:'full'},\n  {path:'home',component:HomeComponent},\n  {path:'joke',component:JokeComponent},\n  //惰性加载路由\n  {path:'product',loadChildren:'./product/product.module#ProductModule'}\n];\n....//代码块\n```\n\nproduct-routing.module.ts\n```typescript\n....//代码块\nimport { ListComponent } from './list/list.component';\n\nconst routes: Routes = [\n  {path:'',component:ListComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n....//代码块\n```\n\n其页面效果图如下所示\n\n![home路由请求的文件](https://bingolil.github.io/images/angular-lazy-home.png)\n\n![product路由请求的文件](https://bingolil.github.io/images/angular-lazy-product.png)\n\n4，对照上面两张图片，在 `home` 路由中请求文件和 `product` 路由中请求的文件有一定的区别，在 `product` 路由中多请求了 `product-product-module.js` 文件。即用户进入项目页面时，不会请求项目所有的文件，这提高了项目的用户体验，同时还可以将和 `product` 模块相关的组件或服务放到项目文件中的 `product` 文件夹下，进行模块化管理。\n\n> **注意：** 若初始化路由重定向路由到 `product` 下，那么 `product-product-module.js` 文件一开始就会被加载，因为 `product` 路由对应的文件中存在 `product-product-module.js` 文件\n\n## 子路由\n在实际 `Angular` 项目中，路由不止一层，即路由还会嵌套路由，被嵌套的路由就是子路由，又或者叫二级路由。\n### 意义\n在 `惰性加载` 的模块 `setting` 中，存在 `product` 和 `joke` 两个页面，分别用 `setting/product` 路由和 `setting/joke` 进行管理，两个页面有一部分内容是相同的，若两个页面使用两个组件完成 `setting` 下的所有内容，那么两个页面相同的部分被实现两次，这显然增加了开发者的负担。这时，可以使用子路由解决，即路由嵌套路由。\n### 示例解决\n1，使用命令 `ng g m setting --routing` 创建 `setting` 模块\n\n2，使用命令 `ng g c setting/layout`，`ng g c setting/product` 和 `ng g c setting/joke` 创建 `layout` 组件，`product` 组件和 `joke` 组件\n\n3，修改代码如下所示。\napp.component.html\n```HTML\n<!-- 代码块 -->\n<ul class=\"nav navbar-nav\">\n  <li routerLinkActive=\"active\"><a routerLink='/home'>Home</a></li>\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/joke']\">Joke</a></li>\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/prodcut']\">Product</a></li>\n  <!-- 新增链接 -->\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/setting']\">setting</a></li>\n</ul>\n<!-- 代码块 -->\n<div class=\"container\"><router-outlet></router-outlet></div>\n```\n\napp-routing.module.ts\n```typescript\nconst routes: Routes = [\n  {path:'',redirectTo:'home',pathMatch:'full'},\n  {path:'home',component:HomeComponent},\n  {path:'joke',component:JokeComponent},\n  {path:'product',loadChildren:'./product/product.module#ProductModule'},\n  //新增setting路由\n  {path:'setting',loadChildren:'./setting/setting.module#SettingModule'}\n];\n```\n\nproduct/setting-routing.module.ts\n```ts\n....//代码块\nimport { LayoutComponent } from './layout/layout.component';\nimport { ProductComponent } from './product/product.component';\nimport { JokeComponent } from './joke/joke.component';\n\nconst routes: Routes = [\n  {path:'',component:LayoutComponent,\n    children:[ //子路由\n      {path:'',redirectTo:'product',pathMatch:'full'},\n      {path:'product',component:ProductComponent},\n      {path:'joke',component:JokeComponent}\n    ]\n  }\n];\n....//代码块\n```\n\nproduct/laout/layout.component.html\n```HTML\n<div class=\"jumbotron\"><h1>共享部分</h1></div>\n<ul class=\"nav nav-tabs\">\n  <li routerLinkActive=\"active\"><a routerLink=\"product\">product</a></li>\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['joke']\">joke</a></li>\n</ul>\n<!-- 子路由占位符 -->\n<router-outlet></router-outlet>\n```\n\n其页面效果图如下所示\n\n![setting/product路由](https://bingolil.github.io/images/angular-setting-1.png)\n\n\n![setting/joke路由](https://bingolil.github.io/images/angular-setting-2.png)\n\n其中共享部分可以做成一个组件，该组件在 `setting` 模块中声明，在 `product/laout/layout.component.html` 中引用也可以达到同样的效果。\n\n## 预加载\n### 意义\n在 `Agnular` 项目中，使用 `懒加载` 时有助于提高用户体验和模块化管理项目。\n\n假如现在有一个新的模块 `prod`，开发者使用懒加载模式加载这个模块。但是开发者可以预见 `prod` 模块会被用户频繁浏览（用户初始进入项目是 `home` 路由，然后大部分用户会浏览 `prod` 模块），在加载时 `prod` 模块时，浏览器会停顿一小段时间（需要加载 `prod` 模块对应的文件），这会对降低用户体验，而预加载就是解决浏览器停顿这一小段时间的方法。\n\n### 代码准备\n\n使用命令 `ng g m prod --routing` 新建 `prod` 模块，然后使用命令 `ng g c prod/layout` 在  `prod` 模块下新建 `layout` 组件。最后修改代码如下所示。\n\napp-routing.module.ts\n```typescript\n....//代码块\nconst routes: Routes = [\n  {path:'',redirectTo:'home',pathMatch:'full'},\n  {path:'home',component:HomeComponent},\n  {path:'joke',component:JokeComponent},\n  {path:'product',loadChildren:'./product/product.module#ProductModule'},\n  {path:'setting',loadChildren:'./setting/setting.module#SettingModule'},\n  //新增路由\n  {path:'prod',loadChildren:'./prod/prod.module#ProdModule'}\n];\n....//代码块\n```\n\napp.component.html\n```HTML\n<!-- 代码块 -->\n<ul class=\"nav navbar-nav\">\n  <li routerLinkActive=\"active\"><a routerLink='/home'>Home</a></li>\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/joke']\">Joke</a></li>\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/prodcut']\">Product</a></li>\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/setting']\">setting</a></li>\n  <!-- 新增链接 -->\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/prod']\">prod</a></li>\n</ul>\n<!-- 代码块 -->\n<div class=\"container\"><router-outlet></router-outlet></div>\n```\n\nprod-routing.module.ts\n```typescript\n....//代码块\nimport { LayoutComponent } from './layout/layout.component';\nconst routes: Routes = [\n  {path:'',component:LayoutComponent}\n];\n....//代码块\n```\n\n### 自带预加载策略\n`Angular` 对于项目的预加载功能有一个自带的策略。其代码如下。\napp-routing.module.ts\n```typescript\nimport { Routes, RouterModule, PreloadAllModules } from '@angular/router';\n....//代码块\n@NgModule({\n  imports: [RouterModule.forRoot(routes,{ preloadingStrategy:  PreloadAllModules })],\n  exports: [RouterModule]\n})\n....//代码块\n```\n\n在 `Angular` 项目中，使用 `Angular` 自带的预加载策略时， 只需要修改 `app-routing.module.ts` 根路由文件，在根路由文件中引入 `PreloadAllModules` 模块，并在根文件中如上使用即可。\n\n其效果图如下所示。\n\n![](https://bingolil.github.io/images/angular-allprod.png)\n\n在 `app-routing.module.ts` 文件中，加载模块的模式是 `懒加载` 模式，但是由于使用了 `预加载`，从上图中可以看到在 `home` 路由时，项目加载了对应 `prod` 路由下的 `prod-prod-module.js` 文件，说明 `Angular` 自带的预加载策略使用成功。\n\n但在上图中，可以看到由于使用了预加载，加载了所有的懒加载模块，这是 `Angular` 自带加载策略的一个缺陷。\n\n对于 `Angular` 预加载，开发者可以定义符合开发者需求的预加载策略，即自定义预加载\n\n### 自定义预加载\n1，使用命令 `ng g s own-prod` 新建一个服务，修改 `own-prod.service.ts` 文件如下所示。\n\nown-prod.service.ts\n```typescript\nimport { Injectable } from '@angular/core';\nimport { Route, PreloadingStrategy } from '@angular/router';\nimport { Observable, of } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class OwnProdService implements PreloadingStrategy{\n  preload(route: Route, load: () => Observable<any>): Observable<any> {\n    if (route.data && route.data['preload']) {\n      return load();\n    } else {\n      return of(null);\n    }\n  }\n}\n```\n\n在根路由中使用上面新建的服务，`app-routing.module.ts` 代码如下所示。\n\n```typescript\n....//代码块\nimport { OwnProdService } from './own-prod.service'\n\nconst routes: Routes = [\n  {path:'',redirectTo:'home',pathMatch:'full'},\n  {path:'home',component:HomeComponent},\n  {path:'joke',component:JokeComponent},\n  {path:'product',loadChildren:'./product/product.module#ProductModule'},\n  {path:'setting',loadChildren:'./setting/setting.module#SettingModule'},\n  //根据路由中data的preload的true或false判断是否预加载\n  {path:'prod',loadChildren:'./prod/prod.module#ProdModule',data:{preload:true}}\n];\n\n@NgModule({                                                    //使用服务\n  imports: [RouterModule.forRoot(routes,{ preloadingStrategy:  OwnProdService })],\n....//代码块\n```\n\n使用自定义预加载后，在浏览器中效果图如下所示。\n![](https://bingolil.github.io/images/angular-route-prod.png)\n\n\n\n\n\n\n","slug":"angular/learn-4","published":1,"updated":"2021-11-24T01:13:08.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwe931l0000uycsz4mex0fql","content":"<p><code>路由</code> 在 <code>Angular</code> 中是一个非常重要的模块，一个好的路由对项目的开发有着巨大的促进作用。</p>\n<p><code>Angular</code> 是单页面应用，在用户使用程序时，<code>Angular</code> 的 <code>路由</code> 能让用户从一个视图导航到另一个视图。</p>\n<h2 id=\"基本路由\"><a href=\"#基本路由\" class=\"headerlink\" title=\"基本路由\"></a>基本路由</h2><h3 id=\"路由配置文件\"><a href=\"#路由配置文件\" class=\"headerlink\" title=\"路由配置文件\"></a>路由配置文件</h3><p>在 <code>Angular</code> 项目中，<code>Angular</code> 的路由配置信息一般存放在单独的文件中（如xxxx-routing.module.ts），当然，放到 <code>Angular</code> 的模块中也可以。</p>\n<p>一般来说，存放路由配置信息的文件的生成方式有两种，一是手动生成，一是通过命令自动生成。</p>\n<blockquote>\n<p><strong>手动生成</strong></p>\n</blockquote>\n<p>在 <code>Angular</code> 项目的app文件夹目录下，手动新建一个文件，名为 <code>app-routing.module.ts</code>，将路由配置信息放到该文件中。需要开发者在跟模块 <code>AppModule</code> 里面引用路由配置信息模块。</p>\n<blockquote>\n<p><strong>自动生成</strong></p>\n</blockquote>\n<p>在 <code>cmd</code> 环境中，新建项目时，增加一个 <code>--routing</code> 的参数，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new 项目名 --routing</span><br></pre></td></tr></table></figure>\n\n<p>使用该命令创建项目，会在项目文件夹 <code>app</code> 下面生成 <code>app-routing.module.ts</code> 文件。</p>\n<p>由于是使用命令生成的路由配置信息文件，<code>app-routing.module.ts</code> 文件中的 <code>AppRoutingModule</code> 模块自动被 <code>AppModule</code> 根模块 <code>import</code> 了，不需要开发者在 <code>AppModule</code> 根模块里面去手动引用路由模块；<code>app.component.html</code> 页面中 <code>router-outlet</code> 占位符也会自动生成。 </p>\n<p>开发者在使用 <code>懒加载</code> 时，需要新建一个模块，新建的模块里面也存在路由，开发者也可以使用命令在创建模块时自动生成路由信息配置文件，其命令如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m 模块名 --routing  //最简写法</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路由相关属性\"><a href=\"#路由相关属性\" class=\"headerlink\" title=\"路由相关属性\"></a>路由相关属性</h3><p><code>Angular</code> 的路由中涉及到许多的属性，如下所示。</p>\n<blockquote>\n<p><strong>Rotues：</strong> 存在于路由模块中，存放路由配置信息，即那个 <code>Url</code> 对应那个组件以及在那个 <code>outlet-outlet</code> 中展示组件，其用法: <code>const routes: Routes = [ 配置信息 ]</code></p>\n</blockquote>\n<blockquote>\n<p><strong>router-outlet：</strong> 该属性是组件UI中的路由占位符，存在于组件UI中，其用法：<code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code></p>\n</blockquote>\n<blockquote>\n<p><strong>routerLink：</strong> 在组件UI中负责路由跳转，存在于组件UI中，其用法：<code>1，&lt;a routerKink=&quot;xxx&quot;&gt;xxxx&lt;/a&gt;</code>，<code>2，&lt;a [routerKink]=&quot;[&#39;xxx&#39;]&quot;&gt;xxxx&lt;/a&gt;</code></p>\n</blockquote>\n<blockquote>\n<p><strong>routerLinkActive：</strong> 当前路由被激活时的样式，存在于组件UI中，其用法：<code>&lt;a routerLinkActive=&#39;active&#39; routerKink=&quot;[&#39;xxx&#39;]&quot;&gt;xxxx&lt;/a&gt;</code>，即当前路由激活时，给当前 <code>a标签</code> 增加 <code>active</code> 样式类</p>\n</blockquote>\n<blockquote>\n<p><strong>Router：</strong> 负责在运行时执行的路由对象，可以通过其 <code>navigate()</code>  方法和 <code>navigateByUrl()</code> 方法进行路由跳转，<code>Router</code> 是一个类，在使用时，需要实例化，其用法：<code>Router.navigate([&#39;/xxx&#39;])</code></p>\n</blockquote>\n<blockquote>\n<p><strong>ActivedRoute：</strong> 代表当前激活的路由对象，保存当前路由的 <code>URL</code> 以及路由参数，这是一个类，在使用时，需要实例化，其用法：<code>1，参数订阅 ActivedRoute.params.subscribe((data)=&gt;&#123;&#125;)</code>，<code>2，参数快照 ActivedRoute..snapshot.queryParams[&quot;id&quot;]</code></p>\n</blockquote>\n<blockquote>\n<p><strong>useHash：</strong> 其路由使用哈希展现，即多了一个 <code>#</code> 号，存在于根配置信息文件 <code>app-routing.module.ts</code> 中，其用法：<code>RouterModule.forRoot(routes,&#123;useHash:true&#125;)</code></p>\n</blockquote>\n<blockquote>\n<p><strong>redirectTo：</strong> 路由重定向，一般存在于根路由配置文件 <code>app-routing.module.ts</code> 中，其用法：<code>&#123;path:&#39;&#39;,redirectTo:&#39;/home&#39;,pathMatch:&#39;full&#39;&#125;</code>，即当前路由为空时，转到路由为 <code>home</code> 的页面</p>\n</blockquote>\n<blockquote>\n<p><strong>pathMatch：</strong> 路由完全匹配，一般存在于根路由配置 <code>app-routing.module.ts</code> 文件中，其用法：<code>&#123;path:&#39;&#39;,redirectTo:&#39;/home&#39;,pathMatch:&#39;full&#39;&#125;</code></p>\n</blockquote>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>1，在 <code>cmd</code> 环境中，使用命令 <code>ng new learn-route --rouing</code> 创建 <code>learn-route</code> 项目</p>\n<p>2，<code>cd learn-route</code> 进入 <code>learn-route</code> 目录下，使用命令 <code>ng g c home</code> 创建 <code>home</code> 组件，使用命令 <code>ng g c joke</code> 创建 <code>joke</code> 组件</p>\n<p>其 <code>learn-route</code> 项目部分代码如下所示。</p>\n<p>app.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppRoutingModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HomeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./home/home.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; JokeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./joke/joke.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    AppComponent,</span><br><span class=\"line\">    HomeComponent,</span><br><span class=\"line\">    JokeComponent</span><br><span class=\"line\">  ],</span><br><span class=\"line\">..../代码块</span><br></pre></td></tr></table></figure>\n\n<p>app-routing.mdule.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [RouterModule.forRoot(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppRoutingModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3，修改代码，如下所示。<br>app-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HomeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./home/home.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; JokeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./joke/joke.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">&#x27;full&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">component</span>:HomeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;joke&#x27;</span>,<span class=\"attr\">component</span>:JokeComponent&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\">ul class=&quot;nav navbar-nav&quot;&gt;</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- routerLink的两种写法 --&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/joke&#x27;]&quot;</span>&gt;</span>Joke<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>页面效果图如下所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-route-home.png\" alt=\"home路由\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-route-joke.png\" alt=\"joke路由\"></p>\n<h2 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h2><h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><blockquote>\n<p><strong>模块化管理：</strong> 在实际的 <code>Angular</code> 项目中，可能存在几十上百的组件，每一个组件都会在组件所属的模块里面声明，若项目所有的组件都在根模块 <code>app.moudle.ts</code> 里面声明，那会导致根模块代码庞大，并且不易管理，使用 <code>懒加载</code> 时，将相关的组件放到同一个模块，组件在该模块声明，开发者需要修改这个模块的代码时，直接在项目中找这个模块即可。</p>\n</blockquote>\n<blockquote>\n<p><strong>用户体验：</strong> <code>Angular</code> 开发的项目是单页面应用，在实际的 <code>Angular</code> 项目中，由于 <code>Angular</code> 项目过于庞大，如果不采用 <code>懒加载</code> 模式，用户进入到项目的页面时，浏览器会请求整个项目的文件，这会导致项目的页面打开速度过慢</p>\n</blockquote>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>1，在 <code>cmd</code> 环境下使用命令 <code>ng g m poduct --routing</code> 生成需要懒加载的 <code>product</code> 模块，该命令还会自动生成懒加载模块的路由配置信息文件 <code>product-routing.module.ts</code></p>\n<p>2，使用命令 <code>ng g c product/list</code> 在 <code>product</code> 模块下生成 <code>lsit组件</code></p>\n<p>项目部分代码如下所示。<br>product.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ProductRoutingModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./product-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ListComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./list/list.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    CommonModule,</span><br><span class=\"line\">    ProductRoutingModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>product-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [RouterModule.forChild(routes)],</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>3，修改代码如下所示<br>app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/joke&#x27;]&quot;</span>&gt;</span>Joke<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 新增链接 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/prodcut&#x27;]&quot;</span>&gt;</span>Product<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>app-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">&#x27;full&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">component</span>:HomeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;joke&#x27;</span>,<span class=\"attr\">component</span>:JokeComponent&#125;,</span><br><span class=\"line\">  <span class=\"comment\">//惰性加载路由</span></span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;product&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./product/product.module#ProductModule&#x27;</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>product-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ListComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./list/list.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">component</span>:ListComponent&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [RouterModule.forChild(routes)],</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>其页面效果图如下所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-lazy-home.png\" alt=\"home路由请求的文件\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-lazy-product.png\" alt=\"product路由请求的文件\"></p>\n<p>4，对照上面两张图片，在 <code>home</code> 路由中请求文件和 <code>product</code> 路由中请求的文件有一定的区别，在 <code>product</code> 路由中多请求了 <code>product-product-module.js</code> 文件。即用户进入项目页面时，不会请求项目所有的文件，这提高了项目的用户体验，同时还可以将和 <code>product</code> 模块相关的组件或服务放到项目文件中的 <code>product</code> 文件夹下，进行模块化管理。</p>\n<blockquote>\n<p><strong>注意：</strong> 若初始化路由重定向路由到 <code>product</code> 下，那么 <code>product-product-module.js</code> 文件一开始就会被加载，因为 <code>product</code> 路由对应的文件中存在 <code>product-product-module.js</code> 文件</p>\n</blockquote>\n<h2 id=\"子路由\"><a href=\"#子路由\" class=\"headerlink\" title=\"子路由\"></a>子路由</h2><p>在实际 <code>Angular</code> 项目中，路由不止一层，即路由还会嵌套路由，被嵌套的路由就是子路由，又或者叫二级路由。</p>\n<h3 id=\"意义\"><a href=\"#意义\" class=\"headerlink\" title=\"意义\"></a>意义</h3><p>在 <code>惰性加载</code> 的模块 <code>setting</code> 中，存在 <code>product</code> 和 <code>joke</code> 两个页面，分别用 <code>setting/product</code> 路由和 <code>setting/joke</code> 进行管理，两个页面有一部分内容是相同的，若两个页面使用两个组件完成 <code>setting</code> 下的所有内容，那么两个页面相同的部分被实现两次，这显然增加了开发者的负担。这时，可以使用子路由解决，即路由嵌套路由。</p>\n<h3 id=\"示例解决\"><a href=\"#示例解决\" class=\"headerlink\" title=\"示例解决\"></a>示例解决</h3><p>1，使用命令 <code>ng g m setting --routing</code> 创建 <code>setting</code> 模块</p>\n<p>2，使用命令 <code>ng g c setting/layout</code>，<code>ng g c setting/product</code> 和 <code>ng g c setting/joke</code> 创建 <code>layout</code> 组件，<code>product</code> 组件和 <code>joke</code> 组件</p>\n<p>3，修改代码如下所示。<br>app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/joke&#x27;]&quot;</span>&gt;</span>Joke<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/prodcut&#x27;]&quot;</span>&gt;</span>Product<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 新增链接 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/setting&#x27;]&quot;</span>&gt;</span>setting<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>app-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">&#x27;full&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">component</span>:HomeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;joke&#x27;</span>,<span class=\"attr\">component</span>:JokeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;product&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./product/product.module#ProductModule&#x27;</span>&#125;,</span><br><span class=\"line\">  <span class=\"comment\">//新增setting路由</span></span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;setting&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./setting/setting.module#SettingModule&#x27;</span>&#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>product/setting-routing.module.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; LayoutComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./layout/layout.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ProductComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./product/product.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; JokeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./joke/joke.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">component</span>:LayoutComponent,</span><br><span class=\"line\">    <span class=\"attr\">children</span>:[ <span class=\"comment\">//子路由</span></span><br><span class=\"line\">      &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">&#x27;product&#x27;</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">&#x27;full&#x27;</span>&#125;,</span><br><span class=\"line\">      &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;product&#x27;</span>,<span class=\"attr\">component</span>:ProductComponent&#125;,</span><br><span class=\"line\">      &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;joke&#x27;</span>,<span class=\"attr\">component</span>:JokeComponent&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>product/laout/layout.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;jumbotron&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>共享部分<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav nav-tabs&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;product&quot;</span>&gt;</span>product<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;joke&#x27;]&quot;</span>&gt;</span>joke<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 子路由占位符 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其页面效果图如下所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-setting-1.png\" alt=\"setting/product路由\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-setting-2.png\" alt=\"setting/joke路由\"></p>\n<p>其中共享部分可以做成一个组件，该组件在 <code>setting</code> 模块中声明，在 <code>product/laout/layout.component.html</code> 中引用也可以达到同样的效果。</p>\n<h2 id=\"预加载\"><a href=\"#预加载\" class=\"headerlink\" title=\"预加载\"></a>预加载</h2><h3 id=\"意义-1\"><a href=\"#意义-1\" class=\"headerlink\" title=\"意义\"></a>意义</h3><p>在 <code>Agnular</code> 项目中，使用 <code>懒加载</code> 时有助于提高用户体验和模块化管理项目。</p>\n<p>假如现在有一个新的模块 <code>prod</code>，开发者使用懒加载模式加载这个模块。但是开发者可以预见 <code>prod</code> 模块会被用户频繁浏览（用户初始进入项目是 <code>home</code> 路由，然后大部分用户会浏览 <code>prod</code> 模块），在加载时 <code>prod</code> 模块时，浏览器会停顿一小段时间（需要加载 <code>prod</code> 模块对应的文件），这会对降低用户体验，而预加载就是解决浏览器停顿这一小段时间的方法。</p>\n<h3 id=\"代码准备\"><a href=\"#代码准备\" class=\"headerlink\" title=\"代码准备\"></a>代码准备</h3><p>使用命令 <code>ng g m prod --routing</code> 新建 <code>prod</code> 模块，然后使用命令 <code>ng g c prod/layout</code> 在  <code>prod</code> 模块下新建 <code>layout</code> 组件。最后修改代码如下所示。</p>\n<p>app-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">&#x27;full&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">component</span>:HomeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;joke&#x27;</span>,<span class=\"attr\">component</span>:JokeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;product&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./product/product.module#ProductModule&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;setting&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./setting/setting.module#SettingModule&#x27;</span>&#125;,</span><br><span class=\"line\">  <span class=\"comment\">//新增路由</span></span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;prod&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./prod/prod.module#ProdModule&#x27;</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/joke&#x27;]&quot;</span>&gt;</span>Joke<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/prodcut&#x27;]&quot;</span>&gt;</span>Product<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/setting&#x27;]&quot;</span>&gt;</span>setting<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 新增链接 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/prod&#x27;]&quot;</span>&gt;</span>prod<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>prod-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; LayoutComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./layout/layout.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">component</span>:LayoutComponent&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自带预加载策略\"><a href=\"#自带预加载策略\" class=\"headerlink\" title=\"自带预加载策略\"></a>自带预加载策略</h3><p><code>Angular</code> 对于项目的预加载功能有一个自带的策略。其代码如下。<br>app-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule, PreloadAllModules &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [RouterModule.forRoot(routes,&#123; <span class=\"attr\">preloadingStrategy</span>:  PreloadAllModules &#125;)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>Angular</code> 项目中，使用 <code>Angular</code> 自带的预加载策略时， 只需要修改 <code>app-routing.module.ts</code> 根路由文件，在根路由文件中引入 <code>PreloadAllModules</code> 模块，并在根文件中如上使用即可。</p>\n<p>其效果图如下所示。</p>\n<p><img src=\"https://bingolil.github.io/images/angular-allprod.png\"></p>\n<p>在 <code>app-routing.module.ts</code> 文件中，加载模块的模式是 <code>懒加载</code> 模式，但是由于使用了 <code>预加载</code>，从上图中可以看到在 <code>home</code> 路由时，项目加载了对应 <code>prod</code> 路由下的 <code>prod-prod-module.js</code> 文件，说明 <code>Angular</code> 自带的预加载策略使用成功。</p>\n<p>但在上图中，可以看到由于使用了预加载，加载了所有的懒加载模块，这是 <code>Angular</code> 自带加载策略的一个缺陷。</p>\n<p>对于 <code>Angular</code> 预加载，开发者可以定义符合开发者需求的预加载策略，即自定义预加载</p>\n<h3 id=\"自定义预加载\"><a href=\"#自定义预加载\" class=\"headerlink\" title=\"自定义预加载\"></a>自定义预加载</h3><p>1，使用命令 <code>ng g s own-prod</code> 新建一个服务，修改 <code>own-prod.service.ts</code> 文件如下所示。</p>\n<p>own-prod.service.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Route, PreloadingStrategy &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable, <span class=\"keyword\">of</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OwnProdService</span> <span class=\"title\">implements</span> <span class=\"title\">PreloadingStrategy</span></span>&#123;</span><br><span class=\"line\">  preload(route: Route, <span class=\"attr\">load</span>: <span class=\"function\">() =&gt;</span> Observable&lt;<span class=\"built_in\">any</span>&gt;): Observable&lt;<span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (route.data &amp;&amp; route.data[<span class=\"string\">&#x27;preload&#x27;</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> load();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">of</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在根路由中使用上面新建的服务，<code>app-routing.module.ts</code> 代码如下所示。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; OwnProdService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./own-prod.service&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">&#x27;full&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">component</span>:HomeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;joke&#x27;</span>,<span class=\"attr\">component</span>:JokeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;product&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./product/product.module#ProductModule&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;setting&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./setting/setting.module#SettingModule&#x27;</span>&#125;,</span><br><span class=\"line\">  <span class=\"comment\">//根据路由中data的preload的true或false判断是否预加载</span></span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;prod&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./prod/prod.module#ProdModule&#x27;</span>,<span class=\"attr\">data</span>:&#123;<span class=\"attr\">preload</span>:<span class=\"literal\">true</span>&#125;&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;                                                    <span class=\"comment\">//使用服务</span></span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [RouterModule.forRoot(routes,&#123; <span class=\"attr\">preloadingStrategy</span>:  OwnProdService &#125;)],</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>使用自定义预加载后，在浏览器中效果图如下所示。<br><img src=\"https://bingolil.github.io/images/angular-route-prod.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>路由</code> 在 <code>Angular</code> 中是一个非常重要的模块，一个好的路由对项目的开发有着巨大的促进作用。</p>\n<p><code>Angular</code> 是单页面应用，在用户使用程序时，<code>Angular</code> 的 <code>路由</code> 能让用户从一个视图导航到另一个视图。</p>\n<h2 id=\"基本路由\"><a href=\"#基本路由\" class=\"headerlink\" title=\"基本路由\"></a>基本路由</h2><h3 id=\"路由配置文件\"><a href=\"#路由配置文件\" class=\"headerlink\" title=\"路由配置文件\"></a>路由配置文件</h3><p>在 <code>Angular</code> 项目中，<code>Angular</code> 的路由配置信息一般存放在单独的文件中（如xxxx-routing.module.ts），当然，放到 <code>Angular</code> 的模块中也可以。</p>\n<p>一般来说，存放路由配置信息的文件的生成方式有两种，一是手动生成，一是通过命令自动生成。</p>\n<blockquote>\n<p><strong>手动生成</strong></p>\n</blockquote>\n<p>在 <code>Angular</code> 项目的app文件夹目录下，手动新建一个文件，名为 <code>app-routing.module.ts</code>，将路由配置信息放到该文件中。需要开发者在跟模块 <code>AppModule</code> 里面引用路由配置信息模块。</p>\n<blockquote>\n<p><strong>自动生成</strong></p>\n</blockquote>\n<p>在 <code>cmd</code> 环境中，新建项目时，增加一个 <code>--routing</code> 的参数，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new 项目名 --routing</span><br></pre></td></tr></table></figure>\n\n<p>使用该命令创建项目，会在项目文件夹 <code>app</code> 下面生成 <code>app-routing.module.ts</code> 文件。</p>\n<p>由于是使用命令生成的路由配置信息文件，<code>app-routing.module.ts</code> 文件中的 <code>AppRoutingModule</code> 模块自动被 <code>AppModule</code> 根模块 <code>import</code> 了，不需要开发者在 <code>AppModule</code> 根模块里面去手动引用路由模块；<code>app.component.html</code> 页面中 <code>router-outlet</code> 占位符也会自动生成。 </p>\n<p>开发者在使用 <code>懒加载</code> 时，需要新建一个模块，新建的模块里面也存在路由，开发者也可以使用命令在创建模块时自动生成路由信息配置文件，其命令如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g m 模块名 --routing  //最简写法</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路由相关属性\"><a href=\"#路由相关属性\" class=\"headerlink\" title=\"路由相关属性\"></a>路由相关属性</h3><p><code>Angular</code> 的路由中涉及到许多的属性，如下所示。</p>\n<blockquote>\n<p><strong>Rotues：</strong> 存在于路由模块中，存放路由配置信息，即那个 <code>Url</code> 对应那个组件以及在那个 <code>outlet-outlet</code> 中展示组件，其用法: <code>const routes: Routes = [ 配置信息 ]</code></p>\n</blockquote>\n<blockquote>\n<p><strong>router-outlet：</strong> 该属性是组件UI中的路由占位符，存在于组件UI中，其用法：<code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code></p>\n</blockquote>\n<blockquote>\n<p><strong>routerLink：</strong> 在组件UI中负责路由跳转，存在于组件UI中，其用法：<code>1，&lt;a routerKink=&quot;xxx&quot;&gt;xxxx&lt;/a&gt;</code>，<code>2，&lt;a [routerKink]=&quot;[&#39;xxx&#39;]&quot;&gt;xxxx&lt;/a&gt;</code></p>\n</blockquote>\n<blockquote>\n<p><strong>routerLinkActive：</strong> 当前路由被激活时的样式，存在于组件UI中，其用法：<code>&lt;a routerLinkActive=&#39;active&#39; routerKink=&quot;[&#39;xxx&#39;]&quot;&gt;xxxx&lt;/a&gt;</code>，即当前路由激活时，给当前 <code>a标签</code> 增加 <code>active</code> 样式类</p>\n</blockquote>\n<blockquote>\n<p><strong>Router：</strong> 负责在运行时执行的路由对象，可以通过其 <code>navigate()</code>  方法和 <code>navigateByUrl()</code> 方法进行路由跳转，<code>Router</code> 是一个类，在使用时，需要实例化，其用法：<code>Router.navigate([&#39;/xxx&#39;])</code></p>\n</blockquote>\n<blockquote>\n<p><strong>ActivedRoute：</strong> 代表当前激活的路由对象，保存当前路由的 <code>URL</code> 以及路由参数，这是一个类，在使用时，需要实例化，其用法：<code>1，参数订阅 ActivedRoute.params.subscribe((data)=&gt;&#123;&#125;)</code>，<code>2，参数快照 ActivedRoute..snapshot.queryParams[&quot;id&quot;]</code></p>\n</blockquote>\n<blockquote>\n<p><strong>useHash：</strong> 其路由使用哈希展现，即多了一个 <code>#</code> 号，存在于根配置信息文件 <code>app-routing.module.ts</code> 中，其用法：<code>RouterModule.forRoot(routes,&#123;useHash:true&#125;)</code></p>\n</blockquote>\n<blockquote>\n<p><strong>redirectTo：</strong> 路由重定向，一般存在于根路由配置文件 <code>app-routing.module.ts</code> 中，其用法：<code>&#123;path:&#39;&#39;,redirectTo:&#39;/home&#39;,pathMatch:&#39;full&#39;&#125;</code>，即当前路由为空时，转到路由为 <code>home</code> 的页面</p>\n</blockquote>\n<blockquote>\n<p><strong>pathMatch：</strong> 路由完全匹配，一般存在于根路由配置 <code>app-routing.module.ts</code> 文件中，其用法：<code>&#123;path:&#39;&#39;,redirectTo:&#39;/home&#39;,pathMatch:&#39;full&#39;&#125;</code></p>\n</blockquote>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>1，在 <code>cmd</code> 环境中，使用命令 <code>ng new learn-route --rouing</code> 创建 <code>learn-route</code> 项目</p>\n<p>2，<code>cd learn-route</code> 进入 <code>learn-route</code> 目录下，使用命令 <code>ng g c home</code> 创建 <code>home</code> 组件，使用命令 <code>ng g c joke</code> 创建 <code>joke</code> 组件</p>\n<p>其 <code>learn-route</code> 项目部分代码如下所示。</p>\n<p>app.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppRoutingModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HomeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./home/home.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; JokeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./joke/joke.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">declarations</span>: [</span><br><span class=\"line\">    AppComponent,</span><br><span class=\"line\">    HomeComponent,</span><br><span class=\"line\">    JokeComponent</span><br><span class=\"line\">  ],</span><br><span class=\"line\">..../代码块</span><br></pre></td></tr></table></figure>\n\n<p>app-routing.mdule.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [RouterModule.forRoot(routes)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppRoutingModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3，修改代码，如下所示。<br>app-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HomeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./home/home.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; JokeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./joke/joke.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">&#x27;full&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">component</span>:HomeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;joke&#x27;</span>,<span class=\"attr\">component</span>:JokeComponent&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\">ul class=&quot;nav navbar-nav&quot;&gt;</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- routerLink的两种写法 --&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/joke&#x27;]&quot;</span>&gt;</span>Joke<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>页面效果图如下所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-route-home.png\" alt=\"home路由\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-route-joke.png\" alt=\"joke路由\"></p>\n<h2 id=\"懒加载\"><a href=\"#懒加载\" class=\"headerlink\" title=\"懒加载\"></a>懒加载</h2><h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><blockquote>\n<p><strong>模块化管理：</strong> 在实际的 <code>Angular</code> 项目中，可能存在几十上百的组件，每一个组件都会在组件所属的模块里面声明，若项目所有的组件都在根模块 <code>app.moudle.ts</code> 里面声明，那会导致根模块代码庞大，并且不易管理，使用 <code>懒加载</code> 时，将相关的组件放到同一个模块，组件在该模块声明，开发者需要修改这个模块的代码时，直接在项目中找这个模块即可。</p>\n</blockquote>\n<blockquote>\n<p><strong>用户体验：</strong> <code>Angular</code> 开发的项目是单页面应用，在实际的 <code>Angular</code> 项目中，由于 <code>Angular</code> 项目过于庞大，如果不采用 <code>懒加载</code> 模式，用户进入到项目的页面时，浏览器会请求整个项目的文件，这会导致项目的页面打开速度过慢</p>\n</blockquote>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>1，在 <code>cmd</code> 环境下使用命令 <code>ng g m poduct --routing</code> 生成需要懒加载的 <code>product</code> 模块，该命令还会自动生成懒加载模块的路由配置信息文件 <code>product-routing.module.ts</code></p>\n<p>2，使用命令 <code>ng g c product/list</code> 在 <code>product</code> 模块下生成 <code>lsit组件</code></p>\n<p>项目部分代码如下所示。<br>product.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ProductRoutingModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./product-routing.module&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ListComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./list/list.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [</span><br><span class=\"line\">    CommonModule,</span><br><span class=\"line\">    ProductRoutingModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>product-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [RouterModule.forChild(routes)],</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>3，修改代码如下所示<br>app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/joke&#x27;]&quot;</span>&gt;</span>Joke<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 新增链接 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/prodcut&#x27;]&quot;</span>&gt;</span>Product<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>app-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">&#x27;full&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">component</span>:HomeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;joke&#x27;</span>,<span class=\"attr\">component</span>:JokeComponent&#125;,</span><br><span class=\"line\">  <span class=\"comment\">//惰性加载路由</span></span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;product&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./product/product.module#ProductModule&#x27;</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>product-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ListComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./list/list.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">component</span>:ListComponent&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [RouterModule.forChild(routes)],</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>其页面效果图如下所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-lazy-home.png\" alt=\"home路由请求的文件\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-lazy-product.png\" alt=\"product路由请求的文件\"></p>\n<p>4，对照上面两张图片，在 <code>home</code> 路由中请求文件和 <code>product</code> 路由中请求的文件有一定的区别，在 <code>product</code> 路由中多请求了 <code>product-product-module.js</code> 文件。即用户进入项目页面时，不会请求项目所有的文件，这提高了项目的用户体验，同时还可以将和 <code>product</code> 模块相关的组件或服务放到项目文件中的 <code>product</code> 文件夹下，进行模块化管理。</p>\n<blockquote>\n<p><strong>注意：</strong> 若初始化路由重定向路由到 <code>product</code> 下，那么 <code>product-product-module.js</code> 文件一开始就会被加载，因为 <code>product</code> 路由对应的文件中存在 <code>product-product-module.js</code> 文件</p>\n</blockquote>\n<h2 id=\"子路由\"><a href=\"#子路由\" class=\"headerlink\" title=\"子路由\"></a>子路由</h2><p>在实际 <code>Angular</code> 项目中，路由不止一层，即路由还会嵌套路由，被嵌套的路由就是子路由，又或者叫二级路由。</p>\n<h3 id=\"意义\"><a href=\"#意义\" class=\"headerlink\" title=\"意义\"></a>意义</h3><p>在 <code>惰性加载</code> 的模块 <code>setting</code> 中，存在 <code>product</code> 和 <code>joke</code> 两个页面，分别用 <code>setting/product</code> 路由和 <code>setting/joke</code> 进行管理，两个页面有一部分内容是相同的，若两个页面使用两个组件完成 <code>setting</code> 下的所有内容，那么两个页面相同的部分被实现两次，这显然增加了开发者的负担。这时，可以使用子路由解决，即路由嵌套路由。</p>\n<h3 id=\"示例解决\"><a href=\"#示例解决\" class=\"headerlink\" title=\"示例解决\"></a>示例解决</h3><p>1，使用命令 <code>ng g m setting --routing</code> 创建 <code>setting</code> 模块</p>\n<p>2，使用命令 <code>ng g c setting/layout</code>，<code>ng g c setting/product</code> 和 <code>ng g c setting/joke</code> 创建 <code>layout</code> 组件，<code>product</code> 组件和 <code>joke</code> 组件</p>\n<p>3，修改代码如下所示。<br>app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/joke&#x27;]&quot;</span>&gt;</span>Joke<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/prodcut&#x27;]&quot;</span>&gt;</span>Product<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 新增链接 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/setting&#x27;]&quot;</span>&gt;</span>setting<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>app-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">&#x27;full&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">component</span>:HomeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;joke&#x27;</span>,<span class=\"attr\">component</span>:JokeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;product&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./product/product.module#ProductModule&#x27;</span>&#125;,</span><br><span class=\"line\">  <span class=\"comment\">//新增setting路由</span></span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;setting&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./setting/setting.module#SettingModule&#x27;</span>&#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<p>product/setting-routing.module.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; LayoutComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./layout/layout.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ProductComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./product/product.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; JokeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./joke/joke.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">component</span>:LayoutComponent,</span><br><span class=\"line\">    <span class=\"attr\">children</span>:[ <span class=\"comment\">//子路由</span></span><br><span class=\"line\">      &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">&#x27;product&#x27;</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">&#x27;full&#x27;</span>&#125;,</span><br><span class=\"line\">      &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;product&#x27;</span>,<span class=\"attr\">component</span>:ProductComponent&#125;,</span><br><span class=\"line\">      &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;joke&#x27;</span>,<span class=\"attr\">component</span>:JokeComponent&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>product/laout/layout.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;jumbotron&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>共享部分<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav nav-tabs&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;product&quot;</span>&gt;</span>product<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;joke&#x27;]&quot;</span>&gt;</span>joke<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 子路由占位符 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其页面效果图如下所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-setting-1.png\" alt=\"setting/product路由\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-setting-2.png\" alt=\"setting/joke路由\"></p>\n<p>其中共享部分可以做成一个组件，该组件在 <code>setting</code> 模块中声明，在 <code>product/laout/layout.component.html</code> 中引用也可以达到同样的效果。</p>\n<h2 id=\"预加载\"><a href=\"#预加载\" class=\"headerlink\" title=\"预加载\"></a>预加载</h2><h3 id=\"意义-1\"><a href=\"#意义-1\" class=\"headerlink\" title=\"意义\"></a>意义</h3><p>在 <code>Agnular</code> 项目中，使用 <code>懒加载</code> 时有助于提高用户体验和模块化管理项目。</p>\n<p>假如现在有一个新的模块 <code>prod</code>，开发者使用懒加载模式加载这个模块。但是开发者可以预见 <code>prod</code> 模块会被用户频繁浏览（用户初始进入项目是 <code>home</code> 路由，然后大部分用户会浏览 <code>prod</code> 模块），在加载时 <code>prod</code> 模块时，浏览器会停顿一小段时间（需要加载 <code>prod</code> 模块对应的文件），这会对降低用户体验，而预加载就是解决浏览器停顿这一小段时间的方法。</p>\n<h3 id=\"代码准备\"><a href=\"#代码准备\" class=\"headerlink\" title=\"代码准备\"></a>代码准备</h3><p>使用命令 <code>ng g m prod --routing</code> 新建 <code>prod</code> 模块，然后使用命令 <code>ng g c prod/layout</code> 在  <code>prod</code> 模块下新建 <code>layout</code> 组件。最后修改代码如下所示。</p>\n<p>app-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">&#x27;full&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">component</span>:HomeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;joke&#x27;</span>,<span class=\"attr\">component</span>:JokeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;product&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./product/product.module#ProductModule&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;setting&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./setting/setting.module#SettingModule&#x27;</span>&#125;,</span><br><span class=\"line\">  <span class=\"comment\">//新增路由</span></span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;prod&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./prod/prod.module#ProdModule&#x27;</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/joke&#x27;]&quot;</span>&gt;</span>Joke<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/prodcut&#x27;]&quot;</span>&gt;</span>Product<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/setting&#x27;]&quot;</span>&gt;</span>setting<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 新增链接 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/prod&#x27;]&quot;</span>&gt;</span>prod<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>prod-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; LayoutComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./layout/layout.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">component</span>:LayoutComponent&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自带预加载策略\"><a href=\"#自带预加载策略\" class=\"headerlink\" title=\"自带预加载策略\"></a>自带预加载策略</h3><p><code>Angular</code> 对于项目的预加载功能有一个自带的策略。其代码如下。<br>app-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Routes, RouterModule, PreloadAllModules &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [RouterModule.forRoot(routes,&#123; <span class=\"attr\">preloadingStrategy</span>:  PreloadAllModules &#125;)],</span><br><span class=\"line\">  <span class=\"attr\">exports</span>: [RouterModule]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>Angular</code> 项目中，使用 <code>Angular</code> 自带的预加载策略时， 只需要修改 <code>app-routing.module.ts</code> 根路由文件，在根路由文件中引入 <code>PreloadAllModules</code> 模块，并在根文件中如上使用即可。</p>\n<p>其效果图如下所示。</p>\n<p><img src=\"https://bingolil.github.io/images/angular-allprod.png\"></p>\n<p>在 <code>app-routing.module.ts</code> 文件中，加载模块的模式是 <code>懒加载</code> 模式，但是由于使用了 <code>预加载</code>，从上图中可以看到在 <code>home</code> 路由时，项目加载了对应 <code>prod</code> 路由下的 <code>prod-prod-module.js</code> 文件，说明 <code>Angular</code> 自带的预加载策略使用成功。</p>\n<p>但在上图中，可以看到由于使用了预加载，加载了所有的懒加载模块，这是 <code>Angular</code> 自带加载策略的一个缺陷。</p>\n<p>对于 <code>Angular</code> 预加载，开发者可以定义符合开发者需求的预加载策略，即自定义预加载</p>\n<h3 id=\"自定义预加载\"><a href=\"#自定义预加载\" class=\"headerlink\" title=\"自定义预加载\"></a>自定义预加载</h3><p>1，使用命令 <code>ng g s own-prod</code> 新建一个服务，修改 <code>own-prod.service.ts</code> 文件如下所示。</p>\n<p>own-prod.service.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Route, PreloadingStrategy &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable, <span class=\"keyword\">of</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OwnProdService</span> <span class=\"title\">implements</span> <span class=\"title\">PreloadingStrategy</span></span>&#123;</span><br><span class=\"line\">  preload(route: Route, <span class=\"attr\">load</span>: <span class=\"function\">() =&gt;</span> Observable&lt;<span class=\"built_in\">any</span>&gt;): Observable&lt;<span class=\"built_in\">any</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (route.data &amp;&amp; route.data[<span class=\"string\">&#x27;preload&#x27;</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> load();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">of</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在根路由中使用上面新建的服务，<code>app-routing.module.ts</code> 代码如下所示。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; OwnProdService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./own-prod.service&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">&#x27;full&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">component</span>:HomeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;joke&#x27;</span>,<span class=\"attr\">component</span>:JokeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;product&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./product/product.module#ProductModule&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;setting&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./setting/setting.module#SettingModule&#x27;</span>&#125;,</span><br><span class=\"line\">  <span class=\"comment\">//根据路由中data的preload的true或false判断是否预加载</span></span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;prod&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./prod/prod.module#ProdModule&#x27;</span>,<span class=\"attr\">data</span>:&#123;<span class=\"attr\">preload</span>:<span class=\"literal\">true</span>&#125;&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;                                                    <span class=\"comment\">//使用服务</span></span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [RouterModule.forRoot(routes,&#123; <span class=\"attr\">preloadingStrategy</span>:  OwnProdService &#125;)],</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>使用自定义预加载后，在浏览器中效果图如下所示。<br><img src=\"https://bingolil.github.io/images/angular-route-prod.png\"></p>\n"},{"title":"Angular学习-5-路由2","date":"2018-12-18T16:00:00.000Z","description":"在单页应用中，你可以通过显示或隐藏与特定组件相对应的部分来更改用户看到的内容，而不用去服务器获取新页面。用户执行应用程序任务时，他们需要在定义好的不同视图之间移动。","_content":"## 路由守卫\n### 意义\n大部分系统中都存在权限问题，比如基本的权限如使用系统的人大致可以可以分为游客，用户，管理员。更加复杂的权限如用户也存在等级，不同等级的用户有不同的功能，而且管理员也存在等级，不同等级的管理员所管理的业务也有区别。\n\n`Angular` 项目的权限问题可以使用 `路由守卫` 解决，即通过 `路由守卫` 判断系统的使用者是否有权限进入某一个路由。\n### 基本示例\n1，在 `cmd` 环境下，使用命令 `ng new high-route --routing` 新建一个 `high-route` 项目。\n\n2，`cd high-route` 进入 `high-route` 目录下，使用命令 `ng g c home`，`ng g c login`，`ng g m console --routing`，`ng g c console/index` 新建 `home` 组件， `login` 组件，`console` 模块，`console` 模块下 `index` 组件。\n\n3，修改部分项目代码如下所示。\napp-routing.module.ts\n```typescript\n....//代码块\nconst routes: Routes = [\n  {path:'',redirectTo:'home',pathMatch:'full'},\n  {path:'home',component:HomeComponent},\n  {path:'login',component: LoginComponent},\n  {path:'console',loadChildren:'./console/console.module#ConsoleModule'}\n];\n....//代码块\n```\n\napp.component.html\n```HTML\n<!-- 代码块 -->\n<ul class=\"nav navbar-nav\">\n  <li routerLinkActive=\"active\"><a routerLink='/home'>Home</a></li>\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/console']\">console</a></li>\n</ul>\n<!-- 代码块 -->\n<div class=\"container\"><router-outlet></router-outlet></div>\n```\n\nconsole-routing.module.ts\n```typescript\n....//代码块\nconst routes: Routes = [\n  {path:'',component:IndexComponent}\n];\n....//代码块\n```\n\n4，效果图如下所示。\n![home 路由](https://bingolil.github.io/images/angular-h-home.png)\n\n![login 路由](https://bingolil.github.io/images/angular-h-login.png)\n\n![console 路由](https://bingolil.github.io/images/angular-h-console.png)\n\n5，假如在实际项目中，`console` 模块为控制台台模块，系统的使用者是游客时无法进入 `console` 模块，只有游客注册登录后才能进入 `console` 模块。当系统使用者点击页面导航栏中 `console 链接` 时，系统需要判断当前系统的使用者是否有权限进入 `console` 模块，若有权限则进入，没权限进入 `login` 路由，这是路由守卫需要做的事情。使用 `ng g s route-guard` 创建守卫服务。修改 `route-guard.service.ts` 代码如下所示\n\nroute-guard.service.ts\n```typescript\nimport {Injectable} from '@angular/core';\nimport {CanActivate} from '@angular/router';\n\n@Injectable({providedIn: 'root'})\n\nexport class RouteGuardService implements CanActivate {\n\n  constructor() { }\n\n  canActivate():boolean{\n    return false;//不可进入   若为return true 可以进入\n  }\n}\n```\n\n这是最基本的路由守卫，当 `canActive()` 中返回 `false` 时，不可进入当前路由，返回 `true` 时可进入当前路由。\n\n6，在 `app-routing.modult.ts` 根路由配置信息文件中使用路由守卫，代码如下所示。\n\n`app-routing.module.ts`\n```typescript\n....//代码块\nimport { RouteGuardService } from './route-guard.service';\n\nconst routes: Routes = [\n  {path:'',redirectTo:'home',pathMatch:'full'},\n  {path:'home',component:HomeComponent},\n  {path:'login',component:LoginComponent},\n  {path:'console',\n    loadChildren:'./console/console.module#ConsoleModule',\n    canActivate:[RouteGuardService] //使用路由守卫的地方\n  }\n];\n....//代码块\n```\n\n在 `home` 路由下，点击导航中的 `console` 链接，当路由守卫返回 `true` 时，页面进入 `console` 路由；当路由守卫返回 `false` 时，页面停留在 `home` 路由下，不能进入 `console` 路由页面。\n\n7，上面的路由守卫只是最基本的路由守卫。在实际的项目中，路由守卫不可能这么的简单，在实际的项目中，关于路由守卫是有一定的逻辑的。修改路由守卫代码如下所示。\nroute-guard.service.ts\n```typescript\nimport { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\nimport { ActivatedRouteSnapshot } from '@angular/router';\n\n@Injectable({providedIn: 'root'})\n\nexport class RouteGuardService implements CanActivate {\n\n  constructor(private router:Router) { }\n\n  canActivate(route: ActivatedRouteSnapshot):boolean{\n    // 当前路由名称\n    var nowPath = route.routeConfig.path;  \n    // needGuardRoutes: 设置需要路由守卫的路由集合\n    const needGuardRoutes = ['console'];\n    \n    var isLogin=true;//是否有权限\n    if (needGuardRoutes.indexOf(nowPath) >= 0) {\n      if (!isLogin) {\n        this.router.navigate(['login']);// 没有权限，跳转到login路由获取权限\n        return false;\n      }else{\n        return true;// 有权限，跳转到当前路由\n      }\n    }\n\n    if (nowPath === 'login') {// 当前路由是login时 \n      if (!isLogin) {\n        return true; // 没有权限，跳转到当前login路由获取权限\n      }else{\n        this.router.navigate(['home']);// 已登录，跳转到home\n        return false;\n      }\n    }\n  \treturn true;\n  }\n}\n```\n运行本地项目，当 `isLogin` 为 `true` 时（有权限），在 `home` 路由下点击导航栏的 `console` 链接时，进入 `console` 路由。\n\n当 `isLogin` 为 `false` 时（没有权限），在 `home` 路由下点击导航栏的 `console` 链接时，进入 `login` 路由。\n\n在实际的项目中，`isLogin` 不可能像现在这样直接写 `true` 和 `false` 来代表是否有权限，应该通过其它的办法来判断是否有权限（不同的系统有不同的判断方法）。\n\n## 路由传参\n使用命令 `ng g m product --routing`，`ng g c product/list`，`ng g c product/detail` 创建 `product` 模块，`list` 组件，`detail` 组件。修改已有代码如下所示。\n\napp.component.html\n```HTML\n....//代码块\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/console']\">console</a></li>\n  <!-- 导航栏新增product链接 -->\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/product']\">product</a></li>\n</ul>\n....//代码块\n```\n\napp-routing.module.ts\n```typescript\n....//代码块\n{\n  path:'console',\n  loadChildren:'./console/console.module#ConsoleModule',\n  canActivate:[RouteGuardService]\n},  //新增product路由\n{path:'product',loadChildren:'./product/product.module#ProductModule'}\n....//代码块\n```\n\nproduct-routing.module.ts\n```typescript\n....//代码块\nimport { ListComponent } from './list/list.component';\nimport { DetailComponent } from './detail/detail.component';\n\nconst routes: Routes = [{path:'',component:ListComponent}];\n....//代码块\n```\n\n### 参数是 Url 路径一部分\n> 1，所传的参数是 `Url` 路径的一部分\n\n修改代码如下所示。\nproduct-routing.module.ts\n```typescript\n....//代码块\n{path:'',component:ListComponent},\n{path:':productId',component:DetailComponent}\n....//代码块\n```\n\nproduct/list/list.component.ts\n```typescript\nimport {Router } from '@angular/router';\n....//代码块\nconstructor(private router:Router) { }\n\nngOnInit() {}\n\ngoToDetail(){\n  // this.router.navigate(['/product/3']);\n  // this.router.navigate(['/product',3]);\n  this.router.navigateByUrl('/product/3');\n}\n```\n\nproduct/list/list.component.html\n```HTML\n<!--代码块-->\n<ul class=\"list-group\">\n                         <!-- <a routerLink=\"/product/1\">第一个产品</a> -->\n  <li class=\"list-group-item\"><a [routerLink]=\"['/product/1']\">第一个产品</a></li>\n  <li class=\"list-group-item\"><a [routerLink]=\"['/product',2]\">第二个产品</a></li>\n</ul>\n<button class=\"btn btn-sm btn-default\" (click)=\"goToDetail()\">第三个产品</button>\n<!--代码块-->\n```\n\nproduct/detail/detail.component.ts\n```typescript\nimport { ActivatedRoute } from '@angular/router';\n....//代码块\nexport class DetailComponent implements OnInit {\n\n  productId:any;\n\n  constructor(private routerInfo:ActivatedRoute) { }\n\n  ngOnInit() {\n    // this.productId=this.routerInfo.snapshot.params[\"productId\"];\n\n    // this.productId=this.routerInfo.snapshot.paramMap.get(\"productId\");\n\n    // this.routerInfo.params.subscribe(data=>{\n    //   this.productId=data['productId'];\n    // });\n    \n    this.routerInfo.paramMap.subscribe(data=>{\n      this.productId=data.get('productId');\n    });\n  }\n\n}\n```\n在上面的 `product/detail/detail.component.ts` 代码中，获取参数的参数名应该和路由配置信息文件 `product-routing.module.ts` 中 `:productId` 的 `productId` 相同。不然获取不到参数。\n\nproduct/detail/detail.component.html\n```HTML\n<ul class=\"breadcrumb\">\n  <li><a routerLink=\"/home\">Home</a></li>\n  <li><a routerLink=\"/product\">product</a></li>\n  <li class=\"active\">detail</li>\n</ul>\n<p>当前产品id为：{{productId}}</p>\n```\n\n传参效果图如下所示。\n![product路由](https://bingolil.github.io/images/angular-h-route-list.png)\n\n![点击product页面中 第一个产品](https://bingolil.github.io/images/angular-h-route-detail1.png)\n\n![点击product页面中 第二个产品](https://bingolil.github.io/images/angular-h-route-detail2.png)\n\n![点击product页面中 第三个产品 按钮](https://bingolil.github.io/images/angular-h-route-detail3.png)\n\n> 当参数是 `Url` 路径一部分时，使用该参数路由有两种方法。1，在页面中使用，如 `product/list/list.component.html`，暂时列举出3种格式（文中已列举）；2，在组件中使用，如 `product/list/list.component.ts`，有3种格式（文中已列举）。接收该参数的方式暂时列举出4种格式（已在 `product/detail/detail.component.ts` 中列举出来），推荐使用其中存在 `Map` 字符的方法，因为在 `Angular` 以后的版本中关于路由参数会淘汰掉不存在 `Map` 字符的方法属性。\n\n\n### 正常传参\n> 如果在 `url` 中传递的参数不止一个，是多个的话，参数是 `Url` 路径的一部分显然不是一个很好的方式，这时应该传递参数应该使用正常的模式，即参数在 `Url` 的路径后面，以 `?` 号隔开\n\n1，使用命令 `ng g m joke --routing`，`ng g c joke/list` `ng g c joke/detail` 创建 `joke` 模块，`joke/list` 组件，`joke/detail` 组件，修改已有代码如下所示。\napp-routing.module.st\n```typescript\n....//代码块\n{path:'product',loadChildren:'./product/product.module#ProductModule'},\n{path:'joke',loadChildren:'./joke/joke.module#JokeModule'} //新增路由\n....//代码块\n```\n\napp.component.html\n```HTML\n<!-- 代码块 -->\n<li routerLinkActive=\"active\"><a [routerLink]=\"['/product']\">product</a></li>\n<!-- 导航栏新增joke链接 -->\n<li routerLinkActive=\"active\"><a [routerLink]=\"['/joke']\">joke</a></li>\n<!-- 代码块 -->\n```\n\njoke-routing.module.ts\n```typescript\n....//代码块\nimport { ListComponent } from './list/list.component';\nimport { DetailComponent } from './detail/detail.component';\n\nconst routes: Routes = [\n  {path:'',component:ListComponent},\n  {path:'detail',component:DetailComponent}\n];\n....//代码块\n```\n\n2，在组件 `UI` 中传递参数\n修改 `joke/list.component.html` 代码如下所示。\n\njoke/list/list.component.html\n```HTML\n<!-- 代码块 -->\n<li class=\"list-group-item\">\n  <a routerLink=\"/joke/detail\" [queryParams]=\"{id:1,desc:3星}\">第一个笑话</a>\n</li>\n<li class=\"list-group-item\">\n  <a routerLink=\"/joke/detail\" [queryParams]=\"secParmas\">第二个笑话</a>\n</li>\n<li class=\"list-group-item\"><!-- routerLink和[routerLink] -->\n  <a [routerLink]=\"['/joke/detail']\" [queryParams]=\"thiParmas\">第三个笑话</a>\n</li>\n<!-- 代码块 -->\n```\njoke/list/list.component.ts\n```typescript\n....//代码块\nsecParmas={id:2,desc:'6星'}\n\nthiParmas={id:3,desc:'9星'}\n....//代码块\n```\n\n参数传递的效果图如下所示。\n\n![](https://bingolil.github.io/images/angular-h-route-joke-list.png)\n\n![](https://bingolil.github.io/images/angular-h-route-joke1.png)\n\n![](https://bingolil.github.io/images/angular-h-route-joke2.png)\n\n![](https://bingolil.github.io/images/angular-h-route-joke3.png)\n\n> 在组件 `UI` 中传递参数有多种格式。\n\n3，在组件中传递参数，修改代码如下所示。\njoke/list/list.component.html\n```HTML\n<!-- 代码块 -->\n<button class=\"btn btn-sm btn-success\" (click)=\"goJokeDetail()\">第n个笑话</button>\n<!-- 代码块 -->\n```\n\njoke/list/list.component.ts\n```typescript\nimport { Router } from '@angular/router'\n....//代码块\nconstructor(private router:Router) { }\n  goJokeDetail(){\n    let tsParmas={id:9,desc:'n星'}\n    this.router.navigate(['/joke/detail'],{queryParams:tsParmas})\n  }\n....//代码块\n```\n\n其效果图如下所示。\n\n![](https://bingolil.github.io/images/angular-h-route-joke-list-button.png)\n\n![](https://bingolil.github.io/images/angular-h-route-joken.png)\n\n### 错误传参方式\n> 组件 `UI` 的 `a标签url路径中` 直接写\n\n```HTML\n<!-- 代码块 -->\n<li class=\"list-group-item\">\n  <a routerLink=\"/joke/detail?jokeId=1&desc=3星\">第一个笑话</a>\n</li>\n<!-- 代码块 -->\n```\n在 `Angular` 中，这是一种错误的写法，其错误如下图所示。\n\n![](https://bingolil.github.io/images/angular-h-route-err1.png)\n\n> 组件 `UI` 中没有使用 `queryParams` 传参，采用 `Params` 传参\n\n在 `Angular7` 版本中，正常传递参数时（参数不是 `Url` 路径的一部分），只有 `queryParams` 属性才可以传递。\n\n使用其它属性（如 `Params`）传递时，程序会报错，因为 `Params` 不是 `a` 链接的属性，其代码以及错误如下所示。\n\n```HTML\n<!-- 代码块 -->\n <li class=\"list-group-item\">\n   <a routerLink=\"/joke/detail\" [Params]=\"{id:1,desc:'3星'}\">第一个笑话</a>\n</li>\n<!-- 代码块 -->\n```\n\n![](https://bingolil.github.io/images/angular-h-route-err2.png)\n\n### 获取参数\n修改 `joke/detail` 组件代码如下所示。\n\njoke/detail/detail.component.html\n\n```HTML\n<div *ngIf=\"nowJoke\">\n  <p>笑话id:{{nowJoke.id}}</p>\n  <p>笑话描述:{{nowJoke.desc}}</p>\n</div>\n\n<div *ngIf=\"secJoke\">\n  <p>笑话id:{{secJoke.id}}</p>\n  <p>笑话描述:{{secJoke.desc}}</p>\n</div>\n```\n\njoke/detail/detail.component.ts\n\n```typescript\nimport { ActivatedRoute, Params } from '@angular/router';\n....//代码块\nexport class DetailComponent implements OnInit {\n  constructor(private routeInfo:ActivatedRoute) { }\n  \n  nowJoke:any;\n  \n  secJoke={id:null,desc:null}\n  \n  ngOnInit() {\n    // this.routeInfo.queryParams.subscribe((data:Params)=>{\n    // \tthis.nowJoke=Object.assign({},data);\n    // })\n\n    //this.routeInfo.queryParamMap.subscribe((data:any)=>{\n    //  this.nowJoke=Object.assign({},data.params);\n    //})\n  \n    this.secJoke.id=this.routeInfo.snapshot.queryParamMap.get('id')\n    this.secJoke.desc=this.routeInfo.snapshot.queryParamMap.get('desc')\n  }\n }\n```\n\n获取参数效果图如下所示。\n\n![](https://bingolil.github.io/images/angular-h-route-joke-getParams.png)\n\n> 获取正常参数的方式暂时列举出3种，如上 `joke/detail/detail.component.ts` 所示。\n\n## 传参相似处\n\n### 参数快照和参数订阅\n参数快照和参数订阅都是获取路由参数的方法，它们的功能有一定的重复性，但也有一定的区别。\n\n在上面的代码中，获取参数的方法分为参数订阅（`subscribe`）和参数快照（`snapshot`）。\n\n其区别的代码示实例如下。\nproduct/detail/detail.component.html\n```HTML\n<!-- 代码块 -->\n<a routerLink=\"/product/2\">进入第二个产品</a>\n```\n\n参数订阅获取参数代码：product/detail/detail.component.ts\n```typescript\n//代码块\nthis.routerInfo.paramMap.subscribe(data=>{\n  this.productId=data.get('productId');\n});\n//代码块\n```\n\n![参数订阅](https://bingolil.github.io/images/angular-h-route-subscribe.png)\n\n参数快照获取参数代码：product/detail/detail.component.ts\n```typescript\n//代码块\nthis.productId=this.routerInfo.snapshot.paramMap.get(\"productId\");\n//代码块\n```\n\n![参数快照](https://bingolil.github.io/images/angular-h-route-snapshot.png)\n\n从上面的代码以及两张图对比中，可以发现，在参数订阅时，点击 `进入第二个产品` 链接，页面中的 `productId` 数据发生了改变，而在参数快照时，`Url` 地址发生改变，但页面中的 `productId` 并没有发生改变。\n\n> **原因**：这种情况主要发生在同一个组件的跳转。从 `product/1` 跳转到 `porduct/2` 时，都是在 `product/detail` 组件中跳转。当使用参数订阅，路由跳转时，根据订阅者模式，组件会再次获取路由参数；在使用参数快照时，由于在 `product/1` 路由下，`product/detail` 组件已经被创建了，当跳转到 `product/2` 时，组件不会重新执行 `ngOnInit()` 方法，所以不会重新获取参数。\n\n### paramMap 和 queryParamMap\n在路由传参中，`parmaMap` 和 `queryParamMap` 都有被使用，它们是有很大的区别的，`parmaMap` 用于获取路由传参时，其参数是路由 `Url` 路径的一部分；`queryParamMap` 用于获取正常的传递参数。\n\n其示例如下所示。\n\n![参数是路由 `Url` 路径的一部分](https://bingolil.github.io/images/angular-h-route-diff1.png)\n\n从上图可以知道，当路由参数是路由 `Url` 的一部分，其参数是放在 `params` 中的，若开发者从 `queryParams` 获取该参数是获取不到的。因为 `queryParams` 是一个空对象。 \n\n![参数是正常参数](https://bingolil.github.io/images/angular-h-route-diff2.png)\n\n从上图可以知道，当路由参数是正常参数时，其参数是放在 `queryParams` 中的，若开发者从 `params` 获取该参数是获取不到的。因为 `params` 是一个空对象。 \n\n### navigate 和 navigateByUrl\n`navigate` 和 `navigateByUrl` 两个方法都可以用于页面导航，但它们之间也有一定的区别。`router.navigateByUrl()` 方法是使用一个全新的路由地址替换已有的路由地址；`router.navigate()` 方法是基于一系列输入参数，产生一个新的 URL 地址。\n\n示例：在路由中存在 `辅助路由` 时，假如当前路由为 `/product(aux:chat)`，当运行 `router.navigateByUrl(['/product/1'])` 后，其 `Url` 地址栏为 `product/1`；当运行 `router.navigate(['/product/1'])` 后，其 `Url` 地址栏为 `product/1(aux:chat)`。\n\n\n\n\n\n\n","source":"_posts/angular/learn-5.md","raw":"title: Angular学习-5-路由2\ncategories: Angular\ndate: 2018-12-19\ntags: [Angular,Angular路由]\ndescription: 在单页应用中，你可以通过显示或隐藏与特定组件相对应的部分来更改用户看到的内容，而不用去服务器获取新页面。用户执行应用程序任务时，他们需要在定义好的不同视图之间移动。\n---\n## 路由守卫\n### 意义\n大部分系统中都存在权限问题，比如基本的权限如使用系统的人大致可以可以分为游客，用户，管理员。更加复杂的权限如用户也存在等级，不同等级的用户有不同的功能，而且管理员也存在等级，不同等级的管理员所管理的业务也有区别。\n\n`Angular` 项目的权限问题可以使用 `路由守卫` 解决，即通过 `路由守卫` 判断系统的使用者是否有权限进入某一个路由。\n### 基本示例\n1，在 `cmd` 环境下，使用命令 `ng new high-route --routing` 新建一个 `high-route` 项目。\n\n2，`cd high-route` 进入 `high-route` 目录下，使用命令 `ng g c home`，`ng g c login`，`ng g m console --routing`，`ng g c console/index` 新建 `home` 组件， `login` 组件，`console` 模块，`console` 模块下 `index` 组件。\n\n3，修改部分项目代码如下所示。\napp-routing.module.ts\n```typescript\n....//代码块\nconst routes: Routes = [\n  {path:'',redirectTo:'home',pathMatch:'full'},\n  {path:'home',component:HomeComponent},\n  {path:'login',component: LoginComponent},\n  {path:'console',loadChildren:'./console/console.module#ConsoleModule'}\n];\n....//代码块\n```\n\napp.component.html\n```HTML\n<!-- 代码块 -->\n<ul class=\"nav navbar-nav\">\n  <li routerLinkActive=\"active\"><a routerLink='/home'>Home</a></li>\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/console']\">console</a></li>\n</ul>\n<!-- 代码块 -->\n<div class=\"container\"><router-outlet></router-outlet></div>\n```\n\nconsole-routing.module.ts\n```typescript\n....//代码块\nconst routes: Routes = [\n  {path:'',component:IndexComponent}\n];\n....//代码块\n```\n\n4，效果图如下所示。\n![home 路由](https://bingolil.github.io/images/angular-h-home.png)\n\n![login 路由](https://bingolil.github.io/images/angular-h-login.png)\n\n![console 路由](https://bingolil.github.io/images/angular-h-console.png)\n\n5，假如在实际项目中，`console` 模块为控制台台模块，系统的使用者是游客时无法进入 `console` 模块，只有游客注册登录后才能进入 `console` 模块。当系统使用者点击页面导航栏中 `console 链接` 时，系统需要判断当前系统的使用者是否有权限进入 `console` 模块，若有权限则进入，没权限进入 `login` 路由，这是路由守卫需要做的事情。使用 `ng g s route-guard` 创建守卫服务。修改 `route-guard.service.ts` 代码如下所示\n\nroute-guard.service.ts\n```typescript\nimport {Injectable} from '@angular/core';\nimport {CanActivate} from '@angular/router';\n\n@Injectable({providedIn: 'root'})\n\nexport class RouteGuardService implements CanActivate {\n\n  constructor() { }\n\n  canActivate():boolean{\n    return false;//不可进入   若为return true 可以进入\n  }\n}\n```\n\n这是最基本的路由守卫，当 `canActive()` 中返回 `false` 时，不可进入当前路由，返回 `true` 时可进入当前路由。\n\n6，在 `app-routing.modult.ts` 根路由配置信息文件中使用路由守卫，代码如下所示。\n\n`app-routing.module.ts`\n```typescript\n....//代码块\nimport { RouteGuardService } from './route-guard.service';\n\nconst routes: Routes = [\n  {path:'',redirectTo:'home',pathMatch:'full'},\n  {path:'home',component:HomeComponent},\n  {path:'login',component:LoginComponent},\n  {path:'console',\n    loadChildren:'./console/console.module#ConsoleModule',\n    canActivate:[RouteGuardService] //使用路由守卫的地方\n  }\n];\n....//代码块\n```\n\n在 `home` 路由下，点击导航中的 `console` 链接，当路由守卫返回 `true` 时，页面进入 `console` 路由；当路由守卫返回 `false` 时，页面停留在 `home` 路由下，不能进入 `console` 路由页面。\n\n7，上面的路由守卫只是最基本的路由守卫。在实际的项目中，路由守卫不可能这么的简单，在实际的项目中，关于路由守卫是有一定的逻辑的。修改路由守卫代码如下所示。\nroute-guard.service.ts\n```typescript\nimport { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\nimport { ActivatedRouteSnapshot } from '@angular/router';\n\n@Injectable({providedIn: 'root'})\n\nexport class RouteGuardService implements CanActivate {\n\n  constructor(private router:Router) { }\n\n  canActivate(route: ActivatedRouteSnapshot):boolean{\n    // 当前路由名称\n    var nowPath = route.routeConfig.path;  \n    // needGuardRoutes: 设置需要路由守卫的路由集合\n    const needGuardRoutes = ['console'];\n    \n    var isLogin=true;//是否有权限\n    if (needGuardRoutes.indexOf(nowPath) >= 0) {\n      if (!isLogin) {\n        this.router.navigate(['login']);// 没有权限，跳转到login路由获取权限\n        return false;\n      }else{\n        return true;// 有权限，跳转到当前路由\n      }\n    }\n\n    if (nowPath === 'login') {// 当前路由是login时 \n      if (!isLogin) {\n        return true; // 没有权限，跳转到当前login路由获取权限\n      }else{\n        this.router.navigate(['home']);// 已登录，跳转到home\n        return false;\n      }\n    }\n  \treturn true;\n  }\n}\n```\n运行本地项目，当 `isLogin` 为 `true` 时（有权限），在 `home` 路由下点击导航栏的 `console` 链接时，进入 `console` 路由。\n\n当 `isLogin` 为 `false` 时（没有权限），在 `home` 路由下点击导航栏的 `console` 链接时，进入 `login` 路由。\n\n在实际的项目中，`isLogin` 不可能像现在这样直接写 `true` 和 `false` 来代表是否有权限，应该通过其它的办法来判断是否有权限（不同的系统有不同的判断方法）。\n\n## 路由传参\n使用命令 `ng g m product --routing`，`ng g c product/list`，`ng g c product/detail` 创建 `product` 模块，`list` 组件，`detail` 组件。修改已有代码如下所示。\n\napp.component.html\n```HTML\n....//代码块\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/console']\">console</a></li>\n  <!-- 导航栏新增product链接 -->\n  <li routerLinkActive=\"active\"><a [routerLink]=\"['/product']\">product</a></li>\n</ul>\n....//代码块\n```\n\napp-routing.module.ts\n```typescript\n....//代码块\n{\n  path:'console',\n  loadChildren:'./console/console.module#ConsoleModule',\n  canActivate:[RouteGuardService]\n},  //新增product路由\n{path:'product',loadChildren:'./product/product.module#ProductModule'}\n....//代码块\n```\n\nproduct-routing.module.ts\n```typescript\n....//代码块\nimport { ListComponent } from './list/list.component';\nimport { DetailComponent } from './detail/detail.component';\n\nconst routes: Routes = [{path:'',component:ListComponent}];\n....//代码块\n```\n\n### 参数是 Url 路径一部分\n> 1，所传的参数是 `Url` 路径的一部分\n\n修改代码如下所示。\nproduct-routing.module.ts\n```typescript\n....//代码块\n{path:'',component:ListComponent},\n{path:':productId',component:DetailComponent}\n....//代码块\n```\n\nproduct/list/list.component.ts\n```typescript\nimport {Router } from '@angular/router';\n....//代码块\nconstructor(private router:Router) { }\n\nngOnInit() {}\n\ngoToDetail(){\n  // this.router.navigate(['/product/3']);\n  // this.router.navigate(['/product',3]);\n  this.router.navigateByUrl('/product/3');\n}\n```\n\nproduct/list/list.component.html\n```HTML\n<!--代码块-->\n<ul class=\"list-group\">\n                         <!-- <a routerLink=\"/product/1\">第一个产品</a> -->\n  <li class=\"list-group-item\"><a [routerLink]=\"['/product/1']\">第一个产品</a></li>\n  <li class=\"list-group-item\"><a [routerLink]=\"['/product',2]\">第二个产品</a></li>\n</ul>\n<button class=\"btn btn-sm btn-default\" (click)=\"goToDetail()\">第三个产品</button>\n<!--代码块-->\n```\n\nproduct/detail/detail.component.ts\n```typescript\nimport { ActivatedRoute } from '@angular/router';\n....//代码块\nexport class DetailComponent implements OnInit {\n\n  productId:any;\n\n  constructor(private routerInfo:ActivatedRoute) { }\n\n  ngOnInit() {\n    // this.productId=this.routerInfo.snapshot.params[\"productId\"];\n\n    // this.productId=this.routerInfo.snapshot.paramMap.get(\"productId\");\n\n    // this.routerInfo.params.subscribe(data=>{\n    //   this.productId=data['productId'];\n    // });\n    \n    this.routerInfo.paramMap.subscribe(data=>{\n      this.productId=data.get('productId');\n    });\n  }\n\n}\n```\n在上面的 `product/detail/detail.component.ts` 代码中，获取参数的参数名应该和路由配置信息文件 `product-routing.module.ts` 中 `:productId` 的 `productId` 相同。不然获取不到参数。\n\nproduct/detail/detail.component.html\n```HTML\n<ul class=\"breadcrumb\">\n  <li><a routerLink=\"/home\">Home</a></li>\n  <li><a routerLink=\"/product\">product</a></li>\n  <li class=\"active\">detail</li>\n</ul>\n<p>当前产品id为：{{productId}}</p>\n```\n\n传参效果图如下所示。\n![product路由](https://bingolil.github.io/images/angular-h-route-list.png)\n\n![点击product页面中 第一个产品](https://bingolil.github.io/images/angular-h-route-detail1.png)\n\n![点击product页面中 第二个产品](https://bingolil.github.io/images/angular-h-route-detail2.png)\n\n![点击product页面中 第三个产品 按钮](https://bingolil.github.io/images/angular-h-route-detail3.png)\n\n> 当参数是 `Url` 路径一部分时，使用该参数路由有两种方法。1，在页面中使用，如 `product/list/list.component.html`，暂时列举出3种格式（文中已列举）；2，在组件中使用，如 `product/list/list.component.ts`，有3种格式（文中已列举）。接收该参数的方式暂时列举出4种格式（已在 `product/detail/detail.component.ts` 中列举出来），推荐使用其中存在 `Map` 字符的方法，因为在 `Angular` 以后的版本中关于路由参数会淘汰掉不存在 `Map` 字符的方法属性。\n\n\n### 正常传参\n> 如果在 `url` 中传递的参数不止一个，是多个的话，参数是 `Url` 路径的一部分显然不是一个很好的方式，这时应该传递参数应该使用正常的模式，即参数在 `Url` 的路径后面，以 `?` 号隔开\n\n1，使用命令 `ng g m joke --routing`，`ng g c joke/list` `ng g c joke/detail` 创建 `joke` 模块，`joke/list` 组件，`joke/detail` 组件，修改已有代码如下所示。\napp-routing.module.st\n```typescript\n....//代码块\n{path:'product',loadChildren:'./product/product.module#ProductModule'},\n{path:'joke',loadChildren:'./joke/joke.module#JokeModule'} //新增路由\n....//代码块\n```\n\napp.component.html\n```HTML\n<!-- 代码块 -->\n<li routerLinkActive=\"active\"><a [routerLink]=\"['/product']\">product</a></li>\n<!-- 导航栏新增joke链接 -->\n<li routerLinkActive=\"active\"><a [routerLink]=\"['/joke']\">joke</a></li>\n<!-- 代码块 -->\n```\n\njoke-routing.module.ts\n```typescript\n....//代码块\nimport { ListComponent } from './list/list.component';\nimport { DetailComponent } from './detail/detail.component';\n\nconst routes: Routes = [\n  {path:'',component:ListComponent},\n  {path:'detail',component:DetailComponent}\n];\n....//代码块\n```\n\n2，在组件 `UI` 中传递参数\n修改 `joke/list.component.html` 代码如下所示。\n\njoke/list/list.component.html\n```HTML\n<!-- 代码块 -->\n<li class=\"list-group-item\">\n  <a routerLink=\"/joke/detail\" [queryParams]=\"{id:1,desc:3星}\">第一个笑话</a>\n</li>\n<li class=\"list-group-item\">\n  <a routerLink=\"/joke/detail\" [queryParams]=\"secParmas\">第二个笑话</a>\n</li>\n<li class=\"list-group-item\"><!-- routerLink和[routerLink] -->\n  <a [routerLink]=\"['/joke/detail']\" [queryParams]=\"thiParmas\">第三个笑话</a>\n</li>\n<!-- 代码块 -->\n```\njoke/list/list.component.ts\n```typescript\n....//代码块\nsecParmas={id:2,desc:'6星'}\n\nthiParmas={id:3,desc:'9星'}\n....//代码块\n```\n\n参数传递的效果图如下所示。\n\n![](https://bingolil.github.io/images/angular-h-route-joke-list.png)\n\n![](https://bingolil.github.io/images/angular-h-route-joke1.png)\n\n![](https://bingolil.github.io/images/angular-h-route-joke2.png)\n\n![](https://bingolil.github.io/images/angular-h-route-joke3.png)\n\n> 在组件 `UI` 中传递参数有多种格式。\n\n3，在组件中传递参数，修改代码如下所示。\njoke/list/list.component.html\n```HTML\n<!-- 代码块 -->\n<button class=\"btn btn-sm btn-success\" (click)=\"goJokeDetail()\">第n个笑话</button>\n<!-- 代码块 -->\n```\n\njoke/list/list.component.ts\n```typescript\nimport { Router } from '@angular/router'\n....//代码块\nconstructor(private router:Router) { }\n  goJokeDetail(){\n    let tsParmas={id:9,desc:'n星'}\n    this.router.navigate(['/joke/detail'],{queryParams:tsParmas})\n  }\n....//代码块\n```\n\n其效果图如下所示。\n\n![](https://bingolil.github.io/images/angular-h-route-joke-list-button.png)\n\n![](https://bingolil.github.io/images/angular-h-route-joken.png)\n\n### 错误传参方式\n> 组件 `UI` 的 `a标签url路径中` 直接写\n\n```HTML\n<!-- 代码块 -->\n<li class=\"list-group-item\">\n  <a routerLink=\"/joke/detail?jokeId=1&desc=3星\">第一个笑话</a>\n</li>\n<!-- 代码块 -->\n```\n在 `Angular` 中，这是一种错误的写法，其错误如下图所示。\n\n![](https://bingolil.github.io/images/angular-h-route-err1.png)\n\n> 组件 `UI` 中没有使用 `queryParams` 传参，采用 `Params` 传参\n\n在 `Angular7` 版本中，正常传递参数时（参数不是 `Url` 路径的一部分），只有 `queryParams` 属性才可以传递。\n\n使用其它属性（如 `Params`）传递时，程序会报错，因为 `Params` 不是 `a` 链接的属性，其代码以及错误如下所示。\n\n```HTML\n<!-- 代码块 -->\n <li class=\"list-group-item\">\n   <a routerLink=\"/joke/detail\" [Params]=\"{id:1,desc:'3星'}\">第一个笑话</a>\n</li>\n<!-- 代码块 -->\n```\n\n![](https://bingolil.github.io/images/angular-h-route-err2.png)\n\n### 获取参数\n修改 `joke/detail` 组件代码如下所示。\n\njoke/detail/detail.component.html\n\n```HTML\n<div *ngIf=\"nowJoke\">\n  <p>笑话id:{{nowJoke.id}}</p>\n  <p>笑话描述:{{nowJoke.desc}}</p>\n</div>\n\n<div *ngIf=\"secJoke\">\n  <p>笑话id:{{secJoke.id}}</p>\n  <p>笑话描述:{{secJoke.desc}}</p>\n</div>\n```\n\njoke/detail/detail.component.ts\n\n```typescript\nimport { ActivatedRoute, Params } from '@angular/router';\n....//代码块\nexport class DetailComponent implements OnInit {\n  constructor(private routeInfo:ActivatedRoute) { }\n  \n  nowJoke:any;\n  \n  secJoke={id:null,desc:null}\n  \n  ngOnInit() {\n    // this.routeInfo.queryParams.subscribe((data:Params)=>{\n    // \tthis.nowJoke=Object.assign({},data);\n    // })\n\n    //this.routeInfo.queryParamMap.subscribe((data:any)=>{\n    //  this.nowJoke=Object.assign({},data.params);\n    //})\n  \n    this.secJoke.id=this.routeInfo.snapshot.queryParamMap.get('id')\n    this.secJoke.desc=this.routeInfo.snapshot.queryParamMap.get('desc')\n  }\n }\n```\n\n获取参数效果图如下所示。\n\n![](https://bingolil.github.io/images/angular-h-route-joke-getParams.png)\n\n> 获取正常参数的方式暂时列举出3种，如上 `joke/detail/detail.component.ts` 所示。\n\n## 传参相似处\n\n### 参数快照和参数订阅\n参数快照和参数订阅都是获取路由参数的方法，它们的功能有一定的重复性，但也有一定的区别。\n\n在上面的代码中，获取参数的方法分为参数订阅（`subscribe`）和参数快照（`snapshot`）。\n\n其区别的代码示实例如下。\nproduct/detail/detail.component.html\n```HTML\n<!-- 代码块 -->\n<a routerLink=\"/product/2\">进入第二个产品</a>\n```\n\n参数订阅获取参数代码：product/detail/detail.component.ts\n```typescript\n//代码块\nthis.routerInfo.paramMap.subscribe(data=>{\n  this.productId=data.get('productId');\n});\n//代码块\n```\n\n![参数订阅](https://bingolil.github.io/images/angular-h-route-subscribe.png)\n\n参数快照获取参数代码：product/detail/detail.component.ts\n```typescript\n//代码块\nthis.productId=this.routerInfo.snapshot.paramMap.get(\"productId\");\n//代码块\n```\n\n![参数快照](https://bingolil.github.io/images/angular-h-route-snapshot.png)\n\n从上面的代码以及两张图对比中，可以发现，在参数订阅时，点击 `进入第二个产品` 链接，页面中的 `productId` 数据发生了改变，而在参数快照时，`Url` 地址发生改变，但页面中的 `productId` 并没有发生改变。\n\n> **原因**：这种情况主要发生在同一个组件的跳转。从 `product/1` 跳转到 `porduct/2` 时，都是在 `product/detail` 组件中跳转。当使用参数订阅，路由跳转时，根据订阅者模式，组件会再次获取路由参数；在使用参数快照时，由于在 `product/1` 路由下，`product/detail` 组件已经被创建了，当跳转到 `product/2` 时，组件不会重新执行 `ngOnInit()` 方法，所以不会重新获取参数。\n\n### paramMap 和 queryParamMap\n在路由传参中，`parmaMap` 和 `queryParamMap` 都有被使用，它们是有很大的区别的，`parmaMap` 用于获取路由传参时，其参数是路由 `Url` 路径的一部分；`queryParamMap` 用于获取正常的传递参数。\n\n其示例如下所示。\n\n![参数是路由 `Url` 路径的一部分](https://bingolil.github.io/images/angular-h-route-diff1.png)\n\n从上图可以知道，当路由参数是路由 `Url` 的一部分，其参数是放在 `params` 中的，若开发者从 `queryParams` 获取该参数是获取不到的。因为 `queryParams` 是一个空对象。 \n\n![参数是正常参数](https://bingolil.github.io/images/angular-h-route-diff2.png)\n\n从上图可以知道，当路由参数是正常参数时，其参数是放在 `queryParams` 中的，若开发者从 `params` 获取该参数是获取不到的。因为 `params` 是一个空对象。 \n\n### navigate 和 navigateByUrl\n`navigate` 和 `navigateByUrl` 两个方法都可以用于页面导航，但它们之间也有一定的区别。`router.navigateByUrl()` 方法是使用一个全新的路由地址替换已有的路由地址；`router.navigate()` 方法是基于一系列输入参数，产生一个新的 URL 地址。\n\n示例：在路由中存在 `辅助路由` 时，假如当前路由为 `/product(aux:chat)`，当运行 `router.navigateByUrl(['/product/1'])` 后，其 `Url` 地址栏为 `product/1`；当运行 `router.navigate(['/product/1'])` 后，其 `Url` 地址栏为 `product/1(aux:chat)`。\n\n\n\n\n\n\n","slug":"angular/learn-5","published":1,"updated":"2021-11-24T01:13:26.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwe931l1000wycsz0c8x5kqz","content":"<h2 id=\"路由守卫\"><a href=\"#路由守卫\" class=\"headerlink\" title=\"路由守卫\"></a>路由守卫</h2><h3 id=\"意义\"><a href=\"#意义\" class=\"headerlink\" title=\"意义\"></a>意义</h3><p>大部分系统中都存在权限问题，比如基本的权限如使用系统的人大致可以可以分为游客，用户，管理员。更加复杂的权限如用户也存在等级，不同等级的用户有不同的功能，而且管理员也存在等级，不同等级的管理员所管理的业务也有区别。</p>\n<p><code>Angular</code> 项目的权限问题可以使用 <code>路由守卫</code> 解决，即通过 <code>路由守卫</code> 判断系统的使用者是否有权限进入某一个路由。</p>\n<h3 id=\"基本示例\"><a href=\"#基本示例\" class=\"headerlink\" title=\"基本示例\"></a>基本示例</h3><p>1，在 <code>cmd</code> 环境下，使用命令 <code>ng new high-route --routing</code> 新建一个 <code>high-route</code> 项目。</p>\n<p>2，<code>cd high-route</code> 进入 <code>high-route</code> 目录下，使用命令 <code>ng g c home</code>，<code>ng g c login</code>，<code>ng g m console --routing</code>，<code>ng g c console/index</code> 新建 <code>home</code> 组件， <code>login</code> 组件，<code>console</code> 模块，<code>console</code> 模块下 <code>index</code> 组件。</p>\n<p>3，修改部分项目代码如下所示。<br>app-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">&#x27;full&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">component</span>:HomeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;login&#x27;</span>,<span class=\"attr\">component</span>: LoginComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;console&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./console/console.module#ConsoleModule&#x27;</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/console&#x27;]&quot;</span>&gt;</span>console<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>console-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">component</span>:IndexComponent&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>4，效果图如下所示。<br><img src=\"https://bingolil.github.io/images/angular-h-home.png\" alt=\"home 路由\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-login.png\" alt=\"login 路由\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-console.png\" alt=\"console 路由\"></p>\n<p>5，假如在实际项目中，<code>console</code> 模块为控制台台模块，系统的使用者是游客时无法进入 <code>console</code> 模块，只有游客注册登录后才能进入 <code>console</code> 模块。当系统使用者点击页面导航栏中 <code>console 链接</code> 时，系统需要判断当前系统的使用者是否有权限进入 <code>console</code> 模块，若有权限则进入，没权限进入 <code>login</code> 路由，这是路由守卫需要做的事情。使用 <code>ng g s route-guard</code> 创建守卫服务。修改 <code>route-guard.service.ts</code> 代码如下所示</p>\n<p>route-guard.service.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Injectable&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;CanActivate&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;<span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RouteGuardService</span> <span class=\"title\">implements</span> <span class=\"title\">CanActivate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  canActivate():<span class=\"built_in\">boolean</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//不可进入   若为return true 可以进入</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是最基本的路由守卫，当 <code>canActive()</code> 中返回 <code>false</code> 时，不可进入当前路由，返回 <code>true</code> 时可进入当前路由。</p>\n<p>6，在 <code>app-routing.modult.ts</code> 根路由配置信息文件中使用路由守卫，代码如下所示。</p>\n<p><code>app-routing.module.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; RouteGuardService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./route-guard.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">&#x27;full&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">component</span>:HomeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;login&#x27;</span>,<span class=\"attr\">component</span>:LoginComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;console&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./console/console.module#ConsoleModule&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">canActivate</span>:[RouteGuardService] <span class=\"comment\">//使用路由守卫的地方</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>home</code> 路由下，点击导航中的 <code>console</code> 链接，当路由守卫返回 <code>true</code> 时，页面进入 <code>console</code> 路由；当路由守卫返回 <code>false</code> 时，页面停留在 <code>home</code> 路由下，不能进入 <code>console</code> 路由页面。</p>\n<p>7，上面的路由守卫只是最基本的路由守卫。在实际的项目中，路由守卫不可能这么的简单，在实际的项目中，关于路由守卫是有一定的逻辑的。修改路由守卫代码如下所示。<br>route-guard.service.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router, CanActivate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRouteSnapshot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;<span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RouteGuardService</span> <span class=\"title\">implements</span> <span class=\"title\">CanActivate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> router:Router</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  canActivate(route: ActivatedRouteSnapshot):<span class=\"built_in\">boolean</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前路由名称</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nowPath = route.routeConfig.path;  </span><br><span class=\"line\">    <span class=\"comment\">// needGuardRoutes: 设置需要路由守卫的路由集合</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> needGuardRoutes = [<span class=\"string\">&#x27;console&#x27;</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> isLogin=<span class=\"literal\">true</span>;<span class=\"comment\">//是否有权限</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (needGuardRoutes.indexOf(nowPath) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isLogin) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.router.navigate([<span class=\"string\">&#x27;login&#x27;</span>]);<span class=\"comment\">// 没有权限，跳转到login路由获取权限</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;<span class=\"comment\">// 有权限，跳转到当前路由</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nowPath === <span class=\"string\">&#x27;login&#x27;</span>) &#123;<span class=\"comment\">// 当前路由是login时 </span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isLogin) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 没有权限，跳转到当前login路由获取权限</span></span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.router.navigate([<span class=\"string\">&#x27;home&#x27;</span>]);<span class=\"comment\">// 已登录，跳转到home</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行本地项目，当 <code>isLogin</code> 为 <code>true</code> 时（有权限），在 <code>home</code> 路由下点击导航栏的 <code>console</code> 链接时，进入 <code>console</code> 路由。</p>\n<p>当 <code>isLogin</code> 为 <code>false</code> 时（没有权限），在 <code>home</code> 路由下点击导航栏的 <code>console</code> 链接时，进入 <code>login</code> 路由。</p>\n<p>在实际的项目中，<code>isLogin</code> 不可能像现在这样直接写 <code>true</code> 和 <code>false</code> 来代表是否有权限，应该通过其它的办法来判断是否有权限（不同的系统有不同的判断方法）。</p>\n<h2 id=\"路由传参\"><a href=\"#路由传参\" class=\"headerlink\" title=\"路由传参\"></a>路由传参</h2><p>使用命令 <code>ng g m product --routing</code>，<code>ng g c product/list</code>，<code>ng g c product/detail</code> 创建 <code>product</code> 模块，<code>list</code> 组件，<code>detail</code> 组件。修改已有代码如下所示。</p>\n<p>app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....//代码块</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/console&#x27;]&quot;</span>&gt;</span>console<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 导航栏新增product链接 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/product&#x27;]&quot;</span>&gt;</span>product<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">....//代码块</span><br></pre></td></tr></table></figure>\n\n<p>app-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>:<span class=\"string\">&#x27;console&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./console/console.module#ConsoleModule&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">canActivate</span>:[RouteGuardService]</span><br><span class=\"line\">&#125;,  <span class=\"comment\">//新增product路由</span></span><br><span class=\"line\">&#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;product&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./product/product.module#ProductModule&#x27;</span>&#125;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>product-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ListComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./list/list.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; DetailComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./detail/detail.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [&#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">component</span>:ListComponent&#125;];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参数是-Url-路径一部分\"><a href=\"#参数是-Url-路径一部分\" class=\"headerlink\" title=\"参数是 Url 路径一部分\"></a>参数是 Url 路径一部分</h3><blockquote>\n<p>1，所传的参数是 <code>Url</code> 路径的一部分</p>\n</blockquote>\n<p>修改代码如下所示。<br>product-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">&#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">component</span>:ListComponent&#125;,</span><br><span class=\"line\">&#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;:productId&#x27;</span>,<span class=\"attr\">component</span>:DetailComponent&#125;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>product/list/list.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Router &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> router:Router</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">goToDetail</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// this.router.navigate([&#x27;/product/3&#x27;]);</span></span><br><span class=\"line\">  <span class=\"comment\">// this.router.navigate([&#x27;/product&#x27;,3]);</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.router.navigateByUrl(<span class=\"string\">&#x27;/product/3&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>product/list/list.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--代码块--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group&quot;</span>&gt;</span></span><br><span class=\"line\">                         <span class=\"comment\">&lt;!-- &lt;a routerLink=&quot;/product/1&quot;&gt;第一个产品&lt;/a&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/product/1&#x27;]&quot;</span>&gt;</span>第一个产品<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/product&#x27;,2]&quot;</span>&gt;</span>第二个产品<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-default&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;goToDetail()&quot;</span>&gt;</span>第三个产品<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--代码块--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>product/detail/detail.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">productId</span>:<span class=\"built_in\">any</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> routerInfo:ActivatedRoute</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this.productId=this.routerInfo.snapshot.params[&quot;productId&quot;];</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// this.productId=this.routerInfo.snapshot.paramMap.get(&quot;productId&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// this.routerInfo.params.subscribe(data=&gt;&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   this.productId=data[&#x27;productId&#x27;];</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.routerInfo.paramMap.subscribe(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.productId=data.get(<span class=\"string\">&#x27;productId&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的 <code>product/detail/detail.component.ts</code> 代码中，获取参数的参数名应该和路由配置信息文件 <code>product-routing.module.ts</code> 中 <code>:productId</code> 的 <code>productId</code> 相同。不然获取不到参数。</p>\n<p>product/detail/detail.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;breadcrumb&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/home&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/product&quot;</span>&gt;</span>product<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span>detail<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>当前产品id为：&#123;&#123;productId&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>传参效果图如下所示。<br><img src=\"https://bingolil.github.io/images/angular-h-route-list.png\" alt=\"product路由\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-detail1.png\" alt=\"点击product页面中 第一个产品\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-detail2.png\" alt=\"点击product页面中 第二个产品\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-detail3.png\" alt=\"点击product页面中 第三个产品 按钮\"></p>\n<blockquote>\n<p>当参数是 <code>Url</code> 路径一部分时，使用该参数路由有两种方法。1，在页面中使用，如 <code>product/list/list.component.html</code>，暂时列举出3种格式（文中已列举）；2，在组件中使用，如 <code>product/list/list.component.ts</code>，有3种格式（文中已列举）。接收该参数的方式暂时列举出4种格式（已在 <code>product/detail/detail.component.ts</code> 中列举出来），推荐使用其中存在 <code>Map</code> 字符的方法，因为在 <code>Angular</code> 以后的版本中关于路由参数会淘汰掉不存在 <code>Map</code> 字符的方法属性。</p>\n</blockquote>\n<h3 id=\"正常传参\"><a href=\"#正常传参\" class=\"headerlink\" title=\"正常传参\"></a>正常传参</h3><blockquote>\n<p>如果在 <code>url</code> 中传递的参数不止一个，是多个的话，参数是 <code>Url</code> 路径的一部分显然不是一个很好的方式，这时应该传递参数应该使用正常的模式，即参数在 <code>Url</code> 的路径后面，以 <code>?</code> 号隔开</p>\n</blockquote>\n<p>1，使用命令 <code>ng g m joke --routing</code>，<code>ng g c joke/list</code> <code>ng g c joke/detail</code> 创建 <code>joke</code> 模块，<code>joke/list</code> 组件，<code>joke/detail</code> 组件，修改已有代码如下所示。<br>app-routing.module.st</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">&#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;product&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./product/product.module#ProductModule&#x27;</span>&#125;,</span><br><span class=\"line\">&#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;joke&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./joke/joke.module#JokeModule&#x27;</span>&#125; <span class=\"comment\">//新增路由</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/product&#x27;]&quot;</span>&gt;</span>product<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 导航栏新增joke链接 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/joke&#x27;]&quot;</span>&gt;</span>joke<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>joke-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ListComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./list/list.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; DetailComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./detail/detail.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">component</span>:ListComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;detail&#x27;</span>,<span class=\"attr\">component</span>:DetailComponent&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>2，在组件 <code>UI</code> 中传递参数<br>修改 <code>joke/list.component.html</code> 代码如下所示。</p>\n<p>joke/list/list.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/joke/detail&quot;</span> [<span class=\"attr\">queryParams</span>]=<span class=\"string\">&quot;&#123;id:1,desc:3星&#125;&quot;</span>&gt;</span>第一个笑话<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/joke/detail&quot;</span> [<span class=\"attr\">queryParams</span>]=<span class=\"string\">&quot;secParmas&quot;</span>&gt;</span>第二个笑话<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span><span class=\"comment\">&lt;!-- routerLink和[routerLink] --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/joke/detail&#x27;]&quot;</span> [<span class=\"attr\">queryParams</span>]=<span class=\"string\">&quot;thiParmas&quot;</span>&gt;</span>第三个笑话<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br></pre></td></tr></table></figure>\n<p>joke/list/list.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">secParmas=&#123;<span class=\"attr\">id</span>:<span class=\"number\">2</span>,<span class=\"attr\">desc</span>:<span class=\"string\">&#x27;6星&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">thiParmas=&#123;<span class=\"attr\">id</span>:<span class=\"number\">3</span>,<span class=\"attr\">desc</span>:<span class=\"string\">&#x27;9星&#x27;</span>&#125;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>参数传递的效果图如下所示。</p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-joke-list.png\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-joke1.png\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-joke2.png\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-joke3.png\"></p>\n<blockquote>\n<p>在组件 <code>UI</code> 中传递参数有多种格式。</p>\n</blockquote>\n<p>3，在组件中传递参数，修改代码如下所示。<br>joke/list/list.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-success&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;goJokeDetail()&quot;</span>&gt;</span>第n个笑话<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>joke/list/list.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> router:Router</span>)</span> &#123; &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">goJokeDetail</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tsParmas=&#123;<span class=\"attr\">id</span>:<span class=\"number\">9</span>,<span class=\"attr\">desc</span>:<span class=\"string\">&#x27;n星&#x27;</span>&#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.router.navigate([<span class=\"string\">&#x27;/joke/detail&#x27;</span>],&#123;<span class=\"attr\">queryParams</span>:tsParmas&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>其效果图如下所示。</p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-joke-list-button.png\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-joken.png\"></p>\n<h3 id=\"错误传参方式\"><a href=\"#错误传参方式\" class=\"headerlink\" title=\"错误传参方式\"></a>错误传参方式</h3><blockquote>\n<p>组件 <code>UI</code> 的 <code>a标签url路径中</code> 直接写</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/joke/detail?jokeId=1&amp;desc=3星&quot;</span>&gt;</span>第一个笑话<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在 <code>Angular</code> 中，这是一种错误的写法，其错误如下图所示。</p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-err1.png\"></p>\n<blockquote>\n<p>组件 <code>UI</code> 中没有使用 <code>queryParams</code> 传参，采用 <code>Params</code> 传参</p>\n</blockquote>\n<p>在 <code>Angular7</code> 版本中，正常传递参数时（参数不是 <code>Url</code> 路径的一部分），只有 <code>queryParams</code> 属性才可以传递。</p>\n<p>使用其它属性（如 <code>Params</code>）传递时，程序会报错，因为 <code>Params</code> 不是 <code>a</code> 链接的属性，其代码以及错误如下所示。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/joke/detail&quot;</span> [<span class=\"attr\">Params</span>]=<span class=\"string\">&quot;&#123;id:1,desc:&#x27;3星&#x27;&#125;&quot;</span>&gt;</span>第一个笑话<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-err2.png\"></p>\n<h3 id=\"获取参数\"><a href=\"#获取参数\" class=\"headerlink\" title=\"获取参数\"></a>获取参数</h3><p>修改 <code>joke/detail</code> 组件代码如下所示。</p>\n<p>joke/detail/detail.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;nowJoke&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>笑话id:&#123;&#123;nowJoke.id&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>笑话描述:&#123;&#123;nowJoke.desc&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;secJoke&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>笑话id:&#123;&#123;secJoke.id&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>笑话描述:&#123;&#123;secJoke.desc&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>joke/detail/detail.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute, Params &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> routeInfo:ActivatedRoute</span>)</span> &#123; &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">nowJoke</span>:<span class=\"built_in\">any</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  secJoke=&#123;<span class=\"attr\">id</span>:<span class=\"literal\">null</span>,<span class=\"attr\">desc</span>:<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this.routeInfo.queryParams.subscribe((data:Params)=&gt;&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// \tthis.nowJoke=Object.assign(&#123;&#125;,data);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//this.routeInfo.queryParamMap.subscribe((data:any)=&gt;&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//  this.nowJoke=Object.assign(&#123;&#125;,data.params);</span></span><br><span class=\"line\">    <span class=\"comment\">//&#125;)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.secJoke.id=<span class=\"built_in\">this</span>.routeInfo.snapshot.queryParamMap.get(<span class=\"string\">&#x27;id&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.secJoke.desc=<span class=\"built_in\">this</span>.routeInfo.snapshot.queryParamMap.get(<span class=\"string\">&#x27;desc&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>获取参数效果图如下所示。</p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-joke-getParams.png\"></p>\n<blockquote>\n<p>获取正常参数的方式暂时列举出3种，如上 <code>joke/detail/detail.component.ts</code> 所示。</p>\n</blockquote>\n<h2 id=\"传参相似处\"><a href=\"#传参相似处\" class=\"headerlink\" title=\"传参相似处\"></a>传参相似处</h2><h3 id=\"参数快照和参数订阅\"><a href=\"#参数快照和参数订阅\" class=\"headerlink\" title=\"参数快照和参数订阅\"></a>参数快照和参数订阅</h3><p>参数快照和参数订阅都是获取路由参数的方法，它们的功能有一定的重复性，但也有一定的区别。</p>\n<p>在上面的代码中，获取参数的方法分为参数订阅（<code>subscribe</code>）和参数快照（<code>snapshot</code>）。</p>\n<p>其区别的代码示实例如下。<br>product/detail/detail.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/product/2&quot;</span>&gt;</span>进入第二个产品<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>参数订阅获取参数代码：product/detail/detail.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.routerInfo.paramMap.subscribe(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.productId=data.get(<span class=\"string\">&#x27;productId&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-subscribe.png\" alt=\"参数订阅\"></p>\n<p>参数快照获取参数代码：product/detail/detail.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.productId=<span class=\"built_in\">this</span>.routerInfo.snapshot.paramMap.get(<span class=\"string\">&quot;productId&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-snapshot.png\" alt=\"参数快照\"></p>\n<p>从上面的代码以及两张图对比中，可以发现，在参数订阅时，点击 <code>进入第二个产品</code> 链接，页面中的 <code>productId</code> 数据发生了改变，而在参数快照时，<code>Url</code> 地址发生改变，但页面中的 <code>productId</code> 并没有发生改变。</p>\n<blockquote>\n<p><strong>原因</strong>：这种情况主要发生在同一个组件的跳转。从 <code>product/1</code> 跳转到 <code>porduct/2</code> 时，都是在 <code>product/detail</code> 组件中跳转。当使用参数订阅，路由跳转时，根据订阅者模式，组件会再次获取路由参数；在使用参数快照时，由于在 <code>product/1</code> 路由下，<code>product/detail</code> 组件已经被创建了，当跳转到 <code>product/2</code> 时，组件不会重新执行 <code>ngOnInit()</code> 方法，所以不会重新获取参数。</p>\n</blockquote>\n<h3 id=\"paramMap-和-queryParamMap\"><a href=\"#paramMap-和-queryParamMap\" class=\"headerlink\" title=\"paramMap 和 queryParamMap\"></a>paramMap 和 queryParamMap</h3><p>在路由传参中，<code>parmaMap</code> 和 <code>queryParamMap</code> 都有被使用，它们是有很大的区别的，<code>parmaMap</code> 用于获取路由传参时，其参数是路由 <code>Url</code> 路径的一部分；<code>queryParamMap</code> 用于获取正常的传递参数。</p>\n<p>其示例如下所示。</p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-diff1.png\" alt=\"参数是路由 `Url` 路径的一部分\"></p>\n<p>从上图可以知道，当路由参数是路由 <code>Url</code> 的一部分，其参数是放在 <code>params</code> 中的，若开发者从 <code>queryParams</code> 获取该参数是获取不到的。因为 <code>queryParams</code> 是一个空对象。 </p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-diff2.png\" alt=\"参数是正常参数\"></p>\n<p>从上图可以知道，当路由参数是正常参数时，其参数是放在 <code>queryParams</code> 中的，若开发者从 <code>params</code> 获取该参数是获取不到的。因为 <code>params</code> 是一个空对象。 </p>\n<h3 id=\"navigate-和-navigateByUrl\"><a href=\"#navigate-和-navigateByUrl\" class=\"headerlink\" title=\"navigate 和 navigateByUrl\"></a>navigate 和 navigateByUrl</h3><p><code>navigate</code> 和 <code>navigateByUrl</code> 两个方法都可以用于页面导航，但它们之间也有一定的区别。<code>router.navigateByUrl()</code> 方法是使用一个全新的路由地址替换已有的路由地址；<code>router.navigate()</code> 方法是基于一系列输入参数，产生一个新的 URL 地址。</p>\n<p>示例：在路由中存在 <code>辅助路由</code> 时，假如当前路由为 <code>/product(aux:chat)</code>，当运行 <code>router.navigateByUrl([&#39;/product/1&#39;])</code> 后，其 <code>Url</code> 地址栏为 <code>product/1</code>；当运行 <code>router.navigate([&#39;/product/1&#39;])</code> 后，其 <code>Url</code> 地址栏为 <code>product/1(aux:chat)</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"路由守卫\"><a href=\"#路由守卫\" class=\"headerlink\" title=\"路由守卫\"></a>路由守卫</h2><h3 id=\"意义\"><a href=\"#意义\" class=\"headerlink\" title=\"意义\"></a>意义</h3><p>大部分系统中都存在权限问题，比如基本的权限如使用系统的人大致可以可以分为游客，用户，管理员。更加复杂的权限如用户也存在等级，不同等级的用户有不同的功能，而且管理员也存在等级，不同等级的管理员所管理的业务也有区别。</p>\n<p><code>Angular</code> 项目的权限问题可以使用 <code>路由守卫</code> 解决，即通过 <code>路由守卫</code> 判断系统的使用者是否有权限进入某一个路由。</p>\n<h3 id=\"基本示例\"><a href=\"#基本示例\" class=\"headerlink\" title=\"基本示例\"></a>基本示例</h3><p>1，在 <code>cmd</code> 环境下，使用命令 <code>ng new high-route --routing</code> 新建一个 <code>high-route</code> 项目。</p>\n<p>2，<code>cd high-route</code> 进入 <code>high-route</code> 目录下，使用命令 <code>ng g c home</code>，<code>ng g c login</code>，<code>ng g m console --routing</code>，<code>ng g c console/index</code> 新建 <code>home</code> 组件， <code>login</code> 组件，<code>console</code> 模块，<code>console</code> 模块下 <code>index</code> 组件。</p>\n<p>3，修改部分项目代码如下所示。<br>app-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">&#x27;full&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">component</span>:HomeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;login&#x27;</span>,<span class=\"attr\">component</span>: LoginComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;console&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./console/console.module#ConsoleModule&#x27;</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav navbar-nav&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&#x27;/home&#x27;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/console&#x27;]&quot;</span>&gt;</span>console<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>console-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">component</span>:IndexComponent&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>4，效果图如下所示。<br><img src=\"https://bingolil.github.io/images/angular-h-home.png\" alt=\"home 路由\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-login.png\" alt=\"login 路由\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-console.png\" alt=\"console 路由\"></p>\n<p>5，假如在实际项目中，<code>console</code> 模块为控制台台模块，系统的使用者是游客时无法进入 <code>console</code> 模块，只有游客注册登录后才能进入 <code>console</code> 模块。当系统使用者点击页面导航栏中 <code>console 链接</code> 时，系统需要判断当前系统的使用者是否有权限进入 <code>console</code> 模块，若有权限则进入，没权限进入 <code>login</code> 路由，这是路由守卫需要做的事情。使用 <code>ng g s route-guard</code> 创建守卫服务。修改 <code>route-guard.service.ts</code> 代码如下所示</p>\n<p>route-guard.service.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Injectable&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;CanActivate&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;<span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RouteGuardService</span> <span class=\"title\">implements</span> <span class=\"title\">CanActivate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  canActivate():<span class=\"built_in\">boolean</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;<span class=\"comment\">//不可进入   若为return true 可以进入</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是最基本的路由守卫，当 <code>canActive()</code> 中返回 <code>false</code> 时，不可进入当前路由，返回 <code>true</code> 时可进入当前路由。</p>\n<p>6，在 <code>app-routing.modult.ts</code> 根路由配置信息文件中使用路由守卫，代码如下所示。</p>\n<p><code>app-routing.module.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; RouteGuardService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./route-guard.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">redirectTo</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">pathMatch</span>:<span class=\"string\">&#x27;full&#x27;</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;home&#x27;</span>,<span class=\"attr\">component</span>:HomeComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;login&#x27;</span>,<span class=\"attr\">component</span>:LoginComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;console&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./console/console.module#ConsoleModule&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">canActivate</span>:[RouteGuardService] <span class=\"comment\">//使用路由守卫的地方</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>home</code> 路由下，点击导航中的 <code>console</code> 链接，当路由守卫返回 <code>true</code> 时，页面进入 <code>console</code> 路由；当路由守卫返回 <code>false</code> 时，页面停留在 <code>home</code> 路由下，不能进入 <code>console</code> 路由页面。</p>\n<p>7，上面的路由守卫只是最基本的路由守卫。在实际的项目中，路由守卫不可能这么的简单，在实际的项目中，关于路由守卫是有一定的逻辑的。修改路由守卫代码如下所示。<br>route-guard.service.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router, CanActivate &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRouteSnapshot &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;<span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RouteGuardService</span> <span class=\"title\">implements</span> <span class=\"title\">CanActivate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> router:Router</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  canActivate(route: ActivatedRouteSnapshot):<span class=\"built_in\">boolean</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前路由名称</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nowPath = route.routeConfig.path;  </span><br><span class=\"line\">    <span class=\"comment\">// needGuardRoutes: 设置需要路由守卫的路由集合</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> needGuardRoutes = [<span class=\"string\">&#x27;console&#x27;</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> isLogin=<span class=\"literal\">true</span>;<span class=\"comment\">//是否有权限</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (needGuardRoutes.indexOf(nowPath) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isLogin) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.router.navigate([<span class=\"string\">&#x27;login&#x27;</span>]);<span class=\"comment\">// 没有权限，跳转到login路由获取权限</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;<span class=\"comment\">// 有权限，跳转到当前路由</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nowPath === <span class=\"string\">&#x27;login&#x27;</span>) &#123;<span class=\"comment\">// 当前路由是login时 </span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isLogin) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 没有权限，跳转到当前login路由获取权限</span></span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.router.navigate([<span class=\"string\">&#x27;home&#x27;</span>]);<span class=\"comment\">// 已登录，跳转到home</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行本地项目，当 <code>isLogin</code> 为 <code>true</code> 时（有权限），在 <code>home</code> 路由下点击导航栏的 <code>console</code> 链接时，进入 <code>console</code> 路由。</p>\n<p>当 <code>isLogin</code> 为 <code>false</code> 时（没有权限），在 <code>home</code> 路由下点击导航栏的 <code>console</code> 链接时，进入 <code>login</code> 路由。</p>\n<p>在实际的项目中，<code>isLogin</code> 不可能像现在这样直接写 <code>true</code> 和 <code>false</code> 来代表是否有权限，应该通过其它的办法来判断是否有权限（不同的系统有不同的判断方法）。</p>\n<h2 id=\"路由传参\"><a href=\"#路由传参\" class=\"headerlink\" title=\"路由传参\"></a>路由传参</h2><p>使用命令 <code>ng g m product --routing</code>，<code>ng g c product/list</code>，<code>ng g c product/detail</code> 创建 <code>product</code> 模块，<code>list</code> 组件，<code>detail</code> 组件。修改已有代码如下所示。</p>\n<p>app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....//代码块</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/console&#x27;]&quot;</span>&gt;</span>console<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 导航栏新增product链接 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/product&#x27;]&quot;</span>&gt;</span>product<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">....//代码块</span><br></pre></td></tr></table></figure>\n\n<p>app-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>:<span class=\"string\">&#x27;console&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./console/console.module#ConsoleModule&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">canActivate</span>:[RouteGuardService]</span><br><span class=\"line\">&#125;,  <span class=\"comment\">//新增product路由</span></span><br><span class=\"line\">&#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;product&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./product/product.module#ProductModule&#x27;</span>&#125;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>product-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ListComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./list/list.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; DetailComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./detail/detail.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [&#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">component</span>:ListComponent&#125;];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参数是-Url-路径一部分\"><a href=\"#参数是-Url-路径一部分\" class=\"headerlink\" title=\"参数是 Url 路径一部分\"></a>参数是 Url 路径一部分</h3><blockquote>\n<p>1，所传的参数是 <code>Url</code> 路径的一部分</p>\n</blockquote>\n<p>修改代码如下所示。<br>product-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">&#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">component</span>:ListComponent&#125;,</span><br><span class=\"line\">&#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;:productId&#x27;</span>,<span class=\"attr\">component</span>:DetailComponent&#125;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>product/list/list.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Router &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> router:Router</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">goToDetail</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// this.router.navigate([&#x27;/product/3&#x27;]);</span></span><br><span class=\"line\">  <span class=\"comment\">// this.router.navigate([&#x27;/product&#x27;,3]);</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.router.navigateByUrl(<span class=\"string\">&#x27;/product/3&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>product/list/list.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--代码块--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group&quot;</span>&gt;</span></span><br><span class=\"line\">                         <span class=\"comment\">&lt;!-- &lt;a routerLink=&quot;/product/1&quot;&gt;第一个产品&lt;/a&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/product/1&#x27;]&quot;</span>&gt;</span>第一个产品<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/product&#x27;,2]&quot;</span>&gt;</span>第二个产品<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-default&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;goToDetail()&quot;</span>&gt;</span>第三个产品<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--代码块--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>product/detail/detail.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">productId</span>:<span class=\"built_in\">any</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> routerInfo:ActivatedRoute</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this.productId=this.routerInfo.snapshot.params[&quot;productId&quot;];</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// this.productId=this.routerInfo.snapshot.paramMap.get(&quot;productId&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// this.routerInfo.params.subscribe(data=&gt;&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   this.productId=data[&#x27;productId&#x27;];</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.routerInfo.paramMap.subscribe(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.productId=data.get(<span class=\"string\">&#x27;productId&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的 <code>product/detail/detail.component.ts</code> 代码中，获取参数的参数名应该和路由配置信息文件 <code>product-routing.module.ts</code> 中 <code>:productId</code> 的 <code>productId</code> 相同。不然获取不到参数。</p>\n<p>product/detail/detail.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;breadcrumb&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/home&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/product&quot;</span>&gt;</span>product<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span>detail<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>当前产品id为：&#123;&#123;productId&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>传参效果图如下所示。<br><img src=\"https://bingolil.github.io/images/angular-h-route-list.png\" alt=\"product路由\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-detail1.png\" alt=\"点击product页面中 第一个产品\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-detail2.png\" alt=\"点击product页面中 第二个产品\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-detail3.png\" alt=\"点击product页面中 第三个产品 按钮\"></p>\n<blockquote>\n<p>当参数是 <code>Url</code> 路径一部分时，使用该参数路由有两种方法。1，在页面中使用，如 <code>product/list/list.component.html</code>，暂时列举出3种格式（文中已列举）；2，在组件中使用，如 <code>product/list/list.component.ts</code>，有3种格式（文中已列举）。接收该参数的方式暂时列举出4种格式（已在 <code>product/detail/detail.component.ts</code> 中列举出来），推荐使用其中存在 <code>Map</code> 字符的方法，因为在 <code>Angular</code> 以后的版本中关于路由参数会淘汰掉不存在 <code>Map</code> 字符的方法属性。</p>\n</blockquote>\n<h3 id=\"正常传参\"><a href=\"#正常传参\" class=\"headerlink\" title=\"正常传参\"></a>正常传参</h3><blockquote>\n<p>如果在 <code>url</code> 中传递的参数不止一个，是多个的话，参数是 <code>Url</code> 路径的一部分显然不是一个很好的方式，这时应该传递参数应该使用正常的模式，即参数在 <code>Url</code> 的路径后面，以 <code>?</code> 号隔开</p>\n</blockquote>\n<p>1，使用命令 <code>ng g m joke --routing</code>，<code>ng g c joke/list</code> <code>ng g c joke/detail</code> 创建 <code>joke</code> 模块，<code>joke/list</code> 组件，<code>joke/detail</code> 组件，修改已有代码如下所示。<br>app-routing.module.st</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">&#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;product&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./product/product.module#ProductModule&#x27;</span>&#125;,</span><br><span class=\"line\">&#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;joke&#x27;</span>,<span class=\"attr\">loadChildren</span>:<span class=\"string\">&#x27;./joke/joke.module#JokeModule&#x27;</span>&#125; <span class=\"comment\">//新增路由</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>app.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/product&#x27;]&quot;</span>&gt;</span>product<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 导航栏新增joke链接 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">routerLinkActive</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/joke&#x27;]&quot;</span>&gt;</span>joke<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>joke-routing.module.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ListComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./list/list.component&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; DetailComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./detail/detail.component&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"attr\">component</span>:ListComponent&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">path</span>:<span class=\"string\">&#x27;detail&#x27;</span>,<span class=\"attr\">component</span>:DetailComponent&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>2，在组件 <code>UI</code> 中传递参数<br>修改 <code>joke/list.component.html</code> 代码如下所示。</p>\n<p>joke/list/list.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/joke/detail&quot;</span> [<span class=\"attr\">queryParams</span>]=<span class=\"string\">&quot;&#123;id:1,desc:3星&#125;&quot;</span>&gt;</span>第一个笑话<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/joke/detail&quot;</span> [<span class=\"attr\">queryParams</span>]=<span class=\"string\">&quot;secParmas&quot;</span>&gt;</span>第二个笑话<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span><span class=\"comment\">&lt;!-- routerLink和[routerLink] --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> [<span class=\"attr\">routerLink</span>]=<span class=\"string\">&quot;[&#x27;/joke/detail&#x27;]&quot;</span> [<span class=\"attr\">queryParams</span>]=<span class=\"string\">&quot;thiParmas&quot;</span>&gt;</span>第三个笑话<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br></pre></td></tr></table></figure>\n<p>joke/list/list.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">secParmas=&#123;<span class=\"attr\">id</span>:<span class=\"number\">2</span>,<span class=\"attr\">desc</span>:<span class=\"string\">&#x27;6星&#x27;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">thiParmas=&#123;<span class=\"attr\">id</span>:<span class=\"number\">3</span>,<span class=\"attr\">desc</span>:<span class=\"string\">&#x27;9星&#x27;</span>&#125;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>参数传递的效果图如下所示。</p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-joke-list.png\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-joke1.png\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-joke2.png\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-joke3.png\"></p>\n<blockquote>\n<p>在组件 <code>UI</code> 中传递参数有多种格式。</p>\n</blockquote>\n<p>3，在组件中传递参数，修改代码如下所示。<br>joke/list/list.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm btn-success&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;goJokeDetail()&quot;</span>&gt;</span>第n个笑话<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>joke/list/list.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Router &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> router:Router</span>)</span> &#123; &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">goJokeDetail</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tsParmas=&#123;<span class=\"attr\">id</span>:<span class=\"number\">9</span>,<span class=\"attr\">desc</span>:<span class=\"string\">&#x27;n星&#x27;</span>&#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.router.navigate([<span class=\"string\">&#x27;/joke/detail&#x27;</span>],&#123;<span class=\"attr\">queryParams</span>:tsParmas&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p>其效果图如下所示。</p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-joke-list-button.png\"></p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-joken.png\"></p>\n<h3 id=\"错误传参方式\"><a href=\"#错误传参方式\" class=\"headerlink\" title=\"错误传参方式\"></a>错误传参方式</h3><blockquote>\n<p>组件 <code>UI</code> 的 <code>a标签url路径中</code> 直接写</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/joke/detail?jokeId=1&amp;desc=3星&quot;</span>&gt;</span>第一个笑话<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在 <code>Angular</code> 中，这是一种错误的写法，其错误如下图所示。</p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-err1.png\"></p>\n<blockquote>\n<p>组件 <code>UI</code> 中没有使用 <code>queryParams</code> 传参，采用 <code>Params</code> 传参</p>\n</blockquote>\n<p>在 <code>Angular7</code> 版本中，正常传递参数时（参数不是 <code>Url</code> 路径的一部分），只有 <code>queryParams</code> 属性才可以传递。</p>\n<p>使用其它属性（如 <code>Params</code>）传递时，程序会报错，因为 <code>Params</code> 不是 <code>a</code> 链接的属性，其代码以及错误如下所示。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/joke/detail&quot;</span> [<span class=\"attr\">Params</span>]=<span class=\"string\">&quot;&#123;id:1,desc:&#x27;3星&#x27;&#125;&quot;</span>&gt;</span>第一个笑话<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-err2.png\"></p>\n<h3 id=\"获取参数\"><a href=\"#获取参数\" class=\"headerlink\" title=\"获取参数\"></a>获取参数</h3><p>修改 <code>joke/detail</code> 组件代码如下所示。</p>\n<p>joke/detail/detail.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;nowJoke&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>笑话id:&#123;&#123;nowJoke.id&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>笑话描述:&#123;&#123;nowJoke.desc&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;secJoke&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>笑话id:&#123;&#123;secJoke.id&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>笑话描述:&#123;&#123;secJoke.desc&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>joke/detail/detail.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute, Params &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DetailComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> routeInfo:ActivatedRoute</span>)</span> &#123; &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">nowJoke</span>:<span class=\"built_in\">any</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  secJoke=&#123;<span class=\"attr\">id</span>:<span class=\"literal\">null</span>,<span class=\"attr\">desc</span>:<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ngOnInit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this.routeInfo.queryParams.subscribe((data:Params)=&gt;&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// \tthis.nowJoke=Object.assign(&#123;&#125;,data);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//this.routeInfo.queryParamMap.subscribe((data:any)=&gt;&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//  this.nowJoke=Object.assign(&#123;&#125;,data.params);</span></span><br><span class=\"line\">    <span class=\"comment\">//&#125;)</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.secJoke.id=<span class=\"built_in\">this</span>.routeInfo.snapshot.queryParamMap.get(<span class=\"string\">&#x27;id&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.secJoke.desc=<span class=\"built_in\">this</span>.routeInfo.snapshot.queryParamMap.get(<span class=\"string\">&#x27;desc&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>获取参数效果图如下所示。</p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-joke-getParams.png\"></p>\n<blockquote>\n<p>获取正常参数的方式暂时列举出3种，如上 <code>joke/detail/detail.component.ts</code> 所示。</p>\n</blockquote>\n<h2 id=\"传参相似处\"><a href=\"#传参相似处\" class=\"headerlink\" title=\"传参相似处\"></a>传参相似处</h2><h3 id=\"参数快照和参数订阅\"><a href=\"#参数快照和参数订阅\" class=\"headerlink\" title=\"参数快照和参数订阅\"></a>参数快照和参数订阅</h3><p>参数快照和参数订阅都是获取路由参数的方法，它们的功能有一定的重复性，但也有一定的区别。</p>\n<p>在上面的代码中，获取参数的方法分为参数订阅（<code>subscribe</code>）和参数快照（<code>snapshot</code>）。</p>\n<p>其区别的代码示实例如下。<br>product/detail/detail.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 代码块 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/product/2&quot;</span>&gt;</span>进入第二个产品<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>参数订阅获取参数代码：product/detail/detail.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.routerInfo.paramMap.subscribe(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.productId=data.get(<span class=\"string\">&#x27;productId&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-subscribe.png\" alt=\"参数订阅\"></p>\n<p>参数快照获取参数代码：product/detail/detail.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.productId=<span class=\"built_in\">this</span>.routerInfo.snapshot.paramMap.get(<span class=\"string\">&quot;productId&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-snapshot.png\" alt=\"参数快照\"></p>\n<p>从上面的代码以及两张图对比中，可以发现，在参数订阅时，点击 <code>进入第二个产品</code> 链接，页面中的 <code>productId</code> 数据发生了改变，而在参数快照时，<code>Url</code> 地址发生改变，但页面中的 <code>productId</code> 并没有发生改变。</p>\n<blockquote>\n<p><strong>原因</strong>：这种情况主要发生在同一个组件的跳转。从 <code>product/1</code> 跳转到 <code>porduct/2</code> 时，都是在 <code>product/detail</code> 组件中跳转。当使用参数订阅，路由跳转时，根据订阅者模式，组件会再次获取路由参数；在使用参数快照时，由于在 <code>product/1</code> 路由下，<code>product/detail</code> 组件已经被创建了，当跳转到 <code>product/2</code> 时，组件不会重新执行 <code>ngOnInit()</code> 方法，所以不会重新获取参数。</p>\n</blockquote>\n<h3 id=\"paramMap-和-queryParamMap\"><a href=\"#paramMap-和-queryParamMap\" class=\"headerlink\" title=\"paramMap 和 queryParamMap\"></a>paramMap 和 queryParamMap</h3><p>在路由传参中，<code>parmaMap</code> 和 <code>queryParamMap</code> 都有被使用，它们是有很大的区别的，<code>parmaMap</code> 用于获取路由传参时，其参数是路由 <code>Url</code> 路径的一部分；<code>queryParamMap</code> 用于获取正常的传递参数。</p>\n<p>其示例如下所示。</p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-diff1.png\" alt=\"参数是路由 `Url` 路径的一部分\"></p>\n<p>从上图可以知道，当路由参数是路由 <code>Url</code> 的一部分，其参数是放在 <code>params</code> 中的，若开发者从 <code>queryParams</code> 获取该参数是获取不到的。因为 <code>queryParams</code> 是一个空对象。 </p>\n<p><img src=\"https://bingolil.github.io/images/angular-h-route-diff2.png\" alt=\"参数是正常参数\"></p>\n<p>从上图可以知道，当路由参数是正常参数时，其参数是放在 <code>queryParams</code> 中的，若开发者从 <code>params</code> 获取该参数是获取不到的。因为 <code>params</code> 是一个空对象。 </p>\n<h3 id=\"navigate-和-navigateByUrl\"><a href=\"#navigate-和-navigateByUrl\" class=\"headerlink\" title=\"navigate 和 navigateByUrl\"></a>navigate 和 navigateByUrl</h3><p><code>navigate</code> 和 <code>navigateByUrl</code> 两个方法都可以用于页面导航，但它们之间也有一定的区别。<code>router.navigateByUrl()</code> 方法是使用一个全新的路由地址替换已有的路由地址；<code>router.navigate()</code> 方法是基于一系列输入参数，产生一个新的 URL 地址。</p>\n<p>示例：在路由中存在 <code>辅助路由</code> 时，假如当前路由为 <code>/product(aux:chat)</code>，当运行 <code>router.navigateByUrl([&#39;/product/1&#39;])</code> 后，其 <code>Url</code> 地址栏为 <code>product/1</code>；当运行 <code>router.navigate([&#39;/product/1&#39;])</code> 后，其 <code>Url</code> 地址栏为 <code>product/1(aux:chat)</code>。</p>\n"},{"title":"Angular学习-6-表单1","date":"2019-01-06T16:00:00.000Z","description":"Angular 提供了两种不同的方法来通过表单处理用户输入：响应式表单和模板驱动表单。 两者都从视图中捕获用户输入事件、验证用户输入、创建表单模型、修改数据模型，并提供跟踪这些更改的途径。","_content":"在 `Angular` 中，提供了两种表单来处理用户的输入，`模板驱动表单` 和 `响应式表单`。\n## 建立表单模型\n### 响应式表单\n\n> **前提条件**：在需要使用响应式表单的组件所在的模块中引入 `ReactiveFormsModule`\n\n最基本的响应式表单\n\nHtml\n```HTML\n<input type=\"text\" class=\"form-control\"  [formControl]=\"nameControl\">\n```\nTs\n```typescript\nimport { FormControl } from '@angular/forms';\n....//代码块\n\nnameControl = new FormControl('jack'); //jack是初始值，也可以为空字符串('')\n```\n\n此处为单个控件，使用响应式表单时需要引入 `FormControl`。\n\n**注：** `Html` 模板中的 `class=\"form-control\"` 代码只和样式有关，和响应式表单无关。\n\n\n### 模板驱动表单\n>**前提**：在需要使用响应式表单的组件的对应的模块中引入 `FormsModule`\n\n最基本的模板驱动表单\n\nHtml\n```HTML\n<input type=\"text\" class=\"form-control\" name=\"favorite\"  [(ngModel)]=\"color\">\n```\nTs\n```typescript\n....//代码块\ncolor:string;\n```\n\n## 响应式表单\n响应式表单适用于构建大型表单，且其跨代码的重用性强\n### 控件分组\n响应式表单只是展示一个控件，会使用到 `FormControl`。而响应式表单在项目中往往适用于大型表单，即表单中不会只存在一个表单控件。而存在多个控件时，需要对表单控件进行分组。在响应式表单中，对控件进行分组，需要引入并实例化 `FormGroup`，其代码如下所示。\n\nTs\n```typescript\nimport { FormControl, FormGroup } from '@angular/forms';\n....//代码块\nCharter=new FormGroup({\n  name:new FormControl(''),\n  age:new FormControl()\n})\n```\n\nHtml\n```HTML\n<form [formGroup]=\"Charter\" (ngSubmit)=\"consoleSubmit()\">\n  名称：<input type=\"text\" name=\"name1\"  formControlName=\"name\"><br>\n  年龄<input type=\"number\" name=\"age\"  formControlName=\"age\">\n  <div class=\"mt-2\">\n    <button type=\"submit\" class=\"btn btn-sm\">提交表单</button>\n   </div>\n</form>\n```\n`FormControl` 能让开发者管理单个控件，当存在控件分组时，`FromGroup` 实例能跟踪一组 `FormControl` 的状态。\n\n在 `Ts` 代码中实例化 `FromGroup` 后，在 `Html` 中，将 `Charter` 这个 `FormGroup` 通过 `FormGroup` 指令绑定到 `form` 元素上。由 `formControlName` 指令提供的 `formControlName` 属性将每个输入框和 `FormGroup` 中的定义 `FormControl` 关联起来。\n\n### 嵌套表单组\n在响应式表单中，建立更加复杂的表单时，对表单信息进行分组，将相关联的消息放到一个组，将该组又放到一个更大的组中，即嵌套表单组。使用嵌套分组能让开发者更加易于实现和管理表单。\n\n在填写个人信息表单时，地址是一个很常见的信息。在响应式表单中，地址是对表单进行分组的一个绝佳范例。其代码如下所示。\n\nTs\n```typescript\n...//代码块\nCharter=new FormGroup({\n  name:new FormControl(''),\n  age:new FormControl()，\n  address:new FormGroup({\n    province:new FormControl(''),\n    city:new FormControl(''),\n    county:new FormControl(''),\n    zip:new FormControl('')\n  })\n})\n...//代码块\n```\nHtml\n```HTML\n<form [formGroup]=\"Charter\" (ngSubmit)=\"consoleSubmit()\">\n  名称：<input type=\"text\" name=\"name\" formControlName=\"name\"><br>\n  年龄：<input type=\"number\" name=\"age\" formControlName=\"age\">\n  <div formGroupName=\"address\" class=\"mt-2\">\n    <div>\n      省：<input type=\"text\" name=\"province\" formControlName=\"province\">\n      市：<input type=\"text\" name=\"city\" formControlName=\"city\">\n      县：<input type=\"text\" name=\"county\" formControlName=\"county\">\n    </div>\n    具体地址：<input type=\"text\" name=\"zip\" formControlName=\"zip\">\n  </div>\n  <button type=\"submit\" class=\"btn btn-success\">提交表单</button>\n</form>\n```\n在上面代码中，`address` 为一个 `FormGroup`，在 `Html` 中通过 `FormGroupName` 指令将 `address` 这个 `FormGroup` 与视图关联起来。\n\n### FormBuilder 生成表单控件\n在上面的 `Ts` 代码中实例化表单控件时，只有几个属性，一会是 `new FormGroup()`，一会是 `new FormControl()`，代码过于笨重，而 `Angular` 提供了 `FormBuilder` 服务来快捷生成表单。其代码如下所示\n\nTs\n```typescript\nimport { FormBuilder } from '@angular/forms';\n....//代码块\n\nconstructor(private fb:FormBuilder) { }\n\nCharter=this.fb.group({\n  name:[''],\n  age:[null],\n  address:this.fb.group({\n    province:[''],\n    city:[''],\n    county:[''],\n    zip:['']\n  })\n})\n\nconstructor(private fb:FormBuilder) { }\n```\n使用 `FormBuilder` 创建表单和使用 `new FormGroup()` 和 `ngw FormControl()` 创建表单结果是一样的，但其代码跟加的简洁。\n\n> `FormBuilder` 服务有三个方法：`control()`、`group()` 和 `array()`\n\n### FormArray 管理动态表单\n`FormArry` 是 `FormGroup` 的另一种选择，当开发者事先不知道子控件的具体数量是多少， `FormArray` 是一种很好的选择，它可以帮助开发者很好的管理匿名控件。\n\n应用场景：当表单中存在组件变化时，如在 `Charter` (人物)表单中，添加人物的 `enable` （能力）属性，但是人物的 `enable` 能力不可能只有一个，存在多个，比如驾驶，观察，组织等，不确定有多少。而  `FormArray` 就是应用于这种场景，其代码如下所示\n\nTs\n```typescript\nimport { FormArray, FormBuilder, Validators } from '@angular/forms';\n....//代码块\n\nconstructor(private fb:FormBuilder) { }\n\nCharter=this.fb.group({\n  name:[''],\n  age:[null],\n  address:this.fb.group({\n    province:[''],\n    city:[''],\n    county:['']\n  }),\n  // enable:this.fb.array([this.fb.control('')])  //加入初始值\n  enable:this.fb.array([])\n})\n\nget enable(){\n  return this.Charter.get('enable') as FormArray;\n}\n\nconstructor(private fb:FormBuilder) { }\n\naddNewEnable(){//添加新input以添加新能力，同时可以加入验证器\n  this.enable.push(this.fb.control('',Validators.required))\n}\n\nreduceEnable(i){//移除能力\n  this.enable.removeAt(i);\n}\n```\n\nHtml\n```HTML\n<form [formGroup]=\"Charter\" (ngSubmit)=\"consoleForm()\">\n  姓名：<input type=\"text\" name=\"name\" formControlName=\"name\">\n  年龄：<input type=\"number\" name=\"age\" formControlName=\"age\">\n  <div class=\"d-flex mt-2\" formGroupName=\"address\">\n    <span>地址：</span>\n    <div class=\"clearfix\">\n      省<input type=\"text\" name=\"province\" formControlName=\"province\"><br>\n      市<input type=\"text\" name=\"city\" formControlName=\"city\"><br>\n      县<input type=\"text\" name=\"county\" formControlName=\"county\">\n    </div>\n  </div>\n  <div class=\"mt-2\" formArrayName=\"enable\">\n    <span>能力：</span>\n    <div *ngFor=\"let en of enable.controls;let i=index\">\n      <p class=\"d-flex\">\n        <input type=\"text\" [formControlName]=\"i\">\n        <button type=\"button\" (click)=\"reduceEnable(i)\">移除</button>\n      </p>\n    </div>\n    <button type=\"button\" (click)=\"addNewEnable()\">添加新能力</button>\n  </div>\n  <p class=\"small text-muted\">表单的值：{{Charter.value|json}}</p>\n  <button [disabled]=\"!Charter.valid\" type=\"submit\">提交表单</button>\n</form>\n```\n\n其在浏览器页面中的效果（`Html` 代码中已移除样式类）如下所示\n\n![FormArray管理动态表单](https://bingolil.github.io/images/angular-formarray.png)\n\n>  **注意**：在 `Html` 中，关于响应式表单的指令一律小写开头，如 `formGroup`，`formControlName`等，不能写成 `FormGroup`，`FormControlName`等，若大写开头会报错或绑定不成功\n\n在上面的 `Ts` 代码中，使用了`FormArray` 的 `push` 和 `removeAt()` 方法，`FormArray` 的常用方法如下表所示\n\n| 方法        | 参数   |  描述  |\n| --------   | ----- |---- |\n| at()     | (index:number) |  获取指定位置的 FormControl |\n| push() | (control:AbstractControl)|在数组末尾添加一个 FromControl   |\n| insert()  | (index:number,control:AbstractControl) |在指定位置添加一个 FromControl|\n| removeAt()  | (index:number) |移除指定位置的 FromControl|\n| setControl()  | (index:number,control:AbstractControl) |替换指定位置的 FromControl|\n|setValue | (value: any[]) |  设置 FormArray 中各个控件的值，数据结构不匹配时会报错（建议到 [`官网`](https://www.angular.cn/api/forms/FormArray#setvalue) 查看） |\n|patchValue | (value: any[]) |  设置 FormArray 中各个控件的值，数据结构不匹配时不会会报错（建议到 [`官网`](https://www.angular.cn/api/forms/FormArray#patchvalue) 查看）|\n| resset()  | (value:any[]) |重置 FormArray 的值，并设置各个控件标记为 untouched 和 pristine 都为true|\n| getRawValue()  | () |这个 FormArray 的聚合值，包括已禁用的控件|\n\n## 响应式表单验证\n表单验证是表单中最重要的部分之一，对于一个表单，有一个完善的表单验证能有效的降低后台开发者的工作时间。并且在提交表单时，减少项目的报错（提交的表单数据不符合需求），提高用户体验。\n\n### `Angular` 提供的验证器函数\n\n对于响应式表单，`Angular` 提供了一组常用的验证器函数，这些函数接收一个表单控件，验证并根据验证的结果返回一个空值（`null`，其代表验证通过）或错误对象。当然，`HTML5` 存在一些内置的属性，用来进行原生的验证，如 `required`，`minLength`，`maxLength`，`pattern` 等，其用法如下所示\n\nHtml\n```HTML\n<input type=\"text\" name=\"name\" formControlName=\"name\" required>\n```\n\n使用 `Angular` 提供的验证器函数时，需要在组件中导入 `Validators` 类，其基本用法如下所示。\n\nTs\n```typescript\nimport { FormBuilder, Validators } from '@angular/forms';\n....//代码块\n\nconstructor(private fb:FormBuilder) { }\n\nCharter=this.fb.group({\n  name:['',Validators.required], //使用验证\n  age:[null],\n  address:this.fb.group({\n    province:[''],\n    city:[''],\n    county:[''],\n    zip:['']\n  })\n})\n```\n\n使用 `Angular` 自带的 `Validators` 验证器，其提供的验证方案如下所示。\n\n> `Validators.min()`，要求控件大于等于某个值，一般用于验证数字\n\n用法：`const age=new FormControl(18,Validators.min(2))`\n\n> `Validators.max()`，要求控件小于等于某个值，一般用于验证数字\n\n用法：`const age=new FormControl(0,Validators.max(2))`\n\n> `Validators.required`，要求控件非空，一般用于验证 `input` 输入或 `select` 框\n\n用法：`const name=new FormControl('',Validators.required`)\n\n> `Validators.requiredTrue`，要求控件值为真，一般用于验证 `checkbox`\n\n用法：`const control=new FormControl('',Validators.requiredTrue)`\n\n> `Validators.email`，要求控件的值为 `email` 格式，一般用于验证输入为邮箱格式\n\n用法：`const owebEmail=new FormControl('',Validators.email)`\n\n> `Validators.minLength()`，要求控件值的字符长度大于等于某个指定的长度，一般用于验证 `input` 的 `text` 输入类型\n\n用法：`const name=new FormControl('',Validators.minLength(8))`\n\n> `Validators.maxLength()`，要求控件值的字符长度小于等于某个指定的长度，一般用于验证 `input` 的 `text` 输入类型\n\n用法：`const name=new FormControl('',Validators.maxLength(8))`\n\n> `Validators.pattern()`，要求控件的值符合某种规则（正则表达式），一般用于验证 `input` 的 `text` 输入类型，判断其输入是否符合某种正则表达式\n\n用法：`const name=new FormControl('',Validators.pattern('[a-zA-Z]*'))`，验证 `name` 控件的值只包含字母或为空格\n\n> `Validators.nullValidator`，该验证器什么也不做\n\n用法：`const name=new FormControl('',Validators.nullValidator)`\n\n> `Validators.compose()`，将多个验证器合并成一个\n\n用法：`const name=new FormControl('',Validators.compose([Validators.required,Validators.pattern('[a-zA-Z]*')]))`，验证 `name` 控件必须要有值且只包含字母\n\n存在多个验证器时的另一种写法：`const name=new FormControl('',[Validators.required,Validators.pattern('[a-zA-Z]*')])`，直接去掉 `Validators.compose()`\n\n> `Validators.asyncCompose()`，将多个异步验证器合并成一个\n\n### 自定义验证器函数\n\n虽然 `Angular` 提供丰富的内置验证器函数，但是不能保证这些内置验证器函数能用于所有的表单，这时，就需要开发者创建自定义验证器。\n\n假如需要定义一个 `input` 的 `text` 框，禁止在框中出现 `jack` 的字符。其验证器代码如下所示\n\nforbidden.directive.ts\n```typescript\nexport function forbiddenValitors(nameRe:RegExp):ValidatorFn{\n  return (control:AbstractControl):{[key:string]:any} | null =>{\n    const forbidden=nameRe.test(control.value);\n    return forbidden ? {'forbiddenName':{value:control.value}} : null;\n  }\n}\n```\n\n在响应式表单中使用自定义验证器\n\nTs\n```typescript\nimport { forbiddenValitors } from '../forbidden.directive'\n....//代码块\n\nCharter=this.fb.group({\n  name:['',[forbiddenValitors(/jack/i)]],\n  age:[null],\n  address:this.fb.group({\n    province:[''],\n    city:[''],\n    county:['']\n  })\n }）\n```\n\n使用了自定义验证器后，在表单的 `name` 控制器中输入 `jack` 时，表单为 `invalid` 状态。\n\n### 验证时错误提示\n在表单中，用户的输入不符合要求时，表单一般都会提示错误（提高用户体验和告诉用户错在什么地方）。响应式表单中也可以实现该功能。代码如下所示\n\nTs\n```typescript\n....//代码块\n\nCharter=this.fb.group({ //加入自定义验证器\n  name:['',[Validators.required,Validators.minLength(4),forbiddenValitor(/jack/i)]],\n  ....//代码块\n\nget name(){ //必须，页面中需要 name\n  return this.Charter.get('name')\n}\n```\n\nHtml\n```HTML\n 姓名：<input type=\"text\" name=\"name\" formControlName=\"name\">\n<p *ngIf=\"name.invalid && (name.dirty && name.touched)\">\n  <span *ngIf=\"name.errors.required\">姓名是必填项</span>\n  <span *ngIf=\"name.errors.minlength\">姓名字符必须大于4</span>\n  <span  *ngIf=\"name.errors.forbiddenName\">姓名不能存在jack字符</span>\n<!-- 提示：此处的 forbiddenName 需要和自定义验证器中 forbiddenName 字符一致 -->\n</p>\n```\n\n### 异步验证\n异步验证也是表单验证中重要的一部分，其应用的场景一般需要进行远程通讯。比如用户在使用表单进行注册时，规定用户名不能和已有的用户名相同，由于前端不知道已有的用户名有哪些，这就需要将已经输入的用户名去和后台数据库里面的用户名相匹配。\n\n其异步验证代码如下所示\n\nasync.service.ts（返回 Observable 对象，模拟 http 请求）\n```typescript\nimport { Injectable } from '@angular/core';\nimport { Observable,of } from 'rxjs';\n\nconst forbArr=['jack','lucy','bing']\n\n@Injectable({providedIn: 'root'})\n\nexport class AsycService {\n  _can_use(s:string):Observable<boolean>{\n    let bool=forbArr.indexOf(s)>-1;\n    return of(bool)\n  }\n}\n```\n\nasyc-name-validator.ts（定义异步验证器）\n```typescript\nimport { Injectable } from '@angular/core';\nimport { AsyncValidator, AbstractControl, ValidationErrors} from '@angular/forms';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { AsycService } from '../asyc.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AsycNameValidatorFn implements AsyncValidator {\n\n  constructor(private asycService:AsycService) { }\n\n  validate(ctrl:AbstractControl):Promise<ValidationErrors | null> | Observable<ValidationErrors | null>{\n    return this.asycService._can_use(ctrl.value).pipe(\n      map(xx=>(xx ? {can_use:false} : null)),\n      catchError(()=>null)\n    )\n  }\n}\n```\n\nreactive.component.ts（使用异步验证器）\n```typescript\nimport { FormBuilder } from '@angular/forms';\nimport { AsycNameValidatorFn } from '../asyc-name-validator';\n...//代码块\n\nconstructor(private fb:FormBuilder,private asycnameValidator:AsycNameValidatorFn) { }\n\nCharter=this.fb.group({\n  name:['xx', \n    {\n      validators:[Validators.required], // 同步校验通过才执行异步校验\n      asyncValidators:[this.asycnameValidator.validate.bind(this.asycnameValidator)],\n      updateOn: 'blur' //blur 失去焦点时验证\n    }\n  ],\n  age:[10],\n  email:[''],\n  address:this.fb.group({\n    province:[''],\n    city:[''],\n    county:[''],\n    zip:['']\n  })\n})\n```\n\n当在页面中的 `name` `input` 框中输入 `jack`、`lucy` 或 `bing` 时，页面中表单状态为 `INVALID`","source":"_posts/angular/learn-6.md","raw":"title:  Angular学习-6-表单1\ncategories: Angular\ndate: 2019-01-07\ntags: [Angular,Angular表单]\ndescription: Angular 提供了两种不同的方法来通过表单处理用户输入：响应式表单和模板驱动表单。 两者都从视图中捕获用户输入事件、验证用户输入、创建表单模型、修改数据模型，并提供跟踪这些更改的途径。\n---\n在 `Angular` 中，提供了两种表单来处理用户的输入，`模板驱动表单` 和 `响应式表单`。\n## 建立表单模型\n### 响应式表单\n\n> **前提条件**：在需要使用响应式表单的组件所在的模块中引入 `ReactiveFormsModule`\n\n最基本的响应式表单\n\nHtml\n```HTML\n<input type=\"text\" class=\"form-control\"  [formControl]=\"nameControl\">\n```\nTs\n```typescript\nimport { FormControl } from '@angular/forms';\n....//代码块\n\nnameControl = new FormControl('jack'); //jack是初始值，也可以为空字符串('')\n```\n\n此处为单个控件，使用响应式表单时需要引入 `FormControl`。\n\n**注：** `Html` 模板中的 `class=\"form-control\"` 代码只和样式有关，和响应式表单无关。\n\n\n### 模板驱动表单\n>**前提**：在需要使用响应式表单的组件的对应的模块中引入 `FormsModule`\n\n最基本的模板驱动表单\n\nHtml\n```HTML\n<input type=\"text\" class=\"form-control\" name=\"favorite\"  [(ngModel)]=\"color\">\n```\nTs\n```typescript\n....//代码块\ncolor:string;\n```\n\n## 响应式表单\n响应式表单适用于构建大型表单，且其跨代码的重用性强\n### 控件分组\n响应式表单只是展示一个控件，会使用到 `FormControl`。而响应式表单在项目中往往适用于大型表单，即表单中不会只存在一个表单控件。而存在多个控件时，需要对表单控件进行分组。在响应式表单中，对控件进行分组，需要引入并实例化 `FormGroup`，其代码如下所示。\n\nTs\n```typescript\nimport { FormControl, FormGroup } from '@angular/forms';\n....//代码块\nCharter=new FormGroup({\n  name:new FormControl(''),\n  age:new FormControl()\n})\n```\n\nHtml\n```HTML\n<form [formGroup]=\"Charter\" (ngSubmit)=\"consoleSubmit()\">\n  名称：<input type=\"text\" name=\"name1\"  formControlName=\"name\"><br>\n  年龄<input type=\"number\" name=\"age\"  formControlName=\"age\">\n  <div class=\"mt-2\">\n    <button type=\"submit\" class=\"btn btn-sm\">提交表单</button>\n   </div>\n</form>\n```\n`FormControl` 能让开发者管理单个控件，当存在控件分组时，`FromGroup` 实例能跟踪一组 `FormControl` 的状态。\n\n在 `Ts` 代码中实例化 `FromGroup` 后，在 `Html` 中，将 `Charter` 这个 `FormGroup` 通过 `FormGroup` 指令绑定到 `form` 元素上。由 `formControlName` 指令提供的 `formControlName` 属性将每个输入框和 `FormGroup` 中的定义 `FormControl` 关联起来。\n\n### 嵌套表单组\n在响应式表单中，建立更加复杂的表单时，对表单信息进行分组，将相关联的消息放到一个组，将该组又放到一个更大的组中，即嵌套表单组。使用嵌套分组能让开发者更加易于实现和管理表单。\n\n在填写个人信息表单时，地址是一个很常见的信息。在响应式表单中，地址是对表单进行分组的一个绝佳范例。其代码如下所示。\n\nTs\n```typescript\n...//代码块\nCharter=new FormGroup({\n  name:new FormControl(''),\n  age:new FormControl()，\n  address:new FormGroup({\n    province:new FormControl(''),\n    city:new FormControl(''),\n    county:new FormControl(''),\n    zip:new FormControl('')\n  })\n})\n...//代码块\n```\nHtml\n```HTML\n<form [formGroup]=\"Charter\" (ngSubmit)=\"consoleSubmit()\">\n  名称：<input type=\"text\" name=\"name\" formControlName=\"name\"><br>\n  年龄：<input type=\"number\" name=\"age\" formControlName=\"age\">\n  <div formGroupName=\"address\" class=\"mt-2\">\n    <div>\n      省：<input type=\"text\" name=\"province\" formControlName=\"province\">\n      市：<input type=\"text\" name=\"city\" formControlName=\"city\">\n      县：<input type=\"text\" name=\"county\" formControlName=\"county\">\n    </div>\n    具体地址：<input type=\"text\" name=\"zip\" formControlName=\"zip\">\n  </div>\n  <button type=\"submit\" class=\"btn btn-success\">提交表单</button>\n</form>\n```\n在上面代码中，`address` 为一个 `FormGroup`，在 `Html` 中通过 `FormGroupName` 指令将 `address` 这个 `FormGroup` 与视图关联起来。\n\n### FormBuilder 生成表单控件\n在上面的 `Ts` 代码中实例化表单控件时，只有几个属性，一会是 `new FormGroup()`，一会是 `new FormControl()`，代码过于笨重，而 `Angular` 提供了 `FormBuilder` 服务来快捷生成表单。其代码如下所示\n\nTs\n```typescript\nimport { FormBuilder } from '@angular/forms';\n....//代码块\n\nconstructor(private fb:FormBuilder) { }\n\nCharter=this.fb.group({\n  name:[''],\n  age:[null],\n  address:this.fb.group({\n    province:[''],\n    city:[''],\n    county:[''],\n    zip:['']\n  })\n})\n\nconstructor(private fb:FormBuilder) { }\n```\n使用 `FormBuilder` 创建表单和使用 `new FormGroup()` 和 `ngw FormControl()` 创建表单结果是一样的，但其代码跟加的简洁。\n\n> `FormBuilder` 服务有三个方法：`control()`、`group()` 和 `array()`\n\n### FormArray 管理动态表单\n`FormArry` 是 `FormGroup` 的另一种选择，当开发者事先不知道子控件的具体数量是多少， `FormArray` 是一种很好的选择，它可以帮助开发者很好的管理匿名控件。\n\n应用场景：当表单中存在组件变化时，如在 `Charter` (人物)表单中，添加人物的 `enable` （能力）属性，但是人物的 `enable` 能力不可能只有一个，存在多个，比如驾驶，观察，组织等，不确定有多少。而  `FormArray` 就是应用于这种场景，其代码如下所示\n\nTs\n```typescript\nimport { FormArray, FormBuilder, Validators } from '@angular/forms';\n....//代码块\n\nconstructor(private fb:FormBuilder) { }\n\nCharter=this.fb.group({\n  name:[''],\n  age:[null],\n  address:this.fb.group({\n    province:[''],\n    city:[''],\n    county:['']\n  }),\n  // enable:this.fb.array([this.fb.control('')])  //加入初始值\n  enable:this.fb.array([])\n})\n\nget enable(){\n  return this.Charter.get('enable') as FormArray;\n}\n\nconstructor(private fb:FormBuilder) { }\n\naddNewEnable(){//添加新input以添加新能力，同时可以加入验证器\n  this.enable.push(this.fb.control('',Validators.required))\n}\n\nreduceEnable(i){//移除能力\n  this.enable.removeAt(i);\n}\n```\n\nHtml\n```HTML\n<form [formGroup]=\"Charter\" (ngSubmit)=\"consoleForm()\">\n  姓名：<input type=\"text\" name=\"name\" formControlName=\"name\">\n  年龄：<input type=\"number\" name=\"age\" formControlName=\"age\">\n  <div class=\"d-flex mt-2\" formGroupName=\"address\">\n    <span>地址：</span>\n    <div class=\"clearfix\">\n      省<input type=\"text\" name=\"province\" formControlName=\"province\"><br>\n      市<input type=\"text\" name=\"city\" formControlName=\"city\"><br>\n      县<input type=\"text\" name=\"county\" formControlName=\"county\">\n    </div>\n  </div>\n  <div class=\"mt-2\" formArrayName=\"enable\">\n    <span>能力：</span>\n    <div *ngFor=\"let en of enable.controls;let i=index\">\n      <p class=\"d-flex\">\n        <input type=\"text\" [formControlName]=\"i\">\n        <button type=\"button\" (click)=\"reduceEnable(i)\">移除</button>\n      </p>\n    </div>\n    <button type=\"button\" (click)=\"addNewEnable()\">添加新能力</button>\n  </div>\n  <p class=\"small text-muted\">表单的值：{{Charter.value|json}}</p>\n  <button [disabled]=\"!Charter.valid\" type=\"submit\">提交表单</button>\n</form>\n```\n\n其在浏览器页面中的效果（`Html` 代码中已移除样式类）如下所示\n\n![FormArray管理动态表单](https://bingolil.github.io/images/angular-formarray.png)\n\n>  **注意**：在 `Html` 中，关于响应式表单的指令一律小写开头，如 `formGroup`，`formControlName`等，不能写成 `FormGroup`，`FormControlName`等，若大写开头会报错或绑定不成功\n\n在上面的 `Ts` 代码中，使用了`FormArray` 的 `push` 和 `removeAt()` 方法，`FormArray` 的常用方法如下表所示\n\n| 方法        | 参数   |  描述  |\n| --------   | ----- |---- |\n| at()     | (index:number) |  获取指定位置的 FormControl |\n| push() | (control:AbstractControl)|在数组末尾添加一个 FromControl   |\n| insert()  | (index:number,control:AbstractControl) |在指定位置添加一个 FromControl|\n| removeAt()  | (index:number) |移除指定位置的 FromControl|\n| setControl()  | (index:number,control:AbstractControl) |替换指定位置的 FromControl|\n|setValue | (value: any[]) |  设置 FormArray 中各个控件的值，数据结构不匹配时会报错（建议到 [`官网`](https://www.angular.cn/api/forms/FormArray#setvalue) 查看） |\n|patchValue | (value: any[]) |  设置 FormArray 中各个控件的值，数据结构不匹配时不会会报错（建议到 [`官网`](https://www.angular.cn/api/forms/FormArray#patchvalue) 查看）|\n| resset()  | (value:any[]) |重置 FormArray 的值，并设置各个控件标记为 untouched 和 pristine 都为true|\n| getRawValue()  | () |这个 FormArray 的聚合值，包括已禁用的控件|\n\n## 响应式表单验证\n表单验证是表单中最重要的部分之一，对于一个表单，有一个完善的表单验证能有效的降低后台开发者的工作时间。并且在提交表单时，减少项目的报错（提交的表单数据不符合需求），提高用户体验。\n\n### `Angular` 提供的验证器函数\n\n对于响应式表单，`Angular` 提供了一组常用的验证器函数，这些函数接收一个表单控件，验证并根据验证的结果返回一个空值（`null`，其代表验证通过）或错误对象。当然，`HTML5` 存在一些内置的属性，用来进行原生的验证，如 `required`，`minLength`，`maxLength`，`pattern` 等，其用法如下所示\n\nHtml\n```HTML\n<input type=\"text\" name=\"name\" formControlName=\"name\" required>\n```\n\n使用 `Angular` 提供的验证器函数时，需要在组件中导入 `Validators` 类，其基本用法如下所示。\n\nTs\n```typescript\nimport { FormBuilder, Validators } from '@angular/forms';\n....//代码块\n\nconstructor(private fb:FormBuilder) { }\n\nCharter=this.fb.group({\n  name:['',Validators.required], //使用验证\n  age:[null],\n  address:this.fb.group({\n    province:[''],\n    city:[''],\n    county:[''],\n    zip:['']\n  })\n})\n```\n\n使用 `Angular` 自带的 `Validators` 验证器，其提供的验证方案如下所示。\n\n> `Validators.min()`，要求控件大于等于某个值，一般用于验证数字\n\n用法：`const age=new FormControl(18,Validators.min(2))`\n\n> `Validators.max()`，要求控件小于等于某个值，一般用于验证数字\n\n用法：`const age=new FormControl(0,Validators.max(2))`\n\n> `Validators.required`，要求控件非空，一般用于验证 `input` 输入或 `select` 框\n\n用法：`const name=new FormControl('',Validators.required`)\n\n> `Validators.requiredTrue`，要求控件值为真，一般用于验证 `checkbox`\n\n用法：`const control=new FormControl('',Validators.requiredTrue)`\n\n> `Validators.email`，要求控件的值为 `email` 格式，一般用于验证输入为邮箱格式\n\n用法：`const owebEmail=new FormControl('',Validators.email)`\n\n> `Validators.minLength()`，要求控件值的字符长度大于等于某个指定的长度，一般用于验证 `input` 的 `text` 输入类型\n\n用法：`const name=new FormControl('',Validators.minLength(8))`\n\n> `Validators.maxLength()`，要求控件值的字符长度小于等于某个指定的长度，一般用于验证 `input` 的 `text` 输入类型\n\n用法：`const name=new FormControl('',Validators.maxLength(8))`\n\n> `Validators.pattern()`，要求控件的值符合某种规则（正则表达式），一般用于验证 `input` 的 `text` 输入类型，判断其输入是否符合某种正则表达式\n\n用法：`const name=new FormControl('',Validators.pattern('[a-zA-Z]*'))`，验证 `name` 控件的值只包含字母或为空格\n\n> `Validators.nullValidator`，该验证器什么也不做\n\n用法：`const name=new FormControl('',Validators.nullValidator)`\n\n> `Validators.compose()`，将多个验证器合并成一个\n\n用法：`const name=new FormControl('',Validators.compose([Validators.required,Validators.pattern('[a-zA-Z]*')]))`，验证 `name` 控件必须要有值且只包含字母\n\n存在多个验证器时的另一种写法：`const name=new FormControl('',[Validators.required,Validators.pattern('[a-zA-Z]*')])`，直接去掉 `Validators.compose()`\n\n> `Validators.asyncCompose()`，将多个异步验证器合并成一个\n\n### 自定义验证器函数\n\n虽然 `Angular` 提供丰富的内置验证器函数，但是不能保证这些内置验证器函数能用于所有的表单，这时，就需要开发者创建自定义验证器。\n\n假如需要定义一个 `input` 的 `text` 框，禁止在框中出现 `jack` 的字符。其验证器代码如下所示\n\nforbidden.directive.ts\n```typescript\nexport function forbiddenValitors(nameRe:RegExp):ValidatorFn{\n  return (control:AbstractControl):{[key:string]:any} | null =>{\n    const forbidden=nameRe.test(control.value);\n    return forbidden ? {'forbiddenName':{value:control.value}} : null;\n  }\n}\n```\n\n在响应式表单中使用自定义验证器\n\nTs\n```typescript\nimport { forbiddenValitors } from '../forbidden.directive'\n....//代码块\n\nCharter=this.fb.group({\n  name:['',[forbiddenValitors(/jack/i)]],\n  age:[null],\n  address:this.fb.group({\n    province:[''],\n    city:[''],\n    county:['']\n  })\n }）\n```\n\n使用了自定义验证器后，在表单的 `name` 控制器中输入 `jack` 时，表单为 `invalid` 状态。\n\n### 验证时错误提示\n在表单中，用户的输入不符合要求时，表单一般都会提示错误（提高用户体验和告诉用户错在什么地方）。响应式表单中也可以实现该功能。代码如下所示\n\nTs\n```typescript\n....//代码块\n\nCharter=this.fb.group({ //加入自定义验证器\n  name:['',[Validators.required,Validators.minLength(4),forbiddenValitor(/jack/i)]],\n  ....//代码块\n\nget name(){ //必须，页面中需要 name\n  return this.Charter.get('name')\n}\n```\n\nHtml\n```HTML\n 姓名：<input type=\"text\" name=\"name\" formControlName=\"name\">\n<p *ngIf=\"name.invalid && (name.dirty && name.touched)\">\n  <span *ngIf=\"name.errors.required\">姓名是必填项</span>\n  <span *ngIf=\"name.errors.minlength\">姓名字符必须大于4</span>\n  <span  *ngIf=\"name.errors.forbiddenName\">姓名不能存在jack字符</span>\n<!-- 提示：此处的 forbiddenName 需要和自定义验证器中 forbiddenName 字符一致 -->\n</p>\n```\n\n### 异步验证\n异步验证也是表单验证中重要的一部分，其应用的场景一般需要进行远程通讯。比如用户在使用表单进行注册时，规定用户名不能和已有的用户名相同，由于前端不知道已有的用户名有哪些，这就需要将已经输入的用户名去和后台数据库里面的用户名相匹配。\n\n其异步验证代码如下所示\n\nasync.service.ts（返回 Observable 对象，模拟 http 请求）\n```typescript\nimport { Injectable } from '@angular/core';\nimport { Observable,of } from 'rxjs';\n\nconst forbArr=['jack','lucy','bing']\n\n@Injectable({providedIn: 'root'})\n\nexport class AsycService {\n  _can_use(s:string):Observable<boolean>{\n    let bool=forbArr.indexOf(s)>-1;\n    return of(bool)\n  }\n}\n```\n\nasyc-name-validator.ts（定义异步验证器）\n```typescript\nimport { Injectable } from '@angular/core';\nimport { AsyncValidator, AbstractControl, ValidationErrors} from '@angular/forms';\nimport { map, catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { AsycService } from '../asyc.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AsycNameValidatorFn implements AsyncValidator {\n\n  constructor(private asycService:AsycService) { }\n\n  validate(ctrl:AbstractControl):Promise<ValidationErrors | null> | Observable<ValidationErrors | null>{\n    return this.asycService._can_use(ctrl.value).pipe(\n      map(xx=>(xx ? {can_use:false} : null)),\n      catchError(()=>null)\n    )\n  }\n}\n```\n\nreactive.component.ts（使用异步验证器）\n```typescript\nimport { FormBuilder } from '@angular/forms';\nimport { AsycNameValidatorFn } from '../asyc-name-validator';\n...//代码块\n\nconstructor(private fb:FormBuilder,private asycnameValidator:AsycNameValidatorFn) { }\n\nCharter=this.fb.group({\n  name:['xx', \n    {\n      validators:[Validators.required], // 同步校验通过才执行异步校验\n      asyncValidators:[this.asycnameValidator.validate.bind(this.asycnameValidator)],\n      updateOn: 'blur' //blur 失去焦点时验证\n    }\n  ],\n  age:[10],\n  email:[''],\n  address:this.fb.group({\n    province:[''],\n    city:[''],\n    county:[''],\n    zip:['']\n  })\n})\n```\n\n当在页面中的 `name` `input` 框中输入 `jack`、`lucy` 或 `bing` 时，页面中表单状态为 `INVALID`","slug":"angular/learn-6","published":1,"updated":"2021-11-24T02:54:17.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwe931l2000xycsz1b0u9utv","content":"<p>在 <code>Angular</code> 中，提供了两种表单来处理用户的输入，<code>模板驱动表单</code> 和 <code>响应式表单</code>。</p>\n<h2 id=\"建立表单模型\"><a href=\"#建立表单模型\" class=\"headerlink\" title=\"建立表单模型\"></a>建立表单模型</h2><h3 id=\"响应式表单\"><a href=\"#响应式表单\" class=\"headerlink\" title=\"响应式表单\"></a>响应式表单</h3><blockquote>\n<p><strong>前提条件</strong>：在需要使用响应式表单的组件所在的模块中引入 <code>ReactiveFormsModule</code></p>\n</blockquote>\n<p>最基本的响应式表单</p>\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>  [<span class=\"attr\">formControl</span>]=<span class=\"string\">&quot;nameControl&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; FormControl &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">nameControl = <span class=\"keyword\">new</span> FormControl(<span class=\"string\">&#x27;jack&#x27;</span>); <span class=\"comment\">//jack是初始值，也可以为空字符串(&#x27;&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<p>此处为单个控件，使用响应式表单时需要引入 <code>FormControl</code>。</p>\n<p><strong>注：</strong> <code>Html</code> 模板中的 <code>class=&quot;form-control&quot;</code> 代码只和样式有关，和响应式表单无关。</p>\n<h3 id=\"模板驱动表单\"><a href=\"#模板驱动表单\" class=\"headerlink\" title=\"模板驱动表单\"></a>模板驱动表单</h3><blockquote>\n<p><strong>前提</strong>：在需要使用响应式表单的组件的对应的模块中引入 <code>FormsModule</code></p>\n</blockquote>\n<p>最基本的模板驱动表单</p>\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;favorite&quot;</span>  [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;color&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"attr\">color</span>:<span class=\"built_in\">string</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"响应式表单-1\"><a href=\"#响应式表单-1\" class=\"headerlink\" title=\"响应式表单\"></a>响应式表单</h2><p>响应式表单适用于构建大型表单，且其跨代码的重用性强</p>\n<h3 id=\"控件分组\"><a href=\"#控件分组\" class=\"headerlink\" title=\"控件分组\"></a>控件分组</h3><p>响应式表单只是展示一个控件，会使用到 <code>FormControl</code>。而响应式表单在项目中往往适用于大型表单，即表单中不会只存在一个表单控件。而存在多个控件时，需要对表单控件进行分组。在响应式表单中，对控件进行分组，需要引入并实例化 <code>FormGroup</code>，其代码如下所示。</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; FormControl, FormGroup &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">Charter=<span class=\"keyword\">new</span> FormGroup(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"keyword\">new</span> FormControl(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"keyword\">new</span> FormControl()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;Charter&quot;</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;consoleSubmit()&quot;</span>&gt;</span></span><br><span class=\"line\">  名称：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name1&quot;</span>  <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  年龄<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span>  <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-2&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm&quot;</span>&gt;</span>提交表单<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>FormControl</code> 能让开发者管理单个控件，当存在控件分组时，<code>FromGroup</code> 实例能跟踪一组 <code>FormControl</code> 的状态。</p>\n<p>在 <code>Ts</code> 代码中实例化 <code>FromGroup</code> 后，在 <code>Html</code> 中，将 <code>Charter</code> 这个 <code>FormGroup</code> 通过 <code>FormGroup</code> 指令绑定到 <code>form</code> 元素上。由 <code>formControlName</code> 指令提供的 <code>formControlName</code> 属性将每个输入框和 <code>FormGroup</code> 中的定义 <code>FormControl</code> 关联起来。</p>\n<h3 id=\"嵌套表单组\"><a href=\"#嵌套表单组\" class=\"headerlink\" title=\"嵌套表单组\"></a>嵌套表单组</h3><p>在响应式表单中，建立更加复杂的表单时，对表单信息进行分组，将相关联的消息放到一个组，将该组又放到一个更大的组中，即嵌套表单组。使用嵌套分组能让开发者更加易于实现和管理表单。</p>\n<p>在填写个人信息表单时，地址是一个很常见的信息。在响应式表单中，地址是对表单进行分组的一个绝佳范例。其代码如下所示。</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...<span class=\"comment\">//代码块</span></span><br><span class=\"line\">Charter=<span class=\"keyword\">new</span> FormGroup(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"keyword\">new</span> FormControl(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"keyword\">new</span> FormControl()，</span><br><span class=\"line\">  <span class=\"attr\">address</span>:<span class=\"keyword\">new</span> FormGroup(&#123;</span><br><span class=\"line\">    <span class=\"attr\">province</span>:<span class=\"keyword\">new</span> FormControl(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">city</span>:<span class=\"keyword\">new</span> FormControl(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">county</span>:<span class=\"keyword\">new</span> FormControl(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">zip</span>:<span class=\"keyword\">new</span> FormControl(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">...<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;Charter&quot;</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;consoleSubmit()&quot;</span>&gt;</span></span><br><span class=\"line\">  名称：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  年龄：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">formGroupName</span>=<span class=\"string\">&quot;address&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-2&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      省：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;province&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;province&quot;</span>&gt;</span></span><br><span class=\"line\">      市：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;city&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;city&quot;</span>&gt;</span></span><br><span class=\"line\">      县：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;county&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;county&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    具体地址：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;zip&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;zip&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>提交表单<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在上面代码中，<code>address</code> 为一个 <code>FormGroup</code>，在 <code>Html</code> 中通过 <code>FormGroupName</code> 指令将 <code>address</code> 这个 <code>FormGroup</code> 与视图关联起来。</p>\n<h3 id=\"FormBuilder-生成表单控件\"><a href=\"#FormBuilder-生成表单控件\" class=\"headerlink\" title=\"FormBuilder 生成表单控件\"></a>FormBuilder 生成表单控件</h3><p>在上面的 <code>Ts</code> 代码中实例化表单控件时，只有几个属性，一会是 <code>new FormGroup()</code>，一会是 <code>new FormControl()</code>，代码过于笨重，而 <code>Angular</code> 提供了 <code>FormBuilder</code> 服务来快捷生成表单。其代码如下所示</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; FormBuilder &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb:FormBuilder</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Charter=<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">age</span>:[<span class=\"literal\">null</span>],</span><br><span class=\"line\">  <span class=\"attr\">address</span>:<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">    <span class=\"attr\">province</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">city</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">county</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">zip</span>:[<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb:FormBuilder</span>)</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>FormBuilder</code> 创建表单和使用 <code>new FormGroup()</code> 和 <code>ngw FormControl()</code> 创建表单结果是一样的，但其代码跟加的简洁。</p>\n<blockquote>\n<p><code>FormBuilder</code> 服务有三个方法：<code>control()</code>、<code>group()</code> 和 <code>array()</code></p>\n</blockquote>\n<h3 id=\"FormArray-管理动态表单\"><a href=\"#FormArray-管理动态表单\" class=\"headerlink\" title=\"FormArray 管理动态表单\"></a>FormArray 管理动态表单</h3><p><code>FormArry</code> 是 <code>FormGroup</code> 的另一种选择，当开发者事先不知道子控件的具体数量是多少， <code>FormArray</code> 是一种很好的选择，它可以帮助开发者很好的管理匿名控件。</p>\n<p>应用场景：当表单中存在组件变化时，如在 <code>Charter</code> (人物)表单中，添加人物的 <code>enable</code> （能力）属性，但是人物的 <code>enable</code> 能力不可能只有一个，存在多个，比如驾驶，观察，组织等，不确定有多少。而  <code>FormArray</code> 就是应用于这种场景，其代码如下所示</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; FormArray, FormBuilder, Validators &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb:FormBuilder</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Charter=<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">age</span>:[<span class=\"literal\">null</span>],</span><br><span class=\"line\">  <span class=\"attr\">address</span>:<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">    <span class=\"attr\">province</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">city</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">county</span>:[<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"comment\">// enable:this.fb.array([this.fb.control(&#x27;&#x27;)])  //加入初始值</span></span><br><span class=\"line\">  <span class=\"attr\">enable</span>:<span class=\"built_in\">this</span>.fb.array([])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">get</span> <span class=\"title\">enable</span>()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.Charter.get(<span class=\"string\">&#x27;enable&#x27;</span>) <span class=\"keyword\">as</span> FormArray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb:FormBuilder</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">addNewEnable</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//添加新input以添加新能力，同时可以加入验证器</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.enable.push(<span class=\"built_in\">this</span>.fb.control(<span class=\"string\">&#x27;&#x27;</span>,Validators.required))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">reduceEnable</span>(<span class=\"params\">i</span>)</span>&#123;<span class=\"comment\">//移除能力</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.enable.removeAt(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;Charter&quot;</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;consoleForm()&quot;</span>&gt;</span></span><br><span class=\"line\">  姓名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\">  年龄：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;d-flex mt-2&quot;</span> <span class=\"attr\">formGroupName</span>=<span class=\"string\">&quot;address&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>地址：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;clearfix&quot;</span>&gt;</span></span><br><span class=\"line\">      省<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;province&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;province&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">      市<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;city&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;city&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">      县<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;county&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;county&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-2&quot;</span> <span class=\"attr\">formArrayName</span>=<span class=\"string\">&quot;enable&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>能力：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let en of enable.controls;let i=index&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;d-flex&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> [<span class=\"attr\">formControlName</span>]=<span class=\"string\">&quot;i&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;reduceEnable(i)&quot;</span>&gt;</span>移除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;addNewEnable()&quot;</span>&gt;</span>添加新能力<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;small text-muted&quot;</span>&gt;</span>表单的值：&#123;&#123;Charter.value|json&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> [<span class=\"attr\">disabled</span>]=<span class=\"string\">&quot;!Charter.valid&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>提交表单<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其在浏览器页面中的效果（<code>Html</code> 代码中已移除样式类）如下所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-formarray.png\" alt=\"FormArray管理动态表单\"></p>\n<blockquote>\n<p> <strong>注意</strong>：在 <code>Html</code> 中，关于响应式表单的指令一律小写开头，如 <code>formGroup</code>，<code>formControlName</code>等，不能写成 <code>FormGroup</code>，<code>FormControlName</code>等，若大写开头会报错或绑定不成功</p>\n</blockquote>\n<p>在上面的 <code>Ts</code> 代码中，使用了<code>FormArray</code> 的 <code>push</code> 和 <code>removeAt()</code> 方法，<code>FormArray</code> 的常用方法如下表所示</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>at()</td>\n<td>(index:number)</td>\n<td>获取指定位置的 FormControl</td>\n</tr>\n<tr>\n<td>push()</td>\n<td>(control:AbstractControl)</td>\n<td>在数组末尾添加一个 FromControl</td>\n</tr>\n<tr>\n<td>insert()</td>\n<td>(index:number,control:AbstractControl)</td>\n<td>在指定位置添加一个 FromControl</td>\n</tr>\n<tr>\n<td>removeAt()</td>\n<td>(index:number)</td>\n<td>移除指定位置的 FromControl</td>\n</tr>\n<tr>\n<td>setControl()</td>\n<td>(index:number,control:AbstractControl)</td>\n<td>替换指定位置的 FromControl</td>\n</tr>\n<tr>\n<td>setValue</td>\n<td>(value: any[])</td>\n<td>设置 FormArray 中各个控件的值，数据结构不匹配时会报错（建议到 <a href=\"https://www.angular.cn/api/forms/FormArray#setvalue\"><code>官网</code></a> 查看）</td>\n</tr>\n<tr>\n<td>patchValue</td>\n<td>(value: any[])</td>\n<td>设置 FormArray 中各个控件的值，数据结构不匹配时不会会报错（建议到 <a href=\"https://www.angular.cn/api/forms/FormArray#patchvalue\"><code>官网</code></a> 查看）</td>\n</tr>\n<tr>\n<td>resset()</td>\n<td>(value:any[])</td>\n<td>重置 FormArray 的值，并设置各个控件标记为 untouched 和 pristine 都为true</td>\n</tr>\n<tr>\n<td>getRawValue()</td>\n<td>()</td>\n<td>这个 FormArray 的聚合值，包括已禁用的控件</td>\n</tr>\n</tbody></table>\n<h2 id=\"响应式表单验证\"><a href=\"#响应式表单验证\" class=\"headerlink\" title=\"响应式表单验证\"></a>响应式表单验证</h2><p>表单验证是表单中最重要的部分之一，对于一个表单，有一个完善的表单验证能有效的降低后台开发者的工作时间。并且在提交表单时，减少项目的报错（提交的表单数据不符合需求），提高用户体验。</p>\n<h3 id=\"Angular-提供的验证器函数\"><a href=\"#Angular-提供的验证器函数\" class=\"headerlink\" title=\"Angular 提供的验证器函数\"></a><code>Angular</code> 提供的验证器函数</h3><p>对于响应式表单，<code>Angular</code> 提供了一组常用的验证器函数，这些函数接收一个表单控件，验证并根据验证的结果返回一个空值（<code>null</code>，其代表验证通过）或错误对象。当然，<code>HTML5</code> 存在一些内置的属性，用来进行原生的验证，如 <code>required</code>，<code>minLength</code>，<code>maxLength</code>，<code>pattern</code> 等，其用法如下所示</p>\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">required</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>Angular</code> 提供的验证器函数时，需要在组件中导入 <code>Validators</code> 类，其基本用法如下所示。</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; FormBuilder, Validators &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb:FormBuilder</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Charter=<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:[<span class=\"string\">&#x27;&#x27;</span>,Validators.required], <span class=\"comment\">//使用验证</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>:[<span class=\"literal\">null</span>],</span><br><span class=\"line\">  <span class=\"attr\">address</span>:<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">    <span class=\"attr\">province</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">city</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">county</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">zip</span>:[<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>Angular</code> 自带的 <code>Validators</code> 验证器，其提供的验证方案如下所示。</p>\n<blockquote>\n<p><code>Validators.min()</code>，要求控件大于等于某个值，一般用于验证数字</p>\n</blockquote>\n<p>用法：<code>const age=new FormControl(18,Validators.min(2))</code></p>\n<blockquote>\n<p><code>Validators.max()</code>，要求控件小于等于某个值，一般用于验证数字</p>\n</blockquote>\n<p>用法：<code>const age=new FormControl(0,Validators.max(2))</code></p>\n<blockquote>\n<p><code>Validators.required</code>，要求控件非空，一般用于验证 <code>input</code> 输入或 <code>select</code> 框</p>\n</blockquote>\n<p>用法：<code>const name=new FormControl(&#39;&#39;,Validators.required</code>)</p>\n<blockquote>\n<p><code>Validators.requiredTrue</code>，要求控件值为真，一般用于验证 <code>checkbox</code></p>\n</blockquote>\n<p>用法：<code>const control=new FormControl(&#39;&#39;,Validators.requiredTrue)</code></p>\n<blockquote>\n<p><code>Validators.email</code>，要求控件的值为 <code>email</code> 格式，一般用于验证输入为邮箱格式</p>\n</blockquote>\n<p>用法：<code>const owebEmail=new FormControl(&#39;&#39;,Validators.email)</code></p>\n<blockquote>\n<p><code>Validators.minLength()</code>，要求控件值的字符长度大于等于某个指定的长度，一般用于验证 <code>input</code> 的 <code>text</code> 输入类型</p>\n</blockquote>\n<p>用法：<code>const name=new FormControl(&#39;&#39;,Validators.minLength(8))</code></p>\n<blockquote>\n<p><code>Validators.maxLength()</code>，要求控件值的字符长度小于等于某个指定的长度，一般用于验证 <code>input</code> 的 <code>text</code> 输入类型</p>\n</blockquote>\n<p>用法：<code>const name=new FormControl(&#39;&#39;,Validators.maxLength(8))</code></p>\n<blockquote>\n<p><code>Validators.pattern()</code>，要求控件的值符合某种规则（正则表达式），一般用于验证 <code>input</code> 的 <code>text</code> 输入类型，判断其输入是否符合某种正则表达式</p>\n</blockquote>\n<p>用法：<code>const name=new FormControl(&#39;&#39;,Validators.pattern(&#39;[a-zA-Z]*&#39;))</code>，验证 <code>name</code> 控件的值只包含字母或为空格</p>\n<blockquote>\n<p><code>Validators.nullValidator</code>，该验证器什么也不做</p>\n</blockquote>\n<p>用法：<code>const name=new FormControl(&#39;&#39;,Validators.nullValidator)</code></p>\n<blockquote>\n<p><code>Validators.compose()</code>，将多个验证器合并成一个</p>\n</blockquote>\n<p>用法：<code>const name=new FormControl(&#39;&#39;,Validators.compose([Validators.required,Validators.pattern(&#39;[a-zA-Z]*&#39;)]))</code>，验证 <code>name</code> 控件必须要有值且只包含字母</p>\n<p>存在多个验证器时的另一种写法：<code>const name=new FormControl(&#39;&#39;,[Validators.required,Validators.pattern(&#39;[a-zA-Z]*&#39;)])</code>，直接去掉 <code>Validators.compose()</code></p>\n<blockquote>\n<p><code>Validators.asyncCompose()</code>，将多个异步验证器合并成一个</p>\n</blockquote>\n<h3 id=\"自定义验证器函数\"><a href=\"#自定义验证器函数\" class=\"headerlink\" title=\"自定义验证器函数\"></a>自定义验证器函数</h3><p>虽然 <code>Angular</code> 提供丰富的内置验证器函数，但是不能保证这些内置验证器函数能用于所有的表单，这时，就需要开发者创建自定义验证器。</p>\n<p>假如需要定义一个 <code>input</code> 的 <code>text</code> 框，禁止在框中出现 <code>jack</code> 的字符。其验证器代码如下所示</p>\n<p>forbidden.directive.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forbiddenValitors</span>(<span class=\"params\">nameRe:<span class=\"built_in\">RegExp</span></span>):<span class=\"title\">ValidatorFn</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (control:AbstractControl):&#123;[key:<span class=\"built_in\">string</span>]:<span class=\"built_in\">any</span>&#125; | <span class=\"function\"><span class=\"params\">null</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> forbidden=nameRe.test(control.value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> forbidden ? &#123;<span class=\"string\">&#x27;forbiddenName&#x27;</span>:&#123;<span class=\"attr\">value</span>:control.value&#125;&#125; : <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在响应式表单中使用自定义验证器</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; forbiddenValitors &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../forbidden.directive&#x27;</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">Charter=<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:[<span class=\"string\">&#x27;&#x27;</span>,[forbiddenValitors(<span class=\"regexp\">/jack/i</span>)]],</span><br><span class=\"line\">  <span class=\"attr\">age</span>:[<span class=\"literal\">null</span>],</span><br><span class=\"line\">  <span class=\"attr\">address</span>:<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">    <span class=\"attr\">province</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">city</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">county</span>:[<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"> &#125;）</span><br></pre></td></tr></table></figure>\n\n<p>使用了自定义验证器后，在表单的 <code>name</code> 控制器中输入 <code>jack</code> 时，表单为 <code>invalid</code> 状态。</p>\n<h3 id=\"验证时错误提示\"><a href=\"#验证时错误提示\" class=\"headerlink\" title=\"验证时错误提示\"></a>验证时错误提示</h3><p>在表单中，用户的输入不符合要求时，表单一般都会提示错误（提高用户体验和告诉用户错在什么地方）。响应式表单中也可以实现该功能。代码如下所示</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">Charter=<span class=\"built_in\">this</span>.fb.group(&#123; <span class=\"comment\">//加入自定义验证器</span></span><br><span class=\"line\">  <span class=\"attr\">name</span>:[<span class=\"string\">&#x27;&#x27;</span>,[Validators.required,Validators.minLength(<span class=\"number\">4</span>),forbiddenValitor(<span class=\"regexp\">/jack/i</span>)]],</span><br><span class=\"line\">  ....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">get</span> <span class=\"title\">name</span>()&#123; <span class=\"comment\">//必须，页面中需要 name</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.Charter.get(<span class=\"string\">&#x27;name&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 姓名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;name.invalid &amp;&amp; (name.dirty &amp;&amp; name.touched)&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;name.errors.required&quot;</span>&gt;</span>姓名是必填项<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;name.errors.minlength&quot;</span>&gt;</span>姓名字符必须大于4<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>  *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;name.errors.forbiddenName&quot;</span>&gt;</span>姓名不能存在jack字符<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 提示：此处的 forbiddenName 需要和自定义验证器中 forbiddenName 字符一致 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"异步验证\"><a href=\"#异步验证\" class=\"headerlink\" title=\"异步验证\"></a>异步验证</h3><p>异步验证也是表单验证中重要的一部分，其应用的场景一般需要进行远程通讯。比如用户在使用表单进行注册时，规定用户名不能和已有的用户名相同，由于前端不知道已有的用户名有哪些，这就需要将已经输入的用户名去和后台数据库里面的用户名相匹配。</p>\n<p>其异步验证代码如下所示</p>\n<p>async.service.ts（返回 Observable 对象，模拟 http 请求）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable,<span class=\"keyword\">of</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> forbArr=[<span class=\"string\">&#x27;jack&#x27;</span>,<span class=\"string\">&#x27;lucy&#x27;</span>,<span class=\"string\">&#x27;bing&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;<span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsycService</span> </span>&#123;</span><br><span class=\"line\">  _can_use(s:<span class=\"built_in\">string</span>):Observable&lt;<span class=\"built_in\">boolean</span>&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> bool=forbArr.indexOf(s)&gt;-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">of</span>(bool)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>asyc-name-validator.ts（定义异步验证器）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AsyncValidator, AbstractControl, ValidationErrors&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; map, catchError &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/operators&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AsycService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../asyc.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123; <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsycNameValidatorFn</span> <span class=\"title\">implements</span> <span class=\"title\">AsyncValidator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> asycService:AsycService</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  validate(ctrl:AbstractControl):<span class=\"built_in\">Promise</span>&lt;ValidationErrors | <span class=\"literal\">null</span>&gt; | Observable&lt;ValidationErrors | <span class=\"literal\">null</span>&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.asycService._can_use(ctrl.value).pipe(</span><br><span class=\"line\">      map(<span class=\"function\"><span class=\"params\">xx</span>=&gt;</span>(xx ? &#123;<span class=\"attr\">can_use</span>:<span class=\"literal\">false</span>&#125; : <span class=\"literal\">null</span>)),</span><br><span class=\"line\">      catchError(<span class=\"function\">()=&gt;</span><span class=\"literal\">null</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>reactive.component.ts（使用异步验证器）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; FormBuilder &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AsycNameValidatorFn &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../asyc-name-validator&#x27;</span>;</span><br><span class=\"line\">...<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb:FormBuilder,<span class=\"keyword\">private</span> asycnameValidator:AsycNameValidatorFn</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Charter=<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:[<span class=\"string\">&#x27;xx&#x27;</span>, </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">validators</span>:[Validators.required], <span class=\"comment\">// 同步校验通过才执行异步校验</span></span><br><span class=\"line\">      <span class=\"attr\">asyncValidators</span>:[<span class=\"built_in\">this</span>.asycnameValidator.validate.bind(<span class=\"built_in\">this</span>.asycnameValidator)],</span><br><span class=\"line\">      <span class=\"attr\">updateOn</span>: <span class=\"string\">&#x27;blur&#x27;</span> <span class=\"comment\">//blur 失去焦点时验证</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">age</span>:[<span class=\"number\">10</span>],</span><br><span class=\"line\">  <span class=\"attr\">email</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">address</span>:<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">    <span class=\"attr\">province</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">city</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">county</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">zip</span>:[<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>当在页面中的 <code>name</code> <code>input</code> 框中输入 <code>jack</code>、<code>lucy</code> 或 <code>bing</code> 时，页面中表单状态为 <code>INVALID</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 <code>Angular</code> 中，提供了两种表单来处理用户的输入，<code>模板驱动表单</code> 和 <code>响应式表单</code>。</p>\n<h2 id=\"建立表单模型\"><a href=\"#建立表单模型\" class=\"headerlink\" title=\"建立表单模型\"></a>建立表单模型</h2><h3 id=\"响应式表单\"><a href=\"#响应式表单\" class=\"headerlink\" title=\"响应式表单\"></a>响应式表单</h3><blockquote>\n<p><strong>前提条件</strong>：在需要使用响应式表单的组件所在的模块中引入 <code>ReactiveFormsModule</code></p>\n</blockquote>\n<p>最基本的响应式表单</p>\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span>  [<span class=\"attr\">formControl</span>]=<span class=\"string\">&quot;nameControl&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; FormControl &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">nameControl = <span class=\"keyword\">new</span> FormControl(<span class=\"string\">&#x27;jack&#x27;</span>); <span class=\"comment\">//jack是初始值，也可以为空字符串(&#x27;&#x27;)</span></span><br></pre></td></tr></table></figure>\n\n<p>此处为单个控件，使用响应式表单时需要引入 <code>FormControl</code>。</p>\n<p><strong>注：</strong> <code>Html</code> 模板中的 <code>class=&quot;form-control&quot;</code> 代码只和样式有关，和响应式表单无关。</p>\n<h3 id=\"模板驱动表单\"><a href=\"#模板驱动表单\" class=\"headerlink\" title=\"模板驱动表单\"></a>模板驱动表单</h3><blockquote>\n<p><strong>前提</strong>：在需要使用响应式表单的组件的对应的模块中引入 <code>FormsModule</code></p>\n</blockquote>\n<p>最基本的模板驱动表单</p>\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;favorite&quot;</span>  [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">&quot;color&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"attr\">color</span>:<span class=\"built_in\">string</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"响应式表单-1\"><a href=\"#响应式表单-1\" class=\"headerlink\" title=\"响应式表单\"></a>响应式表单</h2><p>响应式表单适用于构建大型表单，且其跨代码的重用性强</p>\n<h3 id=\"控件分组\"><a href=\"#控件分组\" class=\"headerlink\" title=\"控件分组\"></a>控件分组</h3><p>响应式表单只是展示一个控件，会使用到 <code>FormControl</code>。而响应式表单在项目中往往适用于大型表单，即表单中不会只存在一个表单控件。而存在多个控件时，需要对表单控件进行分组。在响应式表单中，对控件进行分组，需要引入并实例化 <code>FormGroup</code>，其代码如下所示。</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; FormControl, FormGroup &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">Charter=<span class=\"keyword\">new</span> FormGroup(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"keyword\">new</span> FormControl(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"keyword\">new</span> FormControl()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;Charter&quot;</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;consoleSubmit()&quot;</span>&gt;</span></span><br><span class=\"line\">  名称：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name1&quot;</span>  <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  年龄<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span>  <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-2&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-sm&quot;</span>&gt;</span>提交表单<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>FormControl</code> 能让开发者管理单个控件，当存在控件分组时，<code>FromGroup</code> 实例能跟踪一组 <code>FormControl</code> 的状态。</p>\n<p>在 <code>Ts</code> 代码中实例化 <code>FromGroup</code> 后，在 <code>Html</code> 中，将 <code>Charter</code> 这个 <code>FormGroup</code> 通过 <code>FormGroup</code> 指令绑定到 <code>form</code> 元素上。由 <code>formControlName</code> 指令提供的 <code>formControlName</code> 属性将每个输入框和 <code>FormGroup</code> 中的定义 <code>FormControl</code> 关联起来。</p>\n<h3 id=\"嵌套表单组\"><a href=\"#嵌套表单组\" class=\"headerlink\" title=\"嵌套表单组\"></a>嵌套表单组</h3><p>在响应式表单中，建立更加复杂的表单时，对表单信息进行分组，将相关联的消息放到一个组，将该组又放到一个更大的组中，即嵌套表单组。使用嵌套分组能让开发者更加易于实现和管理表单。</p>\n<p>在填写个人信息表单时，地址是一个很常见的信息。在响应式表单中，地址是对表单进行分组的一个绝佳范例。其代码如下所示。</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...<span class=\"comment\">//代码块</span></span><br><span class=\"line\">Charter=<span class=\"keyword\">new</span> FormGroup(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"keyword\">new</span> FormControl(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"keyword\">new</span> FormControl()，</span><br><span class=\"line\">  <span class=\"attr\">address</span>:<span class=\"keyword\">new</span> FormGroup(&#123;</span><br><span class=\"line\">    <span class=\"attr\">province</span>:<span class=\"keyword\">new</span> FormControl(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">city</span>:<span class=\"keyword\">new</span> FormControl(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">county</span>:<span class=\"keyword\">new</span> FormControl(<span class=\"string\">&#x27;&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">zip</span>:<span class=\"keyword\">new</span> FormControl(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">...<span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure>\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;Charter&quot;</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;consoleSubmit()&quot;</span>&gt;</span></span><br><span class=\"line\">  名称：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  年龄：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">formGroupName</span>=<span class=\"string\">&quot;address&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-2&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      省：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;province&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;province&quot;</span>&gt;</span></span><br><span class=\"line\">      市：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;city&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;city&quot;</span>&gt;</span></span><br><span class=\"line\">      县：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;county&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;county&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    具体地址：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;zip&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;zip&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-success&quot;</span>&gt;</span>提交表单<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在上面代码中，<code>address</code> 为一个 <code>FormGroup</code>，在 <code>Html</code> 中通过 <code>FormGroupName</code> 指令将 <code>address</code> 这个 <code>FormGroup</code> 与视图关联起来。</p>\n<h3 id=\"FormBuilder-生成表单控件\"><a href=\"#FormBuilder-生成表单控件\" class=\"headerlink\" title=\"FormBuilder 生成表单控件\"></a>FormBuilder 生成表单控件</h3><p>在上面的 <code>Ts</code> 代码中实例化表单控件时，只有几个属性，一会是 <code>new FormGroup()</code>，一会是 <code>new FormControl()</code>，代码过于笨重，而 <code>Angular</code> 提供了 <code>FormBuilder</code> 服务来快捷生成表单。其代码如下所示</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; FormBuilder &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb:FormBuilder</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Charter=<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">age</span>:[<span class=\"literal\">null</span>],</span><br><span class=\"line\">  <span class=\"attr\">address</span>:<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">    <span class=\"attr\">province</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">city</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">county</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">zip</span>:[<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb:FormBuilder</span>)</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>FormBuilder</code> 创建表单和使用 <code>new FormGroup()</code> 和 <code>ngw FormControl()</code> 创建表单结果是一样的，但其代码跟加的简洁。</p>\n<blockquote>\n<p><code>FormBuilder</code> 服务有三个方法：<code>control()</code>、<code>group()</code> 和 <code>array()</code></p>\n</blockquote>\n<h3 id=\"FormArray-管理动态表单\"><a href=\"#FormArray-管理动态表单\" class=\"headerlink\" title=\"FormArray 管理动态表单\"></a>FormArray 管理动态表单</h3><p><code>FormArry</code> 是 <code>FormGroup</code> 的另一种选择，当开发者事先不知道子控件的具体数量是多少， <code>FormArray</code> 是一种很好的选择，它可以帮助开发者很好的管理匿名控件。</p>\n<p>应用场景：当表单中存在组件变化时，如在 <code>Charter</code> (人物)表单中，添加人物的 <code>enable</code> （能力）属性，但是人物的 <code>enable</code> 能力不可能只有一个，存在多个，比如驾驶，观察，组织等，不确定有多少。而  <code>FormArray</code> 就是应用于这种场景，其代码如下所示</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; FormArray, FormBuilder, Validators &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb:FormBuilder</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Charter=<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">age</span>:[<span class=\"literal\">null</span>],</span><br><span class=\"line\">  <span class=\"attr\">address</span>:<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">    <span class=\"attr\">province</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">city</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">county</span>:[<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"comment\">// enable:this.fb.array([this.fb.control(&#x27;&#x27;)])  //加入初始值</span></span><br><span class=\"line\">  <span class=\"attr\">enable</span>:<span class=\"built_in\">this</span>.fb.array([])</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">get</span> <span class=\"title\">enable</span>()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.Charter.get(<span class=\"string\">&#x27;enable&#x27;</span>) <span class=\"keyword\">as</span> FormArray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb:FormBuilder</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">addNewEnable</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//添加新input以添加新能力，同时可以加入验证器</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.enable.push(<span class=\"built_in\">this</span>.fb.control(<span class=\"string\">&#x27;&#x27;</span>,Validators.required))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">reduceEnable</span>(<span class=\"params\">i</span>)</span>&#123;<span class=\"comment\">//移除能力</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.enable.removeAt(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> [<span class=\"attr\">formGroup</span>]=<span class=\"string\">&quot;Charter&quot;</span> (<span class=\"attr\">ngSubmit</span>)=<span class=\"string\">&quot;consoleForm()&quot;</span>&gt;</span></span><br><span class=\"line\">  姓名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\">  年龄：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;age&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;d-flex mt-2&quot;</span> <span class=\"attr\">formGroupName</span>=<span class=\"string\">&quot;address&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>地址：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;clearfix&quot;</span>&gt;</span></span><br><span class=\"line\">      省<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;province&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;province&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">      市<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;city&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;city&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">      县<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;county&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;county&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-2&quot;</span> <span class=\"attr\">formArrayName</span>=<span class=\"string\">&quot;enable&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>能力：<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">&quot;let en of enable.controls;let i=index&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;d-flex&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> [<span class=\"attr\">formControlName</span>]=<span class=\"string\">&quot;i&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;reduceEnable(i)&quot;</span>&gt;</span>移除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;addNewEnable()&quot;</span>&gt;</span>添加新能力<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;small text-muted&quot;</span>&gt;</span>表单的值：&#123;&#123;Charter.value|json&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> [<span class=\"attr\">disabled</span>]=<span class=\"string\">&quot;!Charter.valid&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>提交表单<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其在浏览器页面中的效果（<code>Html</code> 代码中已移除样式类）如下所示</p>\n<p><img src=\"https://bingolil.github.io/images/angular-formarray.png\" alt=\"FormArray管理动态表单\"></p>\n<blockquote>\n<p> <strong>注意</strong>：在 <code>Html</code> 中，关于响应式表单的指令一律小写开头，如 <code>formGroup</code>，<code>formControlName</code>等，不能写成 <code>FormGroup</code>，<code>FormControlName</code>等，若大写开头会报错或绑定不成功</p>\n</blockquote>\n<p>在上面的 <code>Ts</code> 代码中，使用了<code>FormArray</code> 的 <code>push</code> 和 <code>removeAt()</code> 方法，<code>FormArray</code> 的常用方法如下表所示</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>at()</td>\n<td>(index:number)</td>\n<td>获取指定位置的 FormControl</td>\n</tr>\n<tr>\n<td>push()</td>\n<td>(control:AbstractControl)</td>\n<td>在数组末尾添加一个 FromControl</td>\n</tr>\n<tr>\n<td>insert()</td>\n<td>(index:number,control:AbstractControl)</td>\n<td>在指定位置添加一个 FromControl</td>\n</tr>\n<tr>\n<td>removeAt()</td>\n<td>(index:number)</td>\n<td>移除指定位置的 FromControl</td>\n</tr>\n<tr>\n<td>setControl()</td>\n<td>(index:number,control:AbstractControl)</td>\n<td>替换指定位置的 FromControl</td>\n</tr>\n<tr>\n<td>setValue</td>\n<td>(value: any[])</td>\n<td>设置 FormArray 中各个控件的值，数据结构不匹配时会报错（建议到 <a href=\"https://www.angular.cn/api/forms/FormArray#setvalue\"><code>官网</code></a> 查看）</td>\n</tr>\n<tr>\n<td>patchValue</td>\n<td>(value: any[])</td>\n<td>设置 FormArray 中各个控件的值，数据结构不匹配时不会会报错（建议到 <a href=\"https://www.angular.cn/api/forms/FormArray#patchvalue\"><code>官网</code></a> 查看）</td>\n</tr>\n<tr>\n<td>resset()</td>\n<td>(value:any[])</td>\n<td>重置 FormArray 的值，并设置各个控件标记为 untouched 和 pristine 都为true</td>\n</tr>\n<tr>\n<td>getRawValue()</td>\n<td>()</td>\n<td>这个 FormArray 的聚合值，包括已禁用的控件</td>\n</tr>\n</tbody></table>\n<h2 id=\"响应式表单验证\"><a href=\"#响应式表单验证\" class=\"headerlink\" title=\"响应式表单验证\"></a>响应式表单验证</h2><p>表单验证是表单中最重要的部分之一，对于一个表单，有一个完善的表单验证能有效的降低后台开发者的工作时间。并且在提交表单时，减少项目的报错（提交的表单数据不符合需求），提高用户体验。</p>\n<h3 id=\"Angular-提供的验证器函数\"><a href=\"#Angular-提供的验证器函数\" class=\"headerlink\" title=\"Angular 提供的验证器函数\"></a><code>Angular</code> 提供的验证器函数</h3><p>对于响应式表单，<code>Angular</code> 提供了一组常用的验证器函数，这些函数接收一个表单控件，验证并根据验证的结果返回一个空值（<code>null</code>，其代表验证通过）或错误对象。当然，<code>HTML5</code> 存在一些内置的属性，用来进行原生的验证，如 <code>required</code>，<code>minLength</code>，<code>maxLength</code>，<code>pattern</code> 等，其用法如下所示</p>\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">required</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>Angular</code> 提供的验证器函数时，需要在组件中导入 <code>Validators</code> 类，其基本用法如下所示。</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; FormBuilder, Validators &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb:FormBuilder</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Charter=<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:[<span class=\"string\">&#x27;&#x27;</span>,Validators.required], <span class=\"comment\">//使用验证</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>:[<span class=\"literal\">null</span>],</span><br><span class=\"line\">  <span class=\"attr\">address</span>:<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">    <span class=\"attr\">province</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">city</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">county</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">zip</span>:[<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>Angular</code> 自带的 <code>Validators</code> 验证器，其提供的验证方案如下所示。</p>\n<blockquote>\n<p><code>Validators.min()</code>，要求控件大于等于某个值，一般用于验证数字</p>\n</blockquote>\n<p>用法：<code>const age=new FormControl(18,Validators.min(2))</code></p>\n<blockquote>\n<p><code>Validators.max()</code>，要求控件小于等于某个值，一般用于验证数字</p>\n</blockquote>\n<p>用法：<code>const age=new FormControl(0,Validators.max(2))</code></p>\n<blockquote>\n<p><code>Validators.required</code>，要求控件非空，一般用于验证 <code>input</code> 输入或 <code>select</code> 框</p>\n</blockquote>\n<p>用法：<code>const name=new FormControl(&#39;&#39;,Validators.required</code>)</p>\n<blockquote>\n<p><code>Validators.requiredTrue</code>，要求控件值为真，一般用于验证 <code>checkbox</code></p>\n</blockquote>\n<p>用法：<code>const control=new FormControl(&#39;&#39;,Validators.requiredTrue)</code></p>\n<blockquote>\n<p><code>Validators.email</code>，要求控件的值为 <code>email</code> 格式，一般用于验证输入为邮箱格式</p>\n</blockquote>\n<p>用法：<code>const owebEmail=new FormControl(&#39;&#39;,Validators.email)</code></p>\n<blockquote>\n<p><code>Validators.minLength()</code>，要求控件值的字符长度大于等于某个指定的长度，一般用于验证 <code>input</code> 的 <code>text</code> 输入类型</p>\n</blockquote>\n<p>用法：<code>const name=new FormControl(&#39;&#39;,Validators.minLength(8))</code></p>\n<blockquote>\n<p><code>Validators.maxLength()</code>，要求控件值的字符长度小于等于某个指定的长度，一般用于验证 <code>input</code> 的 <code>text</code> 输入类型</p>\n</blockquote>\n<p>用法：<code>const name=new FormControl(&#39;&#39;,Validators.maxLength(8))</code></p>\n<blockquote>\n<p><code>Validators.pattern()</code>，要求控件的值符合某种规则（正则表达式），一般用于验证 <code>input</code> 的 <code>text</code> 输入类型，判断其输入是否符合某种正则表达式</p>\n</blockquote>\n<p>用法：<code>const name=new FormControl(&#39;&#39;,Validators.pattern(&#39;[a-zA-Z]*&#39;))</code>，验证 <code>name</code> 控件的值只包含字母或为空格</p>\n<blockquote>\n<p><code>Validators.nullValidator</code>，该验证器什么也不做</p>\n</blockquote>\n<p>用法：<code>const name=new FormControl(&#39;&#39;,Validators.nullValidator)</code></p>\n<blockquote>\n<p><code>Validators.compose()</code>，将多个验证器合并成一个</p>\n</blockquote>\n<p>用法：<code>const name=new FormControl(&#39;&#39;,Validators.compose([Validators.required,Validators.pattern(&#39;[a-zA-Z]*&#39;)]))</code>，验证 <code>name</code> 控件必须要有值且只包含字母</p>\n<p>存在多个验证器时的另一种写法：<code>const name=new FormControl(&#39;&#39;,[Validators.required,Validators.pattern(&#39;[a-zA-Z]*&#39;)])</code>，直接去掉 <code>Validators.compose()</code></p>\n<blockquote>\n<p><code>Validators.asyncCompose()</code>，将多个异步验证器合并成一个</p>\n</blockquote>\n<h3 id=\"自定义验证器函数\"><a href=\"#自定义验证器函数\" class=\"headerlink\" title=\"自定义验证器函数\"></a>自定义验证器函数</h3><p>虽然 <code>Angular</code> 提供丰富的内置验证器函数，但是不能保证这些内置验证器函数能用于所有的表单，这时，就需要开发者创建自定义验证器。</p>\n<p>假如需要定义一个 <code>input</code> 的 <code>text</code> 框，禁止在框中出现 <code>jack</code> 的字符。其验证器代码如下所示</p>\n<p>forbidden.directive.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forbiddenValitors</span>(<span class=\"params\">nameRe:<span class=\"built_in\">RegExp</span></span>):<span class=\"title\">ValidatorFn</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (control:AbstractControl):&#123;[key:<span class=\"built_in\">string</span>]:<span class=\"built_in\">any</span>&#125; | <span class=\"function\"><span class=\"params\">null</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> forbidden=nameRe.test(control.value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> forbidden ? &#123;<span class=\"string\">&#x27;forbiddenName&#x27;</span>:&#123;<span class=\"attr\">value</span>:control.value&#125;&#125; : <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在响应式表单中使用自定义验证器</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; forbiddenValitors &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../forbidden.directive&#x27;</span></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">Charter=<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:[<span class=\"string\">&#x27;&#x27;</span>,[forbiddenValitors(<span class=\"regexp\">/jack/i</span>)]],</span><br><span class=\"line\">  <span class=\"attr\">age</span>:[<span class=\"literal\">null</span>],</span><br><span class=\"line\">  <span class=\"attr\">address</span>:<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">    <span class=\"attr\">province</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">city</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">county</span>:[<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"> &#125;）</span><br></pre></td></tr></table></figure>\n\n<p>使用了自定义验证器后，在表单的 <code>name</code> 控制器中输入 <code>jack</code> 时，表单为 <code>invalid</code> 状态。</p>\n<h3 id=\"验证时错误提示\"><a href=\"#验证时错误提示\" class=\"headerlink\" title=\"验证时错误提示\"></a>验证时错误提示</h3><p>在表单中，用户的输入不符合要求时，表单一般都会提示错误（提高用户体验和告诉用户错在什么地方）。响应式表单中也可以实现该功能。代码如下所示</p>\n<p>Ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">Charter=<span class=\"built_in\">this</span>.fb.group(&#123; <span class=\"comment\">//加入自定义验证器</span></span><br><span class=\"line\">  <span class=\"attr\">name</span>:[<span class=\"string\">&#x27;&#x27;</span>,[Validators.required,Validators.minLength(<span class=\"number\">4</span>),forbiddenValitor(<span class=\"regexp\">/jack/i</span>)]],</span><br><span class=\"line\">  ....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">get</span> <span class=\"title\">name</span>()&#123; <span class=\"comment\">//必须，页面中需要 name</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.Charter.get(<span class=\"string\">&#x27;name&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 姓名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">formControlName</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;name.invalid &amp;&amp; (name.dirty &amp;&amp; name.touched)&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;name.errors.required&quot;</span>&gt;</span>姓名是必填项<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;name.errors.minlength&quot;</span>&gt;</span>姓名字符必须大于4<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>  *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;name.errors.forbiddenName&quot;</span>&gt;</span>姓名不能存在jack字符<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 提示：此处的 forbiddenName 需要和自定义验证器中 forbiddenName 字符一致 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"异步验证\"><a href=\"#异步验证\" class=\"headerlink\" title=\"异步验证\"></a>异步验证</h3><p>异步验证也是表单验证中重要的一部分，其应用的场景一般需要进行远程通讯。比如用户在使用表单进行注册时，规定用户名不能和已有的用户名相同，由于前端不知道已有的用户名有哪些，这就需要将已经输入的用户名去和后台数据库里面的用户名相匹配。</p>\n<p>其异步验证代码如下所示</p>\n<p>async.service.ts（返回 Observable 对象，模拟 http 请求）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable,<span class=\"keyword\">of</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> forbArr=[<span class=\"string\">&#x27;jack&#x27;</span>,<span class=\"string\">&#x27;lucy&#x27;</span>,<span class=\"string\">&#x27;bing&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;<span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsycService</span> </span>&#123;</span><br><span class=\"line\">  _can_use(s:<span class=\"built_in\">string</span>):Observable&lt;<span class=\"built_in\">boolean</span>&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> bool=forbArr.indexOf(s)&gt;-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">of</span>(bool)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>asyc-name-validator.ts（定义异步验证器）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AsyncValidator, AbstractControl, ValidationErrors&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; map, catchError &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs/operators&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AsycService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../asyc.service&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123; <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsycNameValidatorFn</span> <span class=\"title\">implements</span> <span class=\"title\">AsyncValidator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> asycService:AsycService</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  validate(ctrl:AbstractControl):<span class=\"built_in\">Promise</span>&lt;ValidationErrors | <span class=\"literal\">null</span>&gt; | Observable&lt;ValidationErrors | <span class=\"literal\">null</span>&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.asycService._can_use(ctrl.value).pipe(</span><br><span class=\"line\">      map(<span class=\"function\"><span class=\"params\">xx</span>=&gt;</span>(xx ? &#123;<span class=\"attr\">can_use</span>:<span class=\"literal\">false</span>&#125; : <span class=\"literal\">null</span>)),</span><br><span class=\"line\">      catchError(<span class=\"function\">()=&gt;</span><span class=\"literal\">null</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>reactive.component.ts（使用异步验证器）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; FormBuilder &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/forms&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AsycNameValidatorFn &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../asyc-name-validator&#x27;</span>;</span><br><span class=\"line\">...<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> fb:FormBuilder,<span class=\"keyword\">private</span> asycnameValidator:AsycNameValidatorFn</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Charter=<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:[<span class=\"string\">&#x27;xx&#x27;</span>, </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">validators</span>:[Validators.required], <span class=\"comment\">// 同步校验通过才执行异步校验</span></span><br><span class=\"line\">      <span class=\"attr\">asyncValidators</span>:[<span class=\"built_in\">this</span>.asycnameValidator.validate.bind(<span class=\"built_in\">this</span>.asycnameValidator)],</span><br><span class=\"line\">      <span class=\"attr\">updateOn</span>: <span class=\"string\">&#x27;blur&#x27;</span> <span class=\"comment\">//blur 失去焦点时验证</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">age</span>:[<span class=\"number\">10</span>],</span><br><span class=\"line\">  <span class=\"attr\">email</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">  <span class=\"attr\">address</span>:<span class=\"built_in\">this</span>.fb.group(&#123;</span><br><span class=\"line\">    <span class=\"attr\">province</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">city</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">county</span>:[<span class=\"string\">&#x27;&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">zip</span>:[<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>当在页面中的 <code>name</code> <code>input</code> 框中输入 <code>jack</code>、<code>lucy</code> 或 <code>bing</code> 时，页面中表单状态为 <code>INVALID</code></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckwe931jy0007ycszc36mhevf","category_id":"ckwe931jv0004ycsz13jyhz1c","_id":"ckwe931k0000aycsz78xo2g57"},{"post_id":"ckwe931jq0001ycszdi7keppu","category_id":"ckwe931jv0004ycsz13jyhz1c","_id":"ckwe931k1000dycszcsjt9hgj"},{"post_id":"ckwe931ju0003ycsz1lvs15ab","category_id":"ckwe931jv0004ycsz13jyhz1c","_id":"ckwe931k1000fycsz6m2a3x3m"},{"post_id":"ckwe931jx0006ycsz30v5b7g3","category_id":"ckwe931jv0004ycsz13jyhz1c","_id":"ckwe931k2000iycszdxqa8ek0"},{"post_id":"ckwe931kz000tycsz0zic6im2","category_id":"ckwe931jv0004ycsz13jyhz1c","_id":"ckwe931l2000yycszd9a156ct"},{"post_id":"ckwe931l0000uycsz4mex0fql","category_id":"ckwe931jv0004ycsz13jyhz1c","_id":"ckwe931l2000zycsze6ry2jdv"},{"post_id":"ckwe931l1000wycsz0c8x5kqz","category_id":"ckwe931jv0004ycsz13jyhz1c","_id":"ckwe931l30012ycsz18l38w57"},{"post_id":"ckwe931l2000xycsz1b0u9utv","category_id":"ckwe931jv0004ycsz13jyhz1c","_id":"ckwe931l30014ycsz6e3543mz"}],"PostTag":[{"post_id":"ckwe931jq0001ycszdi7keppu","tag_id":"ckwe931jw0005ycszf7s97ag8","_id":"ckwe931k1000eycsz05vrfu0a"},{"post_id":"ckwe931jq0001ycszdi7keppu","tag_id":"ckwe931jz0009ycsz225w2fe0","_id":"ckwe931k1000gycszabajfad2"},{"post_id":"ckwe931ju0003ycsz1lvs15ab","tag_id":"ckwe931jz0009ycsz225w2fe0","_id":"ckwe931k2000kycsz02z081wq"},{"post_id":"ckwe931ju0003ycsz1lvs15ab","tag_id":"ckwe931k2000hycsz83twblf3","_id":"ckwe931k3000lycsz2fen7hw7"},{"post_id":"ckwe931jx0006ycsz30v5b7g3","tag_id":"ckwe931jz0009ycsz225w2fe0","_id":"ckwe931k3000oycsz69aq9iow"},{"post_id":"ckwe931jx0006ycsz30v5b7g3","tag_id":"ckwe931k3000mycsz6v9sdjq9","_id":"ckwe931k3000pycszfwc1fleh"},{"post_id":"ckwe931jy0007ycszc36mhevf","tag_id":"ckwe931jz0009ycsz225w2fe0","_id":"ckwe931k4000rycsz0bg7781i"},{"post_id":"ckwe931jy0007ycszc36mhevf","tag_id":"ckwe931k3000qycsz3it012lo","_id":"ckwe931k4000sycsz2tttdhpg"},{"post_id":"ckwe931l2000xycsz1b0u9utv","tag_id":"ckwe931jz0009ycsz225w2fe0","_id":"ckwe931l30011ycszfbzb7gjm"},{"post_id":"ckwe931l2000xycsz1b0u9utv","tag_id":"ckwe931k3000mycsz6v9sdjq9","_id":"ckwe931l30013ycsz7q8zbb07"},{"post_id":"ckwe931kz000tycsz0zic6im2","tag_id":"ckwe931jz0009ycsz225w2fe0","_id":"ckwe931l40016ycszg8tlcua7"},{"post_id":"ckwe931kz000tycsz0zic6im2","tag_id":"ckwe931l1000vycsz0xn1d6zk","_id":"ckwe931l40017ycsz5c2ebfg8"},{"post_id":"ckwe931l0000uycsz4mex0fql","tag_id":"ckwe931jz0009ycsz225w2fe0","_id":"ckwe931l40018ycszdnzwcv7c"},{"post_id":"ckwe931l0000uycsz4mex0fql","tag_id":"ckwe931l30010ycszeu2c60ix","_id":"ckwe931l40019ycszcdczeh5t"},{"post_id":"ckwe931l1000wycsz0c8x5kqz","tag_id":"ckwe931jz0009ycsz225w2fe0","_id":"ckwe931l5001aycsz5vih5iya"},{"post_id":"ckwe931l1000wycsz0c8x5kqz","tag_id":"ckwe931l30010ycszeu2c60ix","_id":"ckwe931l5001bycszby928vj6"}],"Tag":[{"name":"Angular安装","_id":"ckwe931jw0005ycszf7s97ag8"},{"name":"Angular","_id":"ckwe931jz0009ycsz225w2fe0"},{"name":"Angular组件通讯","_id":"ckwe931k2000hycsz83twblf3"},{"name":"Angular表单","_id":"ckwe931k3000mycsz6v9sdjq9"},{"name":"Rxjs","_id":"ckwe931k3000qycsz3it012lo"},{"name":"Angular生命周期钩子","_id":"ckwe931l1000vycsz0xn1d6zk"},{"name":"Angular路由","_id":"ckwe931l30010ycszeu2c60ix"}]}}