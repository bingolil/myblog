{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/angular-cl.png","path":"images/angular-cl.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/angular-file.png","path":"images/angular-file.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/angular-gouzi.png","path":"images/angular-gouzi.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/angular-ngVInitError.png","path":"images/angular-ngVInitError.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/angular-service.png","path":"images/angular-service.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/angular-session.png","path":"images/angular-session.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/angular-verison.png","path":"images/angular-verison.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/com-tree.png","path":"images/com-tree.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/csh-angular.png","path":"images/csh-angular.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/git-cmd.png","path":"images/git-cmd.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/git-config.png","path":"images/git-config.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/git-key.png","path":"images/git-key.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/git-validate.png","path":"images/git-validate.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/github-join.png","path":"images/github-join.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/github-new.png","path":"images/github-new.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/github-newssh-2.png","path":"images/github-newssh-2.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/hexo-config1.png","path":"images/hexo-config1.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/hexo-deploy.png","path":"images/hexo-deploy.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/hexo-init.png","path":"images/hexo-init.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/hexo-version.png","path":"images/hexo-version.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/ng-help.png","path":"images/ng-help.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/ng-zorro-ant.png","path":"images/ng-zorro-ant.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/node-down.png","path":"images/node-down.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/node-msi.png","path":"images/node-msi.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/node-validate.png","path":"images/node-validate.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/polyfill.png","path":"images/polyfill.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/theme-name.png","path":"images/theme-name.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/update-1.png","path":"images/update-1.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/update-2.png","path":"images/update-2.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/update-3.png","path":"images/update-3.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/update-4.png","path":"images/update-4.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/github-newssh-1.png","path":"images/github-newssh-1.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/hexo-g-d.png","path":"images/hexo-g-d.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/git-down.png","path":"images/git-down.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/github-csh.png","path":"images/github-csh.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/github-themes.png","path":"images/github-themes.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/images/hexo-index.png","path":"images/hexo-index.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"9496ebbfd93eb286080422e150f53db8d2b6c962","modified":1539934218495},{"_id":"themes/indigo/.editorconfig","hash":"67a03b88eadd7810f2e01866e73814074ecd3b87","modified":1539929660550},{"_id":"themes/indigo/LICENSE","hash":"9dd0f70bc72c9d575447655526aded395bb93754","modified":1539929660551},{"_id":"themes/indigo/_config.yml","hash":"467e1546f2464b45ebb441935bc873e7c86e639c","modified":1543301286642},{"_id":"themes/indigo/README.md","hash":"cfc7d09fc2ce26003954d647e3bbf98f71574eb7","modified":1539929660552},{"_id":"themes/indigo/package.json","hash":"3ad9b9ccb1ddaad3136f179a7ebff7d7b1c193f7","modified":1539929660595},{"_id":"source/categories/index.md","hash":"8dd1c5f347ae8fc92658a11cfe71536e533f758a","modified":1539929513798},{"_id":"source/tags/index.md","hash":"66054fbb13e98bc5b4a4a431a39ad657078892cc","modified":1539928512126},{"_id":"themes/indigo/languages/en.yml","hash":"ba78def0453d08172248e220a1f9e145e99b4f23","modified":1539929660554},{"_id":"themes/indigo/languages/ja.yml","hash":"65a32717335211a45771a21fb7d7778808c6f0aa","modified":1539929660555},{"_id":"themes/indigo/languages/nl-NL","hash":"b540b76af76c1a180c517089ed2ad770cbded170","modified":1539929660555},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"6806e4c305facf19cbe4e37ccc5d6b00cb56e199","modified":1539929660556},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"9b8bdd9c8b68716f364503926dca6ba8571ee5ff","modified":1539929660557},{"_id":"themes/indigo/layout/archive.ejs","hash":"6897178ba358379d6a4b7c0ba1bc2ab97ad5303a","modified":1539929660587},{"_id":"themes/indigo/layout/categories.ejs","hash":"efae06b4d83aaf73ab93260381e891825bf404ac","modified":1539929660588},{"_id":"themes/indigo/layout/category.ejs","hash":"e5ba5cc2e092c199285b8097ef12ffe70bf84c91","modified":1539929660589},{"_id":"themes/indigo/layout/index.ejs","hash":"772c1985c7743e101598b4eddc253f9174c5605b","modified":1539929660590},{"_id":"themes/indigo/layout/layout.ejs","hash":"770af84fff104c398ce8b6c995130cddd3e9a1e9","modified":1539929660591},{"_id":"themes/indigo/layout/page.ejs","hash":"567c42b978da4c39b8b4982df19b940c26bc32a4","modified":1539929660592},{"_id":"themes/indigo/layout/post.ejs","hash":"efc3352828351f8574c51e8a93dc56c66660c3b1","modified":1539929660592},{"_id":"themes/indigo/layout/tag.ejs","hash":"90a231dea3a364b329a740e5d6c49c8cf5664fe9","modified":1539929660593},{"_id":"themes/indigo/layout/tags.ejs","hash":"1fc0461e9602b53899ec756e4361beb8cce74740","modified":1539929660594},{"_id":"themes/indigo/scripts/plugins.js","hash":"00ea278ea77733f546439aed507ce69a298da362","modified":1539936527472},{"_id":"source/_posts/angular/learn-1.md","hash":"3b9c3a17e94817ccd8b2d1882a819fa780bdd121","modified":1542961817418},{"_id":"source/_posts/angular/learn-2.md","hash":"27a3cfc0e4d909cef05aebee92e14b104d34b7c4","modified":1542961807455},{"_id":"source/_posts/angular/learn-3.md","hash":"c4d888ec56af060836cd92ff643d1354a0f10a60","modified":1542960875261},{"_id":"source/_posts/web/person-web-1.md","hash":"1dda6f57d7aeb1fb03a2bff66bc7e932dfb58a00","modified":1542874454798},{"_id":"source/_posts/web/person-web-2.md","hash":"e1646a6b863203c83cd3678c095f1922dcfdebf5","modified":1542874972829},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"1351dbfca311f0d50a939f9e1a91c4f65bbcdf5f","modified":1539929660558},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"c294c98617ce14082f9b3d5eec83328f480f5597","modified":1539929660558},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"c78444f5b350ca79b260361bf3e5b6361d2661ba","modified":1539929660559},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"580d26c39208c30f00ee6f2e18fd0dc8b6b5481a","modified":1543283242054},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"648db446567a81371b8a29d719d13636aa157012","modified":1539929660560},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"7208d4083ee3355aa969972a2ce249a67d56b3a6","modified":1539929660561},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1539929660562},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"ea6aded24a68de0914f24b3760f766b5e1c9835a","modified":1539929660563},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"13952250463f70d1c1bbbfdd7f4ee8160dd6d99b","modified":1539929660563},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"20597ac0d547aea37680ecf195eb129fe5ee19d8","modified":1539929660573},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"5b40f1e309ece0a2e18dcc2cb1eeb2975f1ec13b","modified":1539930053527},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"752109904304fdb8e988ee1254df2af9c0701466","modified":1539929660586},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"30ec74f081cc4c273a7bcd5d57da99072e9f0755","modified":1539929660586},{"_id":"themes/indigo/source/css/style.less","hash":"cf362925ae099b810fd5763e6b724b823612ed15","modified":1539929660655},{"_id":"themes/indigo/source/images/angular-cl.png","hash":"eacd89681ae3b6443cfb2b5b5d7dfdc2a4a40428","modified":1542878440054},{"_id":"themes/indigo/source/images/angular-file.png","hash":"b2e4e144cfef8c21d9b47eeeed3c9eaf8cc5e078","modified":1541153509373},{"_id":"themes/indigo/source/images/angular-gouzi.png","hash":"4932238ec384df3fcc0c80bd282ea2c2bd32057e","modified":1542782723024},{"_id":"themes/indigo/source/images/angular-ngVInitError.png","hash":"3fab1b1a1d4f22aed06283094a801e6486baaf91","modified":1542938060176},{"_id":"themes/indigo/source/images/angular-service.png","hash":"7cb2f1b81330e5510db4f45e4dc24043302b762a","modified":1541753796834},{"_id":"themes/indigo/source/images/angular-session.png","hash":"51a8e9b8acdf9f9fb6f42be471c1c596784c1abb","modified":1541754009092},{"_id":"themes/indigo/source/images/angular-verison.png","hash":"7dbb17506644db6382e3fe06ac03a62563451667","modified":1541143820344},{"_id":"themes/indigo/source/images/com-tree.png","hash":"b0b81edc0e40a4bc4e5e5402d8316b0984ae90b5","modified":1541756683705},{"_id":"themes/indigo/source/images/csh-angular.png","hash":"0b1e6211235b7f9cbf49e7bb7999db7810734f0b","modified":1541145787559},{"_id":"themes/indigo/source/images/git-cmd.png","hash":"91503f7dae3e2040b388fa8b306103c7dc6c05d6","modified":1539942448808},{"_id":"themes/indigo/source/images/git-config.png","hash":"5d9bebacbddf0ae4fd840c6ef69436cd30c1e7c9","modified":1541154309202},{"_id":"themes/indigo/source/images/git-key.png","hash":"83b3606314ca81bc152554203841367df4acdef5","modified":1541154309204},{"_id":"themes/indigo/source/images/git-validate.png","hash":"a6fd175d5f4cf68794dbe6f7bb08b9d9f4dc9be5","modified":1539942249383},{"_id":"themes/indigo/source/images/github-join.png","hash":"afab91d94589f95c880d6587366aa8cd92dce7d1","modified":1539943440217},{"_id":"themes/indigo/source/images/github-new.png","hash":"577bc0e0bb3f005ac193d1dbcd8a3070852090a8","modified":1541154309209},{"_id":"themes/indigo/source/images/github-newssh-2.png","hash":"91bd3c5d9804c5426733a46d144ab46afc4a1894","modified":1541154309213},{"_id":"themes/indigo/source/images/hexo-config1.png","hash":"3f372b97334472dfd6ea889fc6cae6879cf2c8c2","modified":1541154309219},{"_id":"themes/indigo/source/images/hexo-deploy.png","hash":"1e4d1833824e6db3c4a024cb55a8ee60b88a003b","modified":1541154309221},{"_id":"themes/indigo/source/images/hexo-init.png","hash":"350662dbc200179a5c1e40d9d377228c7bff2135","modified":1540548045084},{"_id":"themes/indigo/source/images/hexo-version.png","hash":"984c16e80dcbc090d30a54ef1a2722014cf60b04","modified":1539942862485},{"_id":"themes/indigo/source/images/ng-help.png","hash":"f769fcc32f5eb38dd507784c75a06b94776c3b6d","modified":1541149164476},{"_id":"themes/indigo/source/images/ng-zorro-ant.png","hash":"041f8e545a911dab9433478a42a15bcf8bb1c56c","modified":1541149777033},{"_id":"themes/indigo/source/images/node-down.png","hash":"08d4c3a0002764a652cdf3a91c82c50fabc272c0","modified":1539940298212},{"_id":"themes/indigo/source/images/node-msi.png","hash":"aec8c25aaeb8720cb5aa01e4f1e0cb25c93f6421","modified":1539940562262},{"_id":"themes/indigo/source/images/node-validate.png","hash":"71d7dba122986cb8f0d5115b958e2c403f1d9a9e","modified":1539940980684},{"_id":"themes/indigo/source/images/polyfill.png","hash":"f6e83891d56d83466228e826501131b5f013ab3c","modified":1541383855114},{"_id":"themes/indigo/source/images/theme-name.png","hash":"57d6162d8f19f6237430dc5cbd5b8323e8acd65b","modified":1541154309224},{"_id":"themes/indigo/source/images/update-1.png","hash":"26ac0b6743f13342130dd7ed70927e7f430d5758","modified":1540549071236},{"_id":"themes/indigo/source/images/update-2.png","hash":"c99480d351122eda6ea186bb5df3db29155a37ea","modified":1540549160039},{"_id":"themes/indigo/source/images/update-3.png","hash":"42985e8321f83aab1576b1877be522c2d5fe5097","modified":1540549223086},{"_id":"themes/indigo/source/images/update-4.png","hash":"ae01332fe496635212b56b3b0b276de8e52e4b31","modified":1541154309225},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"a4ec9b3ce11a3c16e415e766ffc02fac7824e54e","modified":1539945788216},{"_id":"themes/indigo/source/img/avatar.jpg","hash":"ba218884cdf3e07137c0c75f27833ce85517538d","modified":1528853363126},{"_id":"themes/indigo/source/img/brand.jpg","hash":"7de5ff5e0774d22c0aa3984bf7e99c0cea287e9e","modified":1539931615472},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1539929660659},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1539929660659},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1539929660660},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"a4ec9b3ce11a3c16e415e766ffc02fac7824e54e","modified":1539945788216},{"_id":"themes/indigo/source/js/main.js","hash":"ff44bb7b2f1f08757093fd6ffa92c9ac2b674109","modified":1539929660662},{"_id":"themes/indigo/source/js/main.min.js","hash":"e77a89fe5a9827ac590a288778176b233dd900ad","modified":1539929660663},{"_id":"themes/indigo/source/js/search.js","hash":"a4d6c9c566ec1ca71ddacfd14c58f7ddaf9db24d","modified":1539929660663},{"_id":"themes/indigo/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1539929660664},{"_id":"themes/indigo/source/images/github-newssh-1.png","hash":"b2beb89b87b1b6a483832068e6e3be3d11bcadc5","modified":1541154309212},{"_id":"themes/indigo/source/images/hexo-g-d.png","hash":"613adb80c51be6a8541fb72b8a69696d2bf0bfeb","modified":1541154309223},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"da1355eea131952031e54c45560555e6d3aa5a33","modified":1539929660563},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"86fe837ab16cb60754b0a73bb9efa38b04f3023f","modified":1539929660564},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"57cd7b637aa70c6e049b7391c4112874f224c724","modified":1539931077707},{"_id":"themes/indigo/layout/_partial/plugins/gitalk.ejs","hash":"062ac7e18b1fab22156e90854e529bc80ddb2b75","modified":1543284513184},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"5f6ceb7f4b9b579e8e3f87894447f556a53f9385","modified":1539929660565},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"b5b87761751a897949e085a8f1ace78b0b8babd5","modified":1539929660566},{"_id":"themes/indigo/layout/_partial/plugins/hyper-comments.ejs","hash":"d0e6f1d713e7a1c0cc5fe25f3e574a4b791f938a","modified":1539929660567},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"3a5c9f7d22d30cd8ffa4e83a8d3976db22815994","modified":1539929660568},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"bb9deb32c54ea6820f622b923e62592915e9f21f","modified":1539929660569},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"a2c247c2e32016563dd6a22c21474072d93f4dbd","modified":1539929660570},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"ef9c77d8c6e004b014c83c5f9333e7174f8bafa3","modified":1539929660571},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"ddf290e90dc1c779f42a48e1bd852ca932148dfb","modified":1539929660571},{"_id":"themes/indigo/layout/_partial/plugins/valine.ejs","hash":"0a6245da90d54177441d32a6f1766b4f434660db","modified":1539929660572},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c08e44cbd7315dec7afb6054b04d3c7b82c3bde8","modified":1539929660574},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"2b398d36d3823d0049fc8d9e137b48d27c8179f6","modified":1543284473778},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"dd1dcc7776021ab3d68065f8532efead4c2b8051","modified":1539929660575},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"c5adcec8db1506c378d39855a697e1bb1165646c","modified":1539929660576},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"f137c126672769e9571be2bb0a70ea8dda644b0e","modified":1539929660577},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"03719097851575a2c1bb95774058b224f6402a1f","modified":1539929660577},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"bde8f9cfa9032f55e5ce7dbcb39b76bd1952c8bb","modified":1540176553746},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"097c0276a61665e5ee96e5d5d85a7d6ae5ab2f49","modified":1539929660579},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"2ec7de870988cfbc8ea9872cddf7e4076ac64a57","modified":1539929660580},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"7d79a67b3e5e6989f22fb0e0904fa540bfca5fcc","modified":1539929660581},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"412894001b1ac6e63012b26b1109a0856651c076","modified":1539929660582},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"eaad7af7888bddd7095243a43ff38f55ad8c494a","modified":1539929660582},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"d534b888d24df7703c632539d4bdd638fa764e98","modified":1539929660583},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"00fedf7971c0bda0623d968bc0614e512d19a985","modified":1539929660584},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"382fc22cd5cc073e881768a65600d97eba9f1d21","modified":1539929660597},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"f047c8ca92f9e6a8e1299ace0cce91514631a21c","modified":1539929660597},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"bad63006b3bd4849bf53ad38482af0d9971061d3","modified":1539929660600},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"880b4a28e97d556ed15b07642d25115f9b6ba4f6","modified":1539929660601},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"99e48793dc0b4ffb66ecaf2d1315145872f9bb98","modified":1539929660602},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"5f783f34bf093e654e8922ed4a2af8b7b2cd41c4","modified":1539932005291},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"38419aaf3c1832e84ade331f051f110fdc8b960f","modified":1539929660603},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"85157ddf3877b5c58e8f1d737dda3dfb1bfd540b","modified":1539929660604},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"33b0a5edcedc26a4c592c812c5785bb20d3c93db","modified":1539929660605},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"516cded3c7f1db4cacfa898bcaf0adfae7f3a2e1","modified":1539929660606},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"f5e89ea5414e3096a28c8c96e86c3f669040a892","modified":1539938116807},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1539929660607},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"dbc23e77e586ee682a21475f5eb568628ea6720f","modified":1539929660608},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"a683c96a59470efd35722b763c55149a46e35156","modified":1539929660609},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"01eb7f84193180928a6ed4796ee8802f6c1628e7","modified":1539929660609},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"7a4a4af0c4255e4e315683a59c4d5e2adbb49d06","modified":1542877836934},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"a02eaa601887f947257f6016679b62dc96a61c0c","modified":1539929660611},{"_id":"themes/indigo/source/css/_plugin/valine.less","hash":"b8f8d8037fb3c8525da12e580bd9e2ff9f298132","modified":1539929660612},{"_id":"themes/indigo/source/images/git-down.png","hash":"4c0afd3e13ef28ba7d7657555f18d8cab4db2c41","modified":1539941505760},{"_id":"themes/indigo/source/images/github-csh.png","hash":"2660f802d04475f4fb33f7aa1e9f9b8f8c572750","modified":1541154309207},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"a3ecbd6ccf5b56ac39df710c34a149b82989a498","modified":1539929660599},{"_id":"themes/indigo/source/images/github-themes.png","hash":"db91e6e66c65cd23b719a28b25100c29177196c1","modified":1541154309216},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1539929660629},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1539929660632},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1539929660633},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1539929660634},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1539929660638},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1539929660639},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1539929660639},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1539929660642},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1539929660643},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1539929660644},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1539929660647},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1539929660648},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1539929660649},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1539929660653},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1539929660654},{"_id":"themes/indigo/source/images/hexo-index.png","hash":"5291316ac56c3997f33808f53341822aab6f32d1","modified":1540548150426},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1539929660627},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1539929660628},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1539929660631},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1539929660636},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1539929660641},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1539929660646},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1539929660652},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1539929660614},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1539929660617},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1539929660625},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1539929660622},{"_id":"public/content.json","hash":"fe71c5ce102c1a8df26ce0925ed8111028959964","modified":1543301411250},{"_id":"public/atom.xml","hash":"501b67bed5b612818607deeb040eb75ac2e072bc","modified":1543301411401},{"_id":"public/categories/index.html","hash":"51ccd9c94c0716a18facd9c241ca3065981ee8eb","modified":1543301411431},{"_id":"public/archives/index.html","hash":"9c3fff0ea10ef7b2ddb10e11ed7f21d1caba3a7c","modified":1543301411431},{"_id":"public/archives/2018/index.html","hash":"da0dc006b945fee958276afffead4b7f249864c4","modified":1543301411431},{"_id":"public/archives/2018/11/index.html","hash":"a8441e30e9bd88feee0610cfadd6610e5faf1fee","modified":1543301411431},{"_id":"public/categories/Angular/index.html","hash":"06dca9a38eddf9490fb9e298c335f00846e8e4d3","modified":1543301411431},{"_id":"public/categories/个人网页/index.html","hash":"7ee49a3f4404ee00db2a2e7597a1923c76f53797","modified":1543301411431},{"_id":"public/tags/Angular安装/index.html","hash":"4493100a59e906363b5bc33195b19d9f7fb0a18b","modified":1543301411431},{"_id":"public/tags/Angular/index.html","hash":"fa11a3ca72d277ded4ca9910dd4c23c8ad825d96","modified":1543301411431},{"_id":"public/tags/Angular组件通讯/index.html","hash":"0631f347ef8bc78931ee8f2d8d271fada8a86cbc","modified":1543301411432},{"_id":"public/tags/Angular生命周期钩子/index.html","hash":"9a19139e8337dc48334eb5dba5c2a21476032b29","modified":1543301411432},{"_id":"public/tags/hexo/index.html","hash":"9240b2b2b7dd4f54d0317de4a62ccf251c877718","modified":1543301411432},{"_id":"public/tags/git/index.html","hash":"ccf35380ec3550aa5edad1955e3b3f008362fc9b","modified":1543301411432},{"_id":"public/tags/github/index.html","hash":"b8f9fc7d8ab598359ab52f5c2e6d3665eb8879cb","modified":1543301411432},{"_id":"public/tags/node-js/index.html","hash":"5147cb46431dae8c7c97a18bece2f87d290f52ea","modified":1543301411432},{"_id":"public/tags/index.html","hash":"ff2505bf7146ef59cd19eaf0beecd1cbf0b7405d","modified":1543301411434},{"_id":"public/2018/11/23/angular/learn-3/index.html","hash":"f7c5ec27215280f36c448bcc67d3842296262b25","modified":1543301411434},{"_id":"public/2018/11/09/angular/learn-2/index.html","hash":"6a7dfb97f9de5a105a0b9e2d103d7c91af03a743","modified":1543301411434},{"_id":"public/2018/11/02/angular/learn-1/index.html","hash":"ffaba77395506a4947dfb775494a48614f278062","modified":1543301411434},{"_id":"public/2018/11/02/web/person-web-2/index.html","hash":"fd95ed572989b2f90b0af9c111b3b041e927d64d","modified":1543301411434},{"_id":"public/2018/11/02/web/person-web-1/index.html","hash":"375729cf97625a8b5dd590049ed1b85ad5294758","modified":1543301411434},{"_id":"public/index.html","hash":"3cdcf0dc9a2c6010fe223a76f780477d94b2af3f","modified":1543301411434},{"_id":"public/favicon.ico","hash":"9496ebbfd93eb286080422e150f53db8d2b6c962","modified":1543301411457},{"_id":"public/images/angular-cl.png","hash":"eacd89681ae3b6443cfb2b5b5d7dfdc2a4a40428","modified":1543301411457},{"_id":"public/images/angular-file.png","hash":"b2e4e144cfef8c21d9b47eeeed3c9eaf8cc5e078","modified":1543301411457},{"_id":"public/images/angular-gouzi.png","hash":"4932238ec384df3fcc0c80bd282ea2c2bd32057e","modified":1543301411457},{"_id":"public/images/angular-service.png","hash":"7cb2f1b81330e5510db4f45e4dc24043302b762a","modified":1543301411458},{"_id":"public/images/angular-ngVInitError.png","hash":"3fab1b1a1d4f22aed06283094a801e6486baaf91","modified":1543301411458},{"_id":"public/images/angular-session.png","hash":"51a8e9b8acdf9f9fb6f42be471c1c596784c1abb","modified":1543301411458},{"_id":"public/images/angular-verison.png","hash":"7dbb17506644db6382e3fe06ac03a62563451667","modified":1543301411458},{"_id":"public/images/com-tree.png","hash":"b0b81edc0e40a4bc4e5e5402d8316b0984ae90b5","modified":1543301411459},{"_id":"public/images/csh-angular.png","hash":"0b1e6211235b7f9cbf49e7bb7999db7810734f0b","modified":1543301411459},{"_id":"public/images/git-cmd.png","hash":"91503f7dae3e2040b388fa8b306103c7dc6c05d6","modified":1543301411459},{"_id":"public/images/git-key.png","hash":"83b3606314ca81bc152554203841367df4acdef5","modified":1543301411459},{"_id":"public/images/git-validate.png","hash":"a6fd175d5f4cf68794dbe6f7bb08b9d9f4dc9be5","modified":1543301411459},{"_id":"public/images/github-join.png","hash":"afab91d94589f95c880d6587366aa8cd92dce7d1","modified":1543301411459},{"_id":"public/images/git-config.png","hash":"5d9bebacbddf0ae4fd840c6ef69436cd30c1e7c9","modified":1543301411459},{"_id":"public/images/github-new.png","hash":"577bc0e0bb3f005ac193d1dbcd8a3070852090a8","modified":1543301411459},{"_id":"public/images/github-newssh-2.png","hash":"91bd3c5d9804c5426733a46d144ab46afc4a1894","modified":1543301411459},{"_id":"public/images/hexo-config1.png","hash":"3f372b97334472dfd6ea889fc6cae6879cf2c8c2","modified":1543301411459},{"_id":"public/images/hexo-init.png","hash":"350662dbc200179a5c1e40d9d377228c7bff2135","modified":1543301411460},{"_id":"public/images/hexo-version.png","hash":"984c16e80dcbc090d30a54ef1a2722014cf60b04","modified":1543301411460},{"_id":"public/images/hexo-deploy.png","hash":"1e4d1833824e6db3c4a024cb55a8ee60b88a003b","modified":1543301411460},{"_id":"public/images/ng-help.png","hash":"f769fcc32f5eb38dd507784c75a06b94776c3b6d","modified":1543301411460},{"_id":"public/images/ng-zorro-ant.png","hash":"041f8e545a911dab9433478a42a15bcf8bb1c56c","modified":1543301411460},{"_id":"public/images/node-down.png","hash":"08d4c3a0002764a652cdf3a91c82c50fabc272c0","modified":1543301411460},{"_id":"public/images/node-msi.png","hash":"aec8c25aaeb8720cb5aa01e4f1e0cb25c93f6421","modified":1543301411460},{"_id":"public/images/polyfill.png","hash":"f6e83891d56d83466228e826501131b5f013ab3c","modified":1543301411460},{"_id":"public/images/theme-name.png","hash":"57d6162d8f19f6237430dc5cbd5b8323e8acd65b","modified":1543301411460},{"_id":"public/images/node-validate.png","hash":"71d7dba122986cb8f0d5115b958e2c403f1d9a9e","modified":1543301411461},{"_id":"public/images/update-2.png","hash":"c99480d351122eda6ea186bb5df3db29155a37ea","modified":1543301411461},{"_id":"public/img/alipay.jpg","hash":"a4ec9b3ce11a3c16e415e766ffc02fac7824e54e","modified":1543301411461},{"_id":"public/img/avatar.jpg","hash":"ba218884cdf3e07137c0c75f27833ce85517538d","modified":1543301411461},{"_id":"public/images/update-4.png","hash":"ae01332fe496635212b56b3b0b276de8e52e4b31","modified":1543301411461},{"_id":"public/img/brand.jpg","hash":"7de5ff5e0774d22c0aa3984bf7e99c0cea287e9e","modified":1543301411461},{"_id":"public/images/update-3.png","hash":"42985e8321f83aab1576b1877be522c2d5fe5097","modified":1543301411461},{"_id":"public/images/update-1.png","hash":"26ac0b6743f13342130dd7ed70927e7f430d5758","modified":1543301411461},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1543301411461},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1543301411461},{"_id":"public/img/wechat.jpg","hash":"a4ec9b3ce11a3c16e415e766ffc02fac7824e54e","modified":1543301411461},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1543301411461},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1543301411461},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1543301411461},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1543301411462},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1543301411462},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1543301411462},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1543301411462},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1543301411462},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1543301411462},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1543301411462},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1543301411462},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1543301411462},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1543301411462},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1543301411463},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1543301411463},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1543301411463},{"_id":"public/images/github-newssh-1.png","hash":"b2beb89b87b1b6a483832068e6e3be3d11bcadc5","modified":1543301411493},{"_id":"public/images/hexo-g-d.png","hash":"613adb80c51be6a8541fb72b8a69696d2bf0bfeb","modified":1543301411493},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1543301411493},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1543301411493},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1543301411493},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1543301411494},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1543301411494},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1543301411494},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1543301411494},{"_id":"public/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1543301411502},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1543301411502},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1543301411502},{"_id":"public/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1543301411502},{"_id":"public/images/git-down.png","hash":"4c0afd3e13ef28ba7d7657555f18d8cab4db2c41","modified":1543301411503},{"_id":"public/images/github-csh.png","hash":"2660f802d04475f4fb33f7aa1e9f9b8f8c572750","modified":1543301411503},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1543301411503},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1543301411503},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1543301411503},{"_id":"public/images/github-themes.png","hash":"db91e6e66c65cd23b719a28b25100c29177196c1","modified":1543301411510},{"_id":"public/images/hexo-index.png","hash":"5291316ac56c3997f33808f53341822aab6f32d1","modified":1543301411519},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1543301411531},{"_id":"public/css/style.css","hash":"79ec0bd202ca00c36a58cfd9838e49c46f9c8084","modified":1543301411831}],"Category":[{"name":"Angular","_id":"cjozdt9mu0004bgvceriais9c"},{"name":"个人网页","_id":"cjozdt9n2000ebgvcilsxer2v"}],"Data":[],"Page":[{"layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"layout: categories\ncomments: false\n---\n","date":"2018-10-19T06:11:53.798Z","updated":"2018-10-19T06:11:53.798Z","path":"categories/index.html","title":"","_id":"cjozdt9lg0000bgvcwc7595kj","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"layout: tags\ncomments: false\n---\n","date":"2018-10-19T05:55:12.126Z","updated":"2018-10-19T05:55:12.126Z","path":"tags/index.html","title":"","_id":"cjozdt9li0001bgvcp0loal3z","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Angular教程-1-新手入门","_content":"## 安装Angular6\n前提准备：电脑上已经存在 `node.js`（版本 为8.X或者10.X），因为使用 `Angular` 一般都需要它的 `angular/cli` 脚手架，需要使用 `ndoe.js` 的包管理器 `npm`。\n安装的 `Angular` 版本是 `Angular6`，进入电脑的 `cmd` 命令行环境下，运行如下命令\n```typescript\nnpm install -g @angular/cli\n```\n安装完毕后，在该环境下运行如下命令\n```typescript\nng -version\n```\n出现如下图所示，代表安装成功\n\n![](https://bingolil.github.io/images/angular-verison.png)\n\n## 新建项目\n在 `cmd` 命令行环境下，运行以下命令\n```typescript\nng new myApp\n```\n然后等待 `angular/cli` 脚手架自动新建一个 `myApp` 的项目，然后 `cd myApp` 目录下，运行以下命令\n```typescript\nng server --open //open是参数，即运行成功后自动打开\n                 //浏览器，并进入本地4200端口界面\n```\n在浏览器的本地4200端口出现如下图所示。\n\n![](https://bingolil.github.io/images/csh-angular.png)\n## Angular6项目文件\n`Angular` 新建项目的目录结构如下所示\n\n![](https://bingolil.github.io/images/angular-file.png)\n### angular.json\n在 `Angular6` 以前，该文件名为.angular.json，`Angular6` 改成了angular.json，少了一个小数点，这个文件是脚手架的核心配置文件。\n```typescript\n\"projects\": {\n    \"myApp\": {\n      \"root\": \"\", //项目的根\n      \"sourceRoot\": \"src\", //项目的源码地址，即项目源码都在src文件夹下\n      \"projectType\": \"application\",\n      \"prefix\": \"app\", //前缀，新建组件时，其选择器为 'app-组件名'\n      \"schematics\": {},\n      \"architect\": {\n        \"build\": { //项目打包部分\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/myApp\", //打包后的项目地址\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": \"src/polyfills.ts\", //项目的腻子文件\n            \"tsConfig\": \"src/tsconfig.app.json\",\n            \"assets\": [ //项目在资源地址\n              \"src/favicon.ico\",\n              \"src/assets\"\n            ],\n            \"styles\": [ //项目引入的css文件\n              \"src/styles.css\"\n            ],\n            \"scripts\": [] //项目引入的js文件\n          }\n```\n### package.json\n在项目下面存在 `pack.json` 文件，该 `json` 文件存放了项目的信息\n\n```typescript\n\"name\": \"my-app\", //项目名称\n  \"version\": \"0.0.0\", //项目版本\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\", //项目运行命令\n    \"build\": \"ng build\", //项目打包命令\n    \"test\": \"ng test\", //项目测试命令\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\" //项目端到端测试命令\n```\n\n### src/main.ts\n这个文件记录了项目从哪个模块开始运行\n```typescript\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n```\n\n### src/polyfill.ts\n\n这个文件叫做腻子脚本，`Angular` 是默认对 `ie浏览器` 是不支持的，即新建项目后，在 `ie浏览器` 的本地4200端口页面是一片空白，将以下的注释取消，在ie浏览器中可以看到页面。\n**将项目的默认注释取消后，其对ie浏览器的支持也不是特别好，[Angualr官网](https://angular.io/)在ie11中有的页面页打不开**\n![](https://bingolil.github.io/images/polyfill.png)\n\n### src/index.html\n\n该文件记录了页面是从开始模块 (`AppModule`) 中声明的哪一个组件开始\n```HTML\n    <html lang=\"en\">\n        <head>\n            <meta charset=\"utf-8\">\n            <title>MyApp</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n             <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n        </head>\n        <body>\n            <app-root></app-root> //从AppModule的app-root组件开始展示页面\n        </body>\n    </html>\n```\n\n### src/app/app.module.ts\n这个文件是项目默认的根模块\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent] //bootstrap代表从哪个组件开始编译\n})\nexport class AppModule { }\n```\n在 `src/main.ts` 中引入的启动模块就这个模块，所以这个模块也叫做项目的根模块，在这个模块中，默认定义了一个根组件，即 `AppComponent`，这个组件定义的选择器是  `app-root`，这个选择器在 `src/index.html` 中被使用，即这个组件也叫做根组件。\n**以上文件为angular项目的主要的重要文件**\n## Angular6命令大全\n`Angular` 为开发者者提供了诸多帮助，在 `cmd` 环境下，使用以下命令\n```\nng --help\n```\n其命令如下图所示\n![](https://bingolil.github.io/images/ng-help.png)\n### ng add\n`ng add` 是 `Angular6` 中新出现的命令，该命令使得向项目中添加新功能更加的方便。\n例如，在项目根目录下运行如下命令添加**ng-zorro**\n```\nng add ng-zorro-antd\n```\n命令运行完成后，使用ng serve运行项目，浏览器打开本地4200端口，出现下图。\n\n![](https://bingolil.github.io/images/ng-zorro-ant.png)\n这代表在这个项目中可以使用[ng-zorro官网](https://ng.ant.design/docs/introduce/zh)的组件\n\n### ng new\n该命令是创建一个新的 `Angular` 项目，使用如下命令，可以创建一个新项目\n```\nng new myApp //创建一个项目名为myApp的angular项目\nng new myApp --routing //这个命令同上，不同之处这个命令会在项目中\n      //自动生成代表项目路由的文件 app-routing.module.ts\n```\n### ng generate\n这个命令是 `Angular` 项目中最主要的命令之一，新建组件，服务，指令，模块都可以在项目的根目录下使用这个命令进行创建。\n\n| 默认创建名为home      | 完整写法   |    最简写法  |\n| --------   | -----  | ----  |\n| 组件| ng generate componetent home |  ng g c home    |\n| 服务| ng generate service home| ng g s home |\n| 指令| ng generate directive home |  ng g d home  |\n| 管道 | ng generate pipe home |  ng g p home  |\n| 类  | ng generate class home |  ng g cl home  |\n| 接口 | ng generate interface home |  ng g i home  |\n| 模块| ng generate module home |  ng g m home  |\n\n**注意：**\n1，`Angular` 以前的服务使用的依赖注入，在 `Angular6` 版本中，服务采用的相依注入\n2，创建组件 `component` 和类 `class` 都是 `c` 开头，所以使用最简写法有一定区别，如下所示，创建组件使用的是 `ng g c`，创建类时使用的是 `ng g cl`。\n```\nng g c 组件名 //创建组件时使用的是c\nng g cl 类名 //创建类时使用的是cl\n```\n### ng build\n`Angular` 项目采用的语言是 `typescript` 语法，由微软开发，该语法不直接在浏览器中运行，需要将 `ts(typescript)` 转换为 `js` 语法才可以运行，`ng build` 命令就是对 `Angular` 项目进行打包，生成静态的文件。\n### 其它命令\n`Angular` 还有其它的一些命令\n\n| 命令 | 意义   | \n| --------   | -----  |\n| ng serve| 运行项目，存在--open参数时自动打开浏览器 | \n| ng eject| 提取项目的webpack.config.json文件，一旦提取就不能还原|\n| ng libary 库名| 用户创建库 | \n| ng help | 查找帮助  |\n| ng version  |查看版本  |\n| ng update |项目的依赖有重大改变时，自动更新代码  |\n| ng project 项目名| 已移除，在本项目下新建一个项目 |\n","source":"_posts/angular/learn-1.md","raw":"title: Angular教程-1-新手入门\ncategories: Angular\ntags: [Angular安装,Angular]\n---\n## 安装Angular6\n前提准备：电脑上已经存在 `node.js`（版本 为8.X或者10.X），因为使用 `Angular` 一般都需要它的 `angular/cli` 脚手架，需要使用 `ndoe.js` 的包管理器 `npm`。\n安装的 `Angular` 版本是 `Angular6`，进入电脑的 `cmd` 命令行环境下，运行如下命令\n```typescript\nnpm install -g @angular/cli\n```\n安装完毕后，在该环境下运行如下命令\n```typescript\nng -version\n```\n出现如下图所示，代表安装成功\n\n![](https://bingolil.github.io/images/angular-verison.png)\n\n## 新建项目\n在 `cmd` 命令行环境下，运行以下命令\n```typescript\nng new myApp\n```\n然后等待 `angular/cli` 脚手架自动新建一个 `myApp` 的项目，然后 `cd myApp` 目录下，运行以下命令\n```typescript\nng server --open //open是参数，即运行成功后自动打开\n                 //浏览器，并进入本地4200端口界面\n```\n在浏览器的本地4200端口出现如下图所示。\n\n![](https://bingolil.github.io/images/csh-angular.png)\n## Angular6项目文件\n`Angular` 新建项目的目录结构如下所示\n\n![](https://bingolil.github.io/images/angular-file.png)\n### angular.json\n在 `Angular6` 以前，该文件名为.angular.json，`Angular6` 改成了angular.json，少了一个小数点，这个文件是脚手架的核心配置文件。\n```typescript\n\"projects\": {\n    \"myApp\": {\n      \"root\": \"\", //项目的根\n      \"sourceRoot\": \"src\", //项目的源码地址，即项目源码都在src文件夹下\n      \"projectType\": \"application\",\n      \"prefix\": \"app\", //前缀，新建组件时，其选择器为 'app-组件名'\n      \"schematics\": {},\n      \"architect\": {\n        \"build\": { //项目打包部分\n          \"builder\": \"@angular-devkit/build-angular:browser\",\n          \"options\": {\n            \"outputPath\": \"dist/myApp\", //打包后的项目地址\n            \"index\": \"src/index.html\",\n            \"main\": \"src/main.ts\",\n            \"polyfills\": \"src/polyfills.ts\", //项目的腻子文件\n            \"tsConfig\": \"src/tsconfig.app.json\",\n            \"assets\": [ //项目在资源地址\n              \"src/favicon.ico\",\n              \"src/assets\"\n            ],\n            \"styles\": [ //项目引入的css文件\n              \"src/styles.css\"\n            ],\n            \"scripts\": [] //项目引入的js文件\n          }\n```\n### package.json\n在项目下面存在 `pack.json` 文件，该 `json` 文件存放了项目的信息\n\n```typescript\n\"name\": \"my-app\", //项目名称\n  \"version\": \"0.0.0\", //项目版本\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\", //项目运行命令\n    \"build\": \"ng build\", //项目打包命令\n    \"test\": \"ng test\", //项目测试命令\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\" //项目端到端测试命令\n```\n\n### src/main.ts\n这个文件记录了项目从哪个模块开始运行\n```typescript\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n```\n\n### src/polyfill.ts\n\n这个文件叫做腻子脚本，`Angular` 是默认对 `ie浏览器` 是不支持的，即新建项目后，在 `ie浏览器` 的本地4200端口页面是一片空白，将以下的注释取消，在ie浏览器中可以看到页面。\n**将项目的默认注释取消后，其对ie浏览器的支持也不是特别好，[Angualr官网](https://angular.io/)在ie11中有的页面页打不开**\n![](https://bingolil.github.io/images/polyfill.png)\n\n### src/index.html\n\n该文件记录了页面是从开始模块 (`AppModule`) 中声明的哪一个组件开始\n```HTML\n    <html lang=\"en\">\n        <head>\n            <meta charset=\"utf-8\">\n            <title>MyApp</title>\n            <base href=\"/\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n             <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n        </head>\n        <body>\n            <app-root></app-root> //从AppModule的app-root组件开始展示页面\n        </body>\n    </html>\n```\n\n### src/app/app.module.ts\n这个文件是项目默认的根模块\n\n```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent] //bootstrap代表从哪个组件开始编译\n})\nexport class AppModule { }\n```\n在 `src/main.ts` 中引入的启动模块就这个模块，所以这个模块也叫做项目的根模块，在这个模块中，默认定义了一个根组件，即 `AppComponent`，这个组件定义的选择器是  `app-root`，这个选择器在 `src/index.html` 中被使用，即这个组件也叫做根组件。\n**以上文件为angular项目的主要的重要文件**\n## Angular6命令大全\n`Angular` 为开发者者提供了诸多帮助，在 `cmd` 环境下，使用以下命令\n```\nng --help\n```\n其命令如下图所示\n![](https://bingolil.github.io/images/ng-help.png)\n### ng add\n`ng add` 是 `Angular6` 中新出现的命令，该命令使得向项目中添加新功能更加的方便。\n例如，在项目根目录下运行如下命令添加**ng-zorro**\n```\nng add ng-zorro-antd\n```\n命令运行完成后，使用ng serve运行项目，浏览器打开本地4200端口，出现下图。\n\n![](https://bingolil.github.io/images/ng-zorro-ant.png)\n这代表在这个项目中可以使用[ng-zorro官网](https://ng.ant.design/docs/introduce/zh)的组件\n\n### ng new\n该命令是创建一个新的 `Angular` 项目，使用如下命令，可以创建一个新项目\n```\nng new myApp //创建一个项目名为myApp的angular项目\nng new myApp --routing //这个命令同上，不同之处这个命令会在项目中\n      //自动生成代表项目路由的文件 app-routing.module.ts\n```\n### ng generate\n这个命令是 `Angular` 项目中最主要的命令之一，新建组件，服务，指令，模块都可以在项目的根目录下使用这个命令进行创建。\n\n| 默认创建名为home      | 完整写法   |    最简写法  |\n| --------   | -----  | ----  |\n| 组件| ng generate componetent home |  ng g c home    |\n| 服务| ng generate service home| ng g s home |\n| 指令| ng generate directive home |  ng g d home  |\n| 管道 | ng generate pipe home |  ng g p home  |\n| 类  | ng generate class home |  ng g cl home  |\n| 接口 | ng generate interface home |  ng g i home  |\n| 模块| ng generate module home |  ng g m home  |\n\n**注意：**\n1，`Angular` 以前的服务使用的依赖注入，在 `Angular6` 版本中，服务采用的相依注入\n2，创建组件 `component` 和类 `class` 都是 `c` 开头，所以使用最简写法有一定区别，如下所示，创建组件使用的是 `ng g c`，创建类时使用的是 `ng g cl`。\n```\nng g c 组件名 //创建组件时使用的是c\nng g cl 类名 //创建类时使用的是cl\n```\n### ng build\n`Angular` 项目采用的语言是 `typescript` 语法，由微软开发，该语法不直接在浏览器中运行，需要将 `ts(typescript)` 转换为 `js` 语法才可以运行，`ng build` 命令就是对 `Angular` 项目进行打包，生成静态的文件。\n### 其它命令\n`Angular` 还有其它的一些命令\n\n| 命令 | 意义   | \n| --------   | -----  |\n| ng serve| 运行项目，存在--open参数时自动打开浏览器 | \n| ng eject| 提取项目的webpack.config.json文件，一旦提取就不能还原|\n| ng libary 库名| 用户创建库 | \n| ng help | 查找帮助  |\n| ng version  |查看版本  |\n| ng update |项目的依赖有重大改变时，自动更新代码  |\n| ng project 项目名| 已移除，在本项目下新建一个项目 |\n","slug":"angular/learn-1","published":1,"date":"2018-11-02T10:25:36.422Z","updated":"2018-11-23T08:30:17.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjozdt9mn0002bgvch06pag30","content":"<h2 id=\"安装Angular6\"><a href=\"#安装Angular6\" class=\"headerlink\" title=\"安装Angular6\"></a>安装Angular6</h2><p>前提准备：电脑上已经存在 <code>node.js</code>（版本 为8.X或者10.X），因为使用 <code>Angular</code> 一般都需要它的 <code>angular/cli</code> 脚手架，需要使用 <code>ndoe.js</code> 的包管理器 <code>npm</code>。<br>安装的 <code>Angular</code> 版本是 <code>Angular6</code>，进入电脑的 <code>cmd</code> 命令行环境下，运行如下命令<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g <span class=\"meta\">@angular</span>/cli</span><br></pre></td></tr></table></figure></p>\n<p>安装完毕后，在该环境下运行如下命令<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng -version</span><br></pre></td></tr></table></figure></p>\n<p>出现如下图所示，代表安装成功</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/angular-verison.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><p>在 <code>cmd</code> 命令行环境下，运行以下命令<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng <span class=\"keyword\">new</span> myApp</span><br></pre></td></tr></table></figure></p>\n<p>然后等待 <code>angular/cli</code> 脚手架自动新建一个 <code>myApp</code> 的项目，然后 <code>cd myApp</code> 目录下，运行以下命令<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng server --open <span class=\"comment\">//open是参数，即运行成功后自动打开</span></span><br><span class=\"line\">                 <span class=\"comment\">//浏览器，并进入本地4200端口界面</span></span><br></pre></td></tr></table></figure></p>\n<p>在浏览器的本地4200端口出现如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/csh-angular.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"Angular6项目文件\"><a href=\"#Angular6项目文件\" class=\"headerlink\" title=\"Angular6项目文件\"></a>Angular6项目文件</h2><p><code>Angular</code> 新建项目的目录结构如下所示</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/angular-file.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"angular-json\"><a href=\"#angular-json\" class=\"headerlink\" title=\"angular.json\"></a>angular.json</h3><p>在 <code>Angular6</code> 以前，该文件名为.angular.json，<code>Angular6</code> 改成了angular.json，少了一个小数点，这个文件是脚手架的核心配置文件。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"projects\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"myApp\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"root\"</span>: <span class=\"string\">\"\"</span>, <span class=\"comment\">//项目的根</span></span><br><span class=\"line\">      <span class=\"string\">\"sourceRoot\"</span>: <span class=\"string\">\"src\"</span>, <span class=\"comment\">//项目的源码地址，即项目源码都在src文件夹下</span></span><br><span class=\"line\">      <span class=\"string\">\"projectType\"</span>: <span class=\"string\">\"application\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"prefix\"</span>: <span class=\"string\">\"app\"</span>, <span class=\"comment\">//前缀，新建组件时，其选择器为 'app-组件名'</span></span><br><span class=\"line\">      <span class=\"string\">\"schematics\"</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"string\">\"architect\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"build\"</span>: &#123; <span class=\"comment\">//项目打包部分</span></span><br><span class=\"line\">          <span class=\"string\">\"builder\"</span>: <span class=\"string\">\"@angular-devkit/build-angular:browser\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"options\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"outputPath\"</span>: <span class=\"string\">\"dist/myApp\"</span>, <span class=\"comment\">//打包后的项目地址</span></span><br><span class=\"line\">            <span class=\"string\">\"index\"</span>: <span class=\"string\">\"src/index.html\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"main\"</span>: <span class=\"string\">\"src/main.ts\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"polyfills\"</span>: <span class=\"string\">\"src/polyfills.ts\"</span>, <span class=\"comment\">//项目的腻子文件</span></span><br><span class=\"line\">            <span class=\"string\">\"tsConfig\"</span>: <span class=\"string\">\"src/tsconfig.app.json\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"assets\"</span>: [ <span class=\"comment\">//项目在资源地址</span></span><br><span class=\"line\">              <span class=\"string\">\"src/favicon.ico\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"src/assets\"</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">\"styles\"</span>: [ <span class=\"comment\">//项目引入的css文件</span></span><br><span class=\"line\">              <span class=\"string\">\"src/styles.css\"</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">\"scripts\"</span>: [] <span class=\"comment\">//项目引入的js文件</span></span><br><span class=\"line\">          &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><p>在项目下面存在 <code>pack.json</code> 文件，该 <code>json</code> 文件存放了项目的信息</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"name\"</span>: <span class=\"string\">\"my-app\"</span>, <span class=\"comment\">//项目名称</span></span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>, <span class=\"comment\">//项目版本</span></span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"ng\"</span>: <span class=\"string\">\"ng\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"ng serve\"</span>, <span class=\"comment\">//项目运行命令</span></span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"ng build\"</span>, <span class=\"comment\">//项目打包命令</span></span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"ng test\"</span>, <span class=\"comment\">//项目测试命令</span></span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"ng lint\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"e2e\"</span>: <span class=\"string\">\"ng e2e\"</span> <span class=\"comment\">//项目端到端测试命令</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"src-main-ts\"><a href=\"#src-main-ts\" class=\"headerlink\" title=\"src/main.ts\"></a>src/main.ts</h3><p>这个文件记录了项目从哪个模块开始运行<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; enableProdMode &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; platformBrowserDynamic &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser-dynamic'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app/app.module'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; environment &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./environments/environment'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (environment.production) &#123;</span><br><span class=\"line\">  enableProdMode();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">platformBrowserDynamic().bootstrapModule(AppModule)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(err));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"src-polyfill-ts\"><a href=\"#src-polyfill-ts\" class=\"headerlink\" title=\"src/polyfill.ts\"></a>src/polyfill.ts</h3><p>这个文件叫做腻子脚本，<code>Angular</code> 是默认对 <code>ie浏览器</code> 是不支持的，即新建项目后，在 <code>ie浏览器</code> 的本地4200端口页面是一片空白，将以下的注释取消，在ie浏览器中可以看到页面。<br><strong>将项目的默认注释取消后，其对ie浏览器的支持也不是特别好，<a href=\"https://angular.io/\" target=\"_blank\" rel=\"noopener\">Angualr官网</a>在ie11中有的页面页打不开</strong><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/polyfill.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"src-index-html\"><a href=\"#src-index-html\" class=\"headerlink\" title=\"src/index.html\"></a>src/index.html</h3><p>该文件记录了页面是从开始模块 (<code>AppModule</code>) 中声明的哪一个组件开始<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>MyApp<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"favicon.ico\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">app-root</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-root</span>&gt;</span> //从AppModule的app-root组件开始展示页面</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"src-app-app-module-ts\"><a href=\"#src-app-app-module-ts\" class=\"headerlink\" title=\"src/app/app.module.ts\"></a>src/app/app.module.ts</h3><p>这个文件是项目默认的根模块</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [</span><br><span class=\"line\">    AppComponent</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    BrowserModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent] <span class=\"comment\">//bootstrap代表从哪个组件开始编译</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>src/main.ts</code> 中引入的启动模块就这个模块，所以这个模块也叫做项目的根模块，在这个模块中，默认定义了一个根组件，即 <code>AppComponent</code>，这个组件定义的选择器是  <code>app-root</code>，这个选择器在 <code>src/index.html</code> 中被使用，即这个组件也叫做根组件。<br><strong>以上文件为angular项目的主要的重要文件</strong></p>\n<h2 id=\"Angular6命令大全\"><a href=\"#Angular6命令大全\" class=\"headerlink\" title=\"Angular6命令大全\"></a>Angular6命令大全</h2><p><code>Angular</code> 为开发者者提供了诸多帮助，在 <code>cmd</code> 环境下，使用以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng --help</span><br></pre></td></tr></table></figure></p>\n<p>其命令如下图所示<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/ng-help.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"ng-add\"><a href=\"#ng-add\" class=\"headerlink\" title=\"ng add\"></a>ng add</h3><p><code>ng add</code> 是 <code>Angular6</code> 中新出现的命令，该命令使得向项目中添加新功能更加的方便。<br>例如，在项目根目录下运行如下命令添加<strong>ng-zorro</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add ng-zorro-antd</span><br></pre></td></tr></table></figure></p>\n<p>命令运行完成后，使用ng serve运行项目，浏览器打开本地4200端口，出现下图。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/ng-zorro-ant.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>这代表在这个项目中可以使用<a href=\"https://ng.ant.design/docs/introduce/zh\" target=\"_blank\" rel=\"noopener\">ng-zorro官网</a>的组件</p>\n<h3 id=\"ng-new\"><a href=\"#ng-new\" class=\"headerlink\" title=\"ng new\"></a>ng new</h3><p>该命令是创建一个新的 <code>Angular</code> 项目，使用如下命令，可以创建一个新项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new myApp //创建一个项目名为myApp的angular项目</span><br><span class=\"line\">ng new myApp --routing //这个命令同上，不同之处这个命令会在项目中</span><br><span class=\"line\">      //自动生成代表项目路由的文件 app-routing.module.ts</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ng-generate\"><a href=\"#ng-generate\" class=\"headerlink\" title=\"ng generate\"></a>ng generate</h3><p>这个命令是 <code>Angular</code> 项目中最主要的命令之一，新建组件，服务，指令，模块都可以在项目的根目录下使用这个命令进行创建。</p>\n<table>\n<thead>\n<tr>\n<th>默认创建名为home</th>\n<th>完整写法</th>\n<th>最简写法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>组件</td>\n<td>ng generate componetent home</td>\n<td>ng g c home</td>\n</tr>\n<tr>\n<td>服务</td>\n<td>ng generate service home</td>\n<td>ng g s home</td>\n</tr>\n<tr>\n<td>指令</td>\n<td>ng generate directive home</td>\n<td>ng g d home</td>\n</tr>\n<tr>\n<td>管道</td>\n<td>ng generate pipe home</td>\n<td>ng g p home</td>\n</tr>\n<tr>\n<td>类</td>\n<td>ng generate class home</td>\n<td>ng g cl home</td>\n</tr>\n<tr>\n<td>接口</td>\n<td>ng generate interface home</td>\n<td>ng g i home</td>\n</tr>\n<tr>\n<td>模块</td>\n<td>ng generate module home</td>\n<td>ng g m home</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：</strong><br>1，<code>Angular</code> 以前的服务使用的依赖注入，在 <code>Angular6</code> 版本中，服务采用的相依注入<br>2，创建组件 <code>component</code> 和类 <code>class</code> 都是 <code>c</code> 开头，所以使用最简写法有一定区别，如下所示，创建组件使用的是 <code>ng g c</code>，创建类时使用的是 <code>ng g cl</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c 组件名 //创建组件时使用的是c</span><br><span class=\"line\">ng g cl 类名 //创建类时使用的是cl</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ng-build\"><a href=\"#ng-build\" class=\"headerlink\" title=\"ng build\"></a>ng build</h3><p><code>Angular</code> 项目采用的语言是 <code>typescript</code> 语法，由微软开发，该语法不直接在浏览器中运行，需要将 <code>ts(typescript)</code> 转换为 <code>js</code> 语法才可以运行，<code>ng build</code> 命令就是对 <code>Angular</code> 项目进行打包，生成静态的文件。</p>\n<h3 id=\"其它命令\"><a href=\"#其它命令\" class=\"headerlink\" title=\"其它命令\"></a>其它命令</h3><p><code>Angular</code> 还有其它的一些命令</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ng serve</td>\n<td>运行项目，存在–open参数时自动打开浏览器</td>\n</tr>\n<tr>\n<td>ng eject</td>\n<td>提取项目的webpack.config.json文件，一旦提取就不能还原</td>\n</tr>\n<tr>\n<td>ng libary 库名</td>\n<td>用户创建库</td>\n</tr>\n<tr>\n<td>ng help</td>\n<td>查找帮助</td>\n</tr>\n<tr>\n<td>ng version</td>\n<td>查看版本</td>\n</tr>\n<tr>\n<td>ng update</td>\n<td>项目的依赖有重大改变时，自动更新代码</td>\n</tr>\n<tr>\n<td>ng project 项目名</td>\n<td>已移除，在本项目下新建一个项目</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装Angular6\"><a href=\"#安装Angular6\" class=\"headerlink\" title=\"安装Angular6\"></a>安装Angular6</h2><p>前提准备：电脑上已经存在 <code>node.js</code>（版本 为8.X或者10.X），因为使用 <code>Angular</code> 一般都需要它的 <code>angular/cli</code> 脚手架，需要使用 <code>ndoe.js</code> 的包管理器 <code>npm</code>。<br>安装的 <code>Angular</code> 版本是 <code>Angular6</code>，进入电脑的 <code>cmd</code> 命令行环境下，运行如下命令<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g <span class=\"meta\">@angular</span>/cli</span><br></pre></td></tr></table></figure></p>\n<p>安装完毕后，在该环境下运行如下命令<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng -version</span><br></pre></td></tr></table></figure></p>\n<p>出现如下图所示，代表安装成功</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/angular-verison.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><p>在 <code>cmd</code> 命令行环境下，运行以下命令<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng <span class=\"keyword\">new</span> myApp</span><br></pre></td></tr></table></figure></p>\n<p>然后等待 <code>angular/cli</code> 脚手架自动新建一个 <code>myApp</code> 的项目，然后 <code>cd myApp</code> 目录下，运行以下命令<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng server --open <span class=\"comment\">//open是参数，即运行成功后自动打开</span></span><br><span class=\"line\">                 <span class=\"comment\">//浏览器，并进入本地4200端口界面</span></span><br></pre></td></tr></table></figure></p>\n<p>在浏览器的本地4200端口出现如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/csh-angular.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"Angular6项目文件\"><a href=\"#Angular6项目文件\" class=\"headerlink\" title=\"Angular6项目文件\"></a>Angular6项目文件</h2><p><code>Angular</code> 新建项目的目录结构如下所示</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/angular-file.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"angular-json\"><a href=\"#angular-json\" class=\"headerlink\" title=\"angular.json\"></a>angular.json</h3><p>在 <code>Angular6</code> 以前，该文件名为.angular.json，<code>Angular6</code> 改成了angular.json，少了一个小数点，这个文件是脚手架的核心配置文件。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"projects\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"myApp\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"root\"</span>: <span class=\"string\">\"\"</span>, <span class=\"comment\">//项目的根</span></span><br><span class=\"line\">      <span class=\"string\">\"sourceRoot\"</span>: <span class=\"string\">\"src\"</span>, <span class=\"comment\">//项目的源码地址，即项目源码都在src文件夹下</span></span><br><span class=\"line\">      <span class=\"string\">\"projectType\"</span>: <span class=\"string\">\"application\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"prefix\"</span>: <span class=\"string\">\"app\"</span>, <span class=\"comment\">//前缀，新建组件时，其选择器为 'app-组件名'</span></span><br><span class=\"line\">      <span class=\"string\">\"schematics\"</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"string\">\"architect\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"build\"</span>: &#123; <span class=\"comment\">//项目打包部分</span></span><br><span class=\"line\">          <span class=\"string\">\"builder\"</span>: <span class=\"string\">\"@angular-devkit/build-angular:browser\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"options\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"outputPath\"</span>: <span class=\"string\">\"dist/myApp\"</span>, <span class=\"comment\">//打包后的项目地址</span></span><br><span class=\"line\">            <span class=\"string\">\"index\"</span>: <span class=\"string\">\"src/index.html\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"main\"</span>: <span class=\"string\">\"src/main.ts\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"polyfills\"</span>: <span class=\"string\">\"src/polyfills.ts\"</span>, <span class=\"comment\">//项目的腻子文件</span></span><br><span class=\"line\">            <span class=\"string\">\"tsConfig\"</span>: <span class=\"string\">\"src/tsconfig.app.json\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"assets\"</span>: [ <span class=\"comment\">//项目在资源地址</span></span><br><span class=\"line\">              <span class=\"string\">\"src/favicon.ico\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"src/assets\"</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">\"styles\"</span>: [ <span class=\"comment\">//项目引入的css文件</span></span><br><span class=\"line\">              <span class=\"string\">\"src/styles.css\"</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">\"scripts\"</span>: [] <span class=\"comment\">//项目引入的js文件</span></span><br><span class=\"line\">          &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><p>在项目下面存在 <code>pack.json</code> 文件，该 <code>json</code> 文件存放了项目的信息</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"name\"</span>: <span class=\"string\">\"my-app\"</span>, <span class=\"comment\">//项目名称</span></span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>, <span class=\"comment\">//项目版本</span></span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"ng\"</span>: <span class=\"string\">\"ng\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"ng serve\"</span>, <span class=\"comment\">//项目运行命令</span></span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"ng build\"</span>, <span class=\"comment\">//项目打包命令</span></span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"ng test\"</span>, <span class=\"comment\">//项目测试命令</span></span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"ng lint\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"e2e\"</span>: <span class=\"string\">\"ng e2e\"</span> <span class=\"comment\">//项目端到端测试命令</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"src-main-ts\"><a href=\"#src-main-ts\" class=\"headerlink\" title=\"src/main.ts\"></a>src/main.ts</h3><p>这个文件记录了项目从哪个模块开始运行<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; enableProdMode &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; platformBrowserDynamic &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser-dynamic'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app/app.module'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; environment &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./environments/environment'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (environment.production) &#123;</span><br><span class=\"line\">  enableProdMode();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">platformBrowserDynamic().bootstrapModule(AppModule)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"built_in\">console</span>.log(err));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"src-polyfill-ts\"><a href=\"#src-polyfill-ts\" class=\"headerlink\" title=\"src/polyfill.ts\"></a>src/polyfill.ts</h3><p>这个文件叫做腻子脚本，<code>Angular</code> 是默认对 <code>ie浏览器</code> 是不支持的，即新建项目后，在 <code>ie浏览器</code> 的本地4200端口页面是一片空白，将以下的注释取消，在ie浏览器中可以看到页面。<br><strong>将项目的默认注释取消后，其对ie浏览器的支持也不是特别好，<a href=\"https://angular.io/\" target=\"_blank\" rel=\"noopener\">Angualr官网</a>在ie11中有的页面页打不开</strong><br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/polyfill.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"src-index-html\"><a href=\"#src-index-html\" class=\"headerlink\" title=\"src/index.html\"></a>src/index.html</h3><p>该文件记录了页面是从开始模块 (<code>AppModule</code>) 中声明的哪一个组件开始<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>MyApp<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1\"</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"favicon.ico\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">app-root</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-root</span>&gt;</span> //从AppModule的app-root组件开始展示页面</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"src-app-app-module-ts\"><a href=\"#src-app-app-module-ts\" class=\"headerlink\" title=\"src/app/app.module.ts\"></a>src/app/app.module.ts</h3><p>这个文件是项目默认的根模块</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/platform-browser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./app.component'</span>;</span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  declarations: [</span><br><span class=\"line\">    AppComponent</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    BrowserModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  providers: [],</span><br><span class=\"line\">  bootstrap: [AppComponent] <span class=\"comment\">//bootstrap代表从哪个组件开始编译</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>src/main.ts</code> 中引入的启动模块就这个模块，所以这个模块也叫做项目的根模块，在这个模块中，默认定义了一个根组件，即 <code>AppComponent</code>，这个组件定义的选择器是  <code>app-root</code>，这个选择器在 <code>src/index.html</code> 中被使用，即这个组件也叫做根组件。<br><strong>以上文件为angular项目的主要的重要文件</strong></p>\n<h2 id=\"Angular6命令大全\"><a href=\"#Angular6命令大全\" class=\"headerlink\" title=\"Angular6命令大全\"></a>Angular6命令大全</h2><p><code>Angular</code> 为开发者者提供了诸多帮助，在 <code>cmd</code> 环境下，使用以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng --help</span><br></pre></td></tr></table></figure></p>\n<p>其命令如下图所示<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/ng-help.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h3 id=\"ng-add\"><a href=\"#ng-add\" class=\"headerlink\" title=\"ng add\"></a>ng add</h3><p><code>ng add</code> 是 <code>Angular6</code> 中新出现的命令，该命令使得向项目中添加新功能更加的方便。<br>例如，在项目根目录下运行如下命令添加<strong>ng-zorro</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add ng-zorro-antd</span><br></pre></td></tr></table></figure></p>\n<p>命令运行完成后，使用ng serve运行项目，浏览器打开本地4200端口，出现下图。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/ng-zorro-ant.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>这代表在这个项目中可以使用<a href=\"https://ng.ant.design/docs/introduce/zh\" target=\"_blank\" rel=\"noopener\">ng-zorro官网</a>的组件</p>\n<h3 id=\"ng-new\"><a href=\"#ng-new\" class=\"headerlink\" title=\"ng new\"></a>ng new</h3><p>该命令是创建一个新的 <code>Angular</code> 项目，使用如下命令，可以创建一个新项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new myApp //创建一个项目名为myApp的angular项目</span><br><span class=\"line\">ng new myApp --routing //这个命令同上，不同之处这个命令会在项目中</span><br><span class=\"line\">      //自动生成代表项目路由的文件 app-routing.module.ts</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ng-generate\"><a href=\"#ng-generate\" class=\"headerlink\" title=\"ng generate\"></a>ng generate</h3><p>这个命令是 <code>Angular</code> 项目中最主要的命令之一，新建组件，服务，指令，模块都可以在项目的根目录下使用这个命令进行创建。</p>\n<table>\n<thead>\n<tr>\n<th>默认创建名为home</th>\n<th>完整写法</th>\n<th>最简写法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>组件</td>\n<td>ng generate componetent home</td>\n<td>ng g c home</td>\n</tr>\n<tr>\n<td>服务</td>\n<td>ng generate service home</td>\n<td>ng g s home</td>\n</tr>\n<tr>\n<td>指令</td>\n<td>ng generate directive home</td>\n<td>ng g d home</td>\n</tr>\n<tr>\n<td>管道</td>\n<td>ng generate pipe home</td>\n<td>ng g p home</td>\n</tr>\n<tr>\n<td>类</td>\n<td>ng generate class home</td>\n<td>ng g cl home</td>\n</tr>\n<tr>\n<td>接口</td>\n<td>ng generate interface home</td>\n<td>ng g i home</td>\n</tr>\n<tr>\n<td>模块</td>\n<td>ng generate module home</td>\n<td>ng g m home</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意：</strong><br>1，<code>Angular</code> 以前的服务使用的依赖注入，在 <code>Angular6</code> 版本中，服务采用的相依注入<br>2，创建组件 <code>component</code> 和类 <code>class</code> 都是 <code>c</code> 开头，所以使用最简写法有一定区别，如下所示，创建组件使用的是 <code>ng g c</code>，创建类时使用的是 <code>ng g cl</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c 组件名 //创建组件时使用的是c</span><br><span class=\"line\">ng g cl 类名 //创建类时使用的是cl</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ng-build\"><a href=\"#ng-build\" class=\"headerlink\" title=\"ng build\"></a>ng build</h3><p><code>Angular</code> 项目采用的语言是 <code>typescript</code> 语法，由微软开发，该语法不直接在浏览器中运行，需要将 <code>ts(typescript)</code> 转换为 <code>js</code> 语法才可以运行，<code>ng build</code> 命令就是对 <code>Angular</code> 项目进行打包，生成静态的文件。</p>\n<h3 id=\"其它命令\"><a href=\"#其它命令\" class=\"headerlink\" title=\"其它命令\"></a>其它命令</h3><p><code>Angular</code> 还有其它的一些命令</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ng serve</td>\n<td>运行项目，存在–open参数时自动打开浏览器</td>\n</tr>\n<tr>\n<td>ng eject</td>\n<td>提取项目的webpack.config.json文件，一旦提取就不能还原</td>\n</tr>\n<tr>\n<td>ng libary 库名</td>\n<td>用户创建库</td>\n</tr>\n<tr>\n<td>ng help</td>\n<td>查找帮助</td>\n</tr>\n<tr>\n<td>ng version</td>\n<td>查看版本</td>\n</tr>\n<tr>\n<td>ng update</td>\n<td>项目的依赖有重大改变时，自动更新代码</td>\n</tr>\n<tr>\n<td>ng project 项目名</td>\n<td>已移除，在本项目下新建一个项目</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Angular-2-组件通讯","_content":"## 摘要\n组件就像是一个个的零件，我们需要按照 `Angular`  定义的规则将它们组装起来，而且它们之间可以进行交流通讯，这样才组成一个有机的完整系统。\n在一个完整的系统中，组件会形成树形结构，如下图所示。\n\n![](https://bingolil.github.io/images/com-tree.png)\n\n`Angular` 组件间的典型通讯方式有以下几种：\n> * 直接的父子关系：父组件访问子组件的public属性和方法\n> * 直接的父子关系：子组件借助于Input和Output和父组件进行通讯\n> * 没有直接关系：借助于service单例进行通讯\n> * 利用浏览器的cookie和localStorage存储进行通讯\n> * 利用session进行通讯\n\n其它前端框架的组件间通讯方式也和上面几种方式差不多，比如 `vue` 和 `react` \n## 直接调用\n对于组件间的关系是父子关系，父组件可以直接访问子组件里面的 `public` 方法和属性。其父组件代码如下\nparent.component.html\n```HTML\n<app-child #child></app-child>\n<button (click)=\"child.childFn()\" class=\"btn btn-success\">调用子组件\n方法</button> \n```\n\n通过在模板里面定义局部变量的方式来直接调用子组件里面的 `public` 型方法，该段代码表达的意思是父组件中点击 `调用子组件方法`  按钮，调用 `child` 中的 `public` 方法 `childFn()`。而子组件代码如下\nchild.component.ts\n```ts\npublic childFn():void{ //public可以要，可以不用，\n                       //angular变量和方法默认为public类型\n console.log(\"点击事件发生在父组件\");\n} \n```\n\n运行该项目，在浏览器中，点击 `调用子组件方法` 按钮，按 `f12` 查看控制台，可以看到输出 `点击事件发生在父组件`\n该方式是在组件的模板 `parent.compontent.html` 中调用子组件，如果需要在父组件本身 `parent.compontent.ts` 中调用子组件，在父组件中需要引入 `ViewChild` 装饰器，代码如下所示\nparent.component.ts\n```ts\nimport { ViewChild } from '@angular/core';\nimport { ChildComponent } from '../child/child.component.ts';\n\n..... //代码块\n\n@ViewChild(ChildComponent)\nprivate child: ChildComponent; \n```\n\n在父组件的ts文件中，`child` 代表的是子组件，这样就可以调用子组件的 `public` 方法或属性，关于 `@viewChild` 装饰器以后会详细介绍。\n## @Input 和 @Output\n`@Input` 和 `@Output` 是 `Angular` 提供的装饰器，子组件和父组件之间的通讯可以用到这两个装饰器，并且在 `Angular` 项目的 `通用组件`（即将多处相似的模板提取出来，重写成一个组件，这个组件在项目中多处被使用） 中经常被使用。\n### @Input\n`@Input` 装饰器是子组件获取父组件的属性，代码如下所示\nparent.component.html（父组件模板）\n```HTML\n<app-child comVar=\"父组件模板变量\"></app-child>\n```\n\nchild.component.ts（子组件）\n```ts\nimport { OnInit, Input } from '@angular/core';\n\n..... //代码块\n\n@Input() comVar: string='';\n\nngOnInit(){\n  console.log(this.comVar);\n}\n```\n\n可以在浏览器控制台中看到输出 `父组件模板变量`\n上面的变量是在模板中定义，也可以采用 `Angular` 的属性绑定机制，在父组件 `parent.component.ts` 中定义数据，在模板 `parent.component.html` 中使用，代码如下所示\nparent.component.ts\n```ts\n..... //代码块\n\ncomVar='父组件变量'\n```\n\nparent.component.html\n```HTML\n<app-child [varParent]=\"comVar\"></app-child>\n```\n\n其子组件代码如下所示\nchild.component.ts\n```ts\nimport { OnInit, Input } from '@angular/core';\n\n..... //代码块\n\n@Input() varParent: string='';\n\nngOnInit(){\n  console.log(this.varParent);\n}\n```\n\n可以在浏览器的控制台中看到输出 `父组件变量`\n### @Output\n`@Output` 的本质是事件机制，我们用它来监听子组件中的事件，即子组件发生了某个事件，通知父组件，代码如下所示\nchild.component.ts\n```ts\nimport { EventEmitter, Output } from '@angular/core';\n\n.... //代码块\n\nchildStr:string= '子组件字符串';\n\n@Output() childEvent=new EventEmitter();\n\ndoEmit(){\n  this.childEvent.emit(this.childStr);\n}\n```\n\nchild.component.html\n\n```HTML\n<button (click)=\"doEmit()\" class=\"btn btn-success\">派发事件</button> \n```\n\n其父组件代码如下所示\nparent.component.html\n\n```HTML\n<app-child (event)=\"childEvent($event)\"></app-child>\n```\n\nparent.component.ts\n\n```ts\n.... //代码块\n\nchildEvent(event){\n  console.log(event);\n}\n```\n\n在浏览器中，点击子组件的 `派发事件` 按钮，可以在控制台看到输出 `子组件字符串` ，并且每点击一次，其父组件就会在控制台输出一次。\n## Service\n\n服务（`Angular6` 版本）通讯模式如下图所示\n\n![](https://bingolil.github.io/images/angular-service.png)\n\n### Service优点\n很明显，上述两种 **直接调用** 和 **Input 和 Output** 组件间的通讯方式有一定的局限，即组件间的关系必须是父组件和子组件。在完整 `Angular` 项目中，组件与组件之间可能不存在直接关系，但组件之间需要进行通讯，这时就需要使用 `Angular` 提供的 `service` 功能，使用 `service` ，在同一个项目中，各个组件之间都可以进行通讯。\n### 版本区别\n在 `Angular6` 版本以前，`Angular` 的服务（`service`）采用的是 `依赖注入` 方式，而 `Angular6` 版本采用的是 `相依注入` 方式。\n### 依赖注入（Angular5）\n由于依赖注入存在于 `Angular6` 版本以前，而且 `Angular7` 版本也出来不久，一般开发项目都是采用最新技术，所以关于 `依赖注入` 可以了解一下，看其使用机制。代码如下所示\n定义一个服务 `CommunicateService`\ncommunicate.service.ts\n```ts\nimport { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable'\n\n@Injectable()\nexport class CommunicateService {\n\n  public eventBus=new Subject<string>();\n\n  constructor() { }\n  \n}\n```\n\n在组件中使用该服务需要在组件所在模块中配置注入器（也可以在组件中配置），其代码如下所示\napp.module.ts\n```ts\nimport { CommunicateService } from './communicate.service';\n\n.... //代码块\n\nproviders: [CommunicateService],\n\n.... //代码块\n```\n\n在A组件中，使用该服务（`service`）\nA.component.ts\n```ts\nimport { CommunicateService } from '../communicate.service';\n\n.... //代码块\n\npublic setEventBus():void{\n  this.communicateService.eventBus.next(\"触发service\");\n}\n```\n\nA组件模板代码如下所示\nA.component.html\n```HTML\n<button (click)=\"setEventBus()\" class=\"btn btn-success\">点击</button>\n```\n\n在B组件中，使用该服务（`service`）\nB.component.ts\n```ts\nimport { CommunicateService } from '../communicate.service';\n\n.... //代码块\n\nconstructor(public communicateService:CommunicateService) { }\n\nngOnInit() {\n  this.communicateService.eventBus.subscribe((value)=>{\n    console.log(value)\n  })\n}\n```\n\n点击A组件模板中的 `点击` 按钮，可以在控制台输出 `触发service` ，而且这是由B组件输出A组件中定义的值，即实现了通讯。\n### 相依注入（Angular6）\n在 `Angular6` 版本中，对于 `Service` ，框架采用了相依注入的模式。即在 `Angular5` 版本中的配置注入器由框架自动完成。其代码如下所示\ncommunicate.service.ts\n``` ts\nimport { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable({\n  providedIn: 'root' //与Angular5版本的区别\n})\nexport class CommunicateService {\n\n  public eventBus=new Subject<string>();\n\n  constructor() { }\n  \n}\n```\n\n在上述代码中，`provideIn` 为 `root`，即在项目中各个组件都可以使用该服务，若只想在某个模块中使用该服务，在服务中引入模块名，将代码中的 `root` 改成 `模块名` 即可。\n在A组件中，使用该服务（`service`）\nA.component.ts\n```ts\nimport { CommunicateService } from '../communicate.service';\n\n.... //代码块\n\npublic setEventBus():void{\n  this.communicateService.eventBus.next(\"触发service\");\n}\n```\n\nA组件模板代码如下所示\nA.component.html\n```HTML\n<button (click)=\"setEventBus()\" class=\"btn btn-success\">点击</button>\n```\n\n在B组件中，使用该服务（`service`）\nB.component.ts\n```ts\nimport { CommunicateService } from '../communicate.service';\n\n.... //代码块\n\nconstructor(public communicateService:CommunicateService) { }\n\nngOnInit() {\n  this.communicateService.eventBus.subscribe((value)=>{\n    console.log(value)\n  })\n}\n```\n\n点击 `A组件` 模板中的 `点击` 按钮，可以在控制台输出 `触发service` ，而且这是由 `B组件` 输出 `A组件` 中定义的值，即实现了通讯。\n## cookie 或 localstorage\n组件与组件间的通讯也可以使用浏览器的自带功能，即 `cookie` 或 `localstorage`，其模式如下图所示。\n\n![](https://bingolil.github.io/images/angular-cl.png)\n\n在A组件中写入 `cookie` 或 `localstorage` 代码如下所示\nA.component.ts\n```typescript\n\n.... //代码块\npublic setLocal():void{\n  window.localStorage.setItem(\"json\",JSON.stringify({name:'jack',age:24}));\n  }\n```\n\nA模板代码如下所示\nA.component.html\n```HTML\n<button (click)=\"setLocal()\" class=\"btn btn-success\">设置localstorage</button>\n```\n\n在B组件中获取 `cookie` 或 `localstorage` 代码如下所示\nB.component.ts\n```typescript\nprivate conLocal():void{\n  var json=window.localStorage.getItem(\"json\");\n  var obj=JSON.parse(json);\n  console.log(obj);\n}\n```\n\nB组件模板代码如下所示\nB.component.html\n```HTML\n<button (click)=\"conLocal()\" class=\"btn btn-success\">输出localstorage</button>\n```\n\n在浏览器中，点击A组件中 `设置localstorage` 按钮，然后点击B组件中 `输出localstorage` 按钮，可以在控制台输出A组件中设置的 `json` 对象，即采用 `cookie` 或 `localstorage` 的通讯方式成功。\n\n## Session\n利用session在组件间的通讯模式如下图所示\n\n![](https://bingolil.github.io/images/angular-session.png)\n\n`Session`:在计算机中，尤其是在网络应用中，称为“会话控制”。`Session`  对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 `Web` 页之间跳转时，存储在 `Session`  对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。\n","source":"_posts/angular/learn-2.md","raw":"title: Angular-2-组件通讯\ncategories: Angular\ntags: [Angular,Angular组件通讯]\n---\n## 摘要\n组件就像是一个个的零件，我们需要按照 `Angular`  定义的规则将它们组装起来，而且它们之间可以进行交流通讯，这样才组成一个有机的完整系统。\n在一个完整的系统中，组件会形成树形结构，如下图所示。\n\n![](https://bingolil.github.io/images/com-tree.png)\n\n`Angular` 组件间的典型通讯方式有以下几种：\n> * 直接的父子关系：父组件访问子组件的public属性和方法\n> * 直接的父子关系：子组件借助于Input和Output和父组件进行通讯\n> * 没有直接关系：借助于service单例进行通讯\n> * 利用浏览器的cookie和localStorage存储进行通讯\n> * 利用session进行通讯\n\n其它前端框架的组件间通讯方式也和上面几种方式差不多，比如 `vue` 和 `react` \n## 直接调用\n对于组件间的关系是父子关系，父组件可以直接访问子组件里面的 `public` 方法和属性。其父组件代码如下\nparent.component.html\n```HTML\n<app-child #child></app-child>\n<button (click)=\"child.childFn()\" class=\"btn btn-success\">调用子组件\n方法</button> \n```\n\n通过在模板里面定义局部变量的方式来直接调用子组件里面的 `public` 型方法，该段代码表达的意思是父组件中点击 `调用子组件方法`  按钮，调用 `child` 中的 `public` 方法 `childFn()`。而子组件代码如下\nchild.component.ts\n```ts\npublic childFn():void{ //public可以要，可以不用，\n                       //angular变量和方法默认为public类型\n console.log(\"点击事件发生在父组件\");\n} \n```\n\n运行该项目，在浏览器中，点击 `调用子组件方法` 按钮，按 `f12` 查看控制台，可以看到输出 `点击事件发生在父组件`\n该方式是在组件的模板 `parent.compontent.html` 中调用子组件，如果需要在父组件本身 `parent.compontent.ts` 中调用子组件，在父组件中需要引入 `ViewChild` 装饰器，代码如下所示\nparent.component.ts\n```ts\nimport { ViewChild } from '@angular/core';\nimport { ChildComponent } from '../child/child.component.ts';\n\n..... //代码块\n\n@ViewChild(ChildComponent)\nprivate child: ChildComponent; \n```\n\n在父组件的ts文件中，`child` 代表的是子组件，这样就可以调用子组件的 `public` 方法或属性，关于 `@viewChild` 装饰器以后会详细介绍。\n## @Input 和 @Output\n`@Input` 和 `@Output` 是 `Angular` 提供的装饰器，子组件和父组件之间的通讯可以用到这两个装饰器，并且在 `Angular` 项目的 `通用组件`（即将多处相似的模板提取出来，重写成一个组件，这个组件在项目中多处被使用） 中经常被使用。\n### @Input\n`@Input` 装饰器是子组件获取父组件的属性，代码如下所示\nparent.component.html（父组件模板）\n```HTML\n<app-child comVar=\"父组件模板变量\"></app-child>\n```\n\nchild.component.ts（子组件）\n```ts\nimport { OnInit, Input } from '@angular/core';\n\n..... //代码块\n\n@Input() comVar: string='';\n\nngOnInit(){\n  console.log(this.comVar);\n}\n```\n\n可以在浏览器控制台中看到输出 `父组件模板变量`\n上面的变量是在模板中定义，也可以采用 `Angular` 的属性绑定机制，在父组件 `parent.component.ts` 中定义数据，在模板 `parent.component.html` 中使用，代码如下所示\nparent.component.ts\n```ts\n..... //代码块\n\ncomVar='父组件变量'\n```\n\nparent.component.html\n```HTML\n<app-child [varParent]=\"comVar\"></app-child>\n```\n\n其子组件代码如下所示\nchild.component.ts\n```ts\nimport { OnInit, Input } from '@angular/core';\n\n..... //代码块\n\n@Input() varParent: string='';\n\nngOnInit(){\n  console.log(this.varParent);\n}\n```\n\n可以在浏览器的控制台中看到输出 `父组件变量`\n### @Output\n`@Output` 的本质是事件机制，我们用它来监听子组件中的事件，即子组件发生了某个事件，通知父组件，代码如下所示\nchild.component.ts\n```ts\nimport { EventEmitter, Output } from '@angular/core';\n\n.... //代码块\n\nchildStr:string= '子组件字符串';\n\n@Output() childEvent=new EventEmitter();\n\ndoEmit(){\n  this.childEvent.emit(this.childStr);\n}\n```\n\nchild.component.html\n\n```HTML\n<button (click)=\"doEmit()\" class=\"btn btn-success\">派发事件</button> \n```\n\n其父组件代码如下所示\nparent.component.html\n\n```HTML\n<app-child (event)=\"childEvent($event)\"></app-child>\n```\n\nparent.component.ts\n\n```ts\n.... //代码块\n\nchildEvent(event){\n  console.log(event);\n}\n```\n\n在浏览器中，点击子组件的 `派发事件` 按钮，可以在控制台看到输出 `子组件字符串` ，并且每点击一次，其父组件就会在控制台输出一次。\n## Service\n\n服务（`Angular6` 版本）通讯模式如下图所示\n\n![](https://bingolil.github.io/images/angular-service.png)\n\n### Service优点\n很明显，上述两种 **直接调用** 和 **Input 和 Output** 组件间的通讯方式有一定的局限，即组件间的关系必须是父组件和子组件。在完整 `Angular` 项目中，组件与组件之间可能不存在直接关系，但组件之间需要进行通讯，这时就需要使用 `Angular` 提供的 `service` 功能，使用 `service` ，在同一个项目中，各个组件之间都可以进行通讯。\n### 版本区别\n在 `Angular6` 版本以前，`Angular` 的服务（`service`）采用的是 `依赖注入` 方式，而 `Angular6` 版本采用的是 `相依注入` 方式。\n### 依赖注入（Angular5）\n由于依赖注入存在于 `Angular6` 版本以前，而且 `Angular7` 版本也出来不久，一般开发项目都是采用最新技术，所以关于 `依赖注入` 可以了解一下，看其使用机制。代码如下所示\n定义一个服务 `CommunicateService`\ncommunicate.service.ts\n```ts\nimport { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable'\n\n@Injectable()\nexport class CommunicateService {\n\n  public eventBus=new Subject<string>();\n\n  constructor() { }\n  \n}\n```\n\n在组件中使用该服务需要在组件所在模块中配置注入器（也可以在组件中配置），其代码如下所示\napp.module.ts\n```ts\nimport { CommunicateService } from './communicate.service';\n\n.... //代码块\n\nproviders: [CommunicateService],\n\n.... //代码块\n```\n\n在A组件中，使用该服务（`service`）\nA.component.ts\n```ts\nimport { CommunicateService } from '../communicate.service';\n\n.... //代码块\n\npublic setEventBus():void{\n  this.communicateService.eventBus.next(\"触发service\");\n}\n```\n\nA组件模板代码如下所示\nA.component.html\n```HTML\n<button (click)=\"setEventBus()\" class=\"btn btn-success\">点击</button>\n```\n\n在B组件中，使用该服务（`service`）\nB.component.ts\n```ts\nimport { CommunicateService } from '../communicate.service';\n\n.... //代码块\n\nconstructor(public communicateService:CommunicateService) { }\n\nngOnInit() {\n  this.communicateService.eventBus.subscribe((value)=>{\n    console.log(value)\n  })\n}\n```\n\n点击A组件模板中的 `点击` 按钮，可以在控制台输出 `触发service` ，而且这是由B组件输出A组件中定义的值，即实现了通讯。\n### 相依注入（Angular6）\n在 `Angular6` 版本中，对于 `Service` ，框架采用了相依注入的模式。即在 `Angular5` 版本中的配置注入器由框架自动完成。其代码如下所示\ncommunicate.service.ts\n``` ts\nimport { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable({\n  providedIn: 'root' //与Angular5版本的区别\n})\nexport class CommunicateService {\n\n  public eventBus=new Subject<string>();\n\n  constructor() { }\n  \n}\n```\n\n在上述代码中，`provideIn` 为 `root`，即在项目中各个组件都可以使用该服务，若只想在某个模块中使用该服务，在服务中引入模块名，将代码中的 `root` 改成 `模块名` 即可。\n在A组件中，使用该服务（`service`）\nA.component.ts\n```ts\nimport { CommunicateService } from '../communicate.service';\n\n.... //代码块\n\npublic setEventBus():void{\n  this.communicateService.eventBus.next(\"触发service\");\n}\n```\n\nA组件模板代码如下所示\nA.component.html\n```HTML\n<button (click)=\"setEventBus()\" class=\"btn btn-success\">点击</button>\n```\n\n在B组件中，使用该服务（`service`）\nB.component.ts\n```ts\nimport { CommunicateService } from '../communicate.service';\n\n.... //代码块\n\nconstructor(public communicateService:CommunicateService) { }\n\nngOnInit() {\n  this.communicateService.eventBus.subscribe((value)=>{\n    console.log(value)\n  })\n}\n```\n\n点击 `A组件` 模板中的 `点击` 按钮，可以在控制台输出 `触发service` ，而且这是由 `B组件` 输出 `A组件` 中定义的值，即实现了通讯。\n## cookie 或 localstorage\n组件与组件间的通讯也可以使用浏览器的自带功能，即 `cookie` 或 `localstorage`，其模式如下图所示。\n\n![](https://bingolil.github.io/images/angular-cl.png)\n\n在A组件中写入 `cookie` 或 `localstorage` 代码如下所示\nA.component.ts\n```typescript\n\n.... //代码块\npublic setLocal():void{\n  window.localStorage.setItem(\"json\",JSON.stringify({name:'jack',age:24}));\n  }\n```\n\nA模板代码如下所示\nA.component.html\n```HTML\n<button (click)=\"setLocal()\" class=\"btn btn-success\">设置localstorage</button>\n```\n\n在B组件中获取 `cookie` 或 `localstorage` 代码如下所示\nB.component.ts\n```typescript\nprivate conLocal():void{\n  var json=window.localStorage.getItem(\"json\");\n  var obj=JSON.parse(json);\n  console.log(obj);\n}\n```\n\nB组件模板代码如下所示\nB.component.html\n```HTML\n<button (click)=\"conLocal()\" class=\"btn btn-success\">输出localstorage</button>\n```\n\n在浏览器中，点击A组件中 `设置localstorage` 按钮，然后点击B组件中 `输出localstorage` 按钮，可以在控制台输出A组件中设置的 `json` 对象，即采用 `cookie` 或 `localstorage` 的通讯方式成功。\n\n## Session\n利用session在组件间的通讯模式如下图所示\n\n![](https://bingolil.github.io/images/angular-session.png)\n\n`Session`:在计算机中，尤其是在网络应用中，称为“会话控制”。`Session`  对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 `Web` 页之间跳转时，存储在 `Session`  对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。\n","slug":"angular/learn-2","published":1,"date":"2018-11-09T09:10:32.041Z","updated":"2018-11-23T08:30:07.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjozdt9ms0003bgvc6552tl5z","content":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>组件就像是一个个的零件，我们需要按照 <code>Angular</code>  定义的规则将它们组装起来，而且它们之间可以进行交流通讯，这样才组成一个有机的完整系统。<br>在一个完整的系统中，组件会形成树形结构，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/com-tree.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p><code>Angular</code> 组件间的典型通讯方式有以下几种：</p>\n<blockquote>\n<ul>\n<li>直接的父子关系：父组件访问子组件的public属性和方法</li>\n<li>直接的父子关系：子组件借助于Input和Output和父组件进行通讯</li>\n<li>没有直接关系：借助于service单例进行通讯</li>\n<li>利用浏览器的cookie和localStorage存储进行通讯</li>\n<li>利用session进行通讯</li>\n</ul>\n</blockquote>\n<p>其它前端框架的组件间通讯方式也和上面几种方式差不多，比如 <code>vue</code> 和 <code>react</code> </p>\n<h2 id=\"直接调用\"><a href=\"#直接调用\" class=\"headerlink\" title=\"直接调用\"></a>直接调用</h2><p>对于组件间的关系是父子关系，父组件可以直接访问子组件里面的 <code>public</code> 方法和属性。其父组件代码如下<br>parent.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> #<span class=\"attr\">child</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"child.childFn()\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-success\"</span>&gt;</span>调用子组件</span><br><span class=\"line\">方法<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>通过在模板里面定义局部变量的方式来直接调用子组件里面的 <code>public</code> 型方法，该段代码表达的意思是父组件中点击 <code>调用子组件方法</code>  按钮，调用 <code>child</code> 中的 <code>public</code> 方法 <code>childFn()</code>。而子组件代码如下<br>child.component.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> childFn():<span class=\"built_in\">void</span>&#123; <span class=\"comment\">//public可以要，可以不用，</span></span><br><span class=\"line\">                       <span class=\"comment\">//angular变量和方法默认为public类型</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"点击事件发生在父组件\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行该项目，在浏览器中，点击 <code>调用子组件方法</code> 按钮，按 <code>f12</code> 查看控制台，可以看到输出 <code>点击事件发生在父组件</code><br>该方式是在组件的模板 <code>parent.compontent.html</code> 中调用子组件，如果需要在父组件本身 <code>parent.compontent.ts</code> 中调用子组件，在父组件中需要引入 <code>ViewChild</code> 装饰器，代码如下所示<br>parent.component.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ViewChild &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ChildComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../child/child.component.ts'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">..... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ViewChild</span>(ChildComponent)</span><br><span class=\"line\"><span class=\"keyword\">private</span> child: ChildComponent;</span><br></pre></td></tr></table></figure></p>\n<p>在父组件的ts文件中，<code>child</code> 代表的是子组件，这样就可以调用子组件的 <code>public</code> 方法或属性，关于 <code>@viewChild</code> 装饰器以后会详细介绍。</p>\n<h2 id=\"Input-和-Output\"><a href=\"#Input-和-Output\" class=\"headerlink\" title=\"@Input 和 @Output\"></a>@Input 和 @Output</h2><p><code>@Input</code> 和 <code>@Output</code> 是 <code>Angular</code> 提供的装饰器，子组件和父组件之间的通讯可以用到这两个装饰器，并且在 <code>Angular</code> 项目的 <code>通用组件</code>（即将多处相似的模板提取出来，重写成一个组件，这个组件在项目中多处被使用） 中经常被使用。</p>\n<h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"@Input\"></a>@Input</h3><p><code>@Input</code> 装饰器是子组件获取父组件的属性，代码如下所示<br>parent.component.html（父组件模板）<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> <span class=\"attr\">comVar</span>=<span class=\"string\">\"父组件模板变量\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>child.component.ts（子组件）<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; OnInit, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">..... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Input</span>() comVar: <span class=\"built_in\">string</span>=<span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ngOnInit()&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.comVar);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以在浏览器控制台中看到输出 <code>父组件模板变量</code><br>上面的变量是在模板中定义，也可以采用 <code>Angular</code> 的属性绑定机制，在父组件 <code>parent.component.ts</code> 中定义数据，在模板 <code>parent.component.html</code> 中使用，代码如下所示<br>parent.component.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">comVar=<span class=\"string\">'父组件变量'</span></span><br></pre></td></tr></table></figure></p>\n<p>parent.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> [<span class=\"attr\">varParent</span>]=<span class=\"string\">\"comVar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>其子组件代码如下所示<br>child.component.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; OnInit, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">..... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Input</span>() varParent: <span class=\"built_in\">string</span>=<span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ngOnInit()&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.varParent);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以在浏览器的控制台中看到输出 <code>父组件变量</code></p>\n<h3 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"@Output\"></a>@Output</h3><p><code>@Output</code> 的本质是事件机制，我们用它来监听子组件中的事件，即子组件发生了某个事件，通知父组件，代码如下所示<br>child.component.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; EventEmitter, Output &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">childStr:<span class=\"built_in\">string</span>= <span class=\"string\">'子组件字符串'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Output</span>() childEvent=<span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\"></span><br><span class=\"line\">doEmit()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.childEvent.emit(<span class=\"keyword\">this</span>.childStr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>child.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"doEmit()\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-success\"</span>&gt;</span>派发事件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其父组件代码如下所示<br>parent.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> (<span class=\"attr\">event</span>)=<span class=\"string\">\"childEvent($event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>parent.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">childEvent(event)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在浏览器中，点击子组件的 <code>派发事件</code> 按钮，可以在控制台看到输出 <code>子组件字符串</code> ，并且每点击一次，其父组件就会在控制台输出一次。</p>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><p>服务（<code>Angular6</code> 版本）通讯模式如下图所示</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/angular-service.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"Service优点\"><a href=\"#Service优点\" class=\"headerlink\" title=\"Service优点\"></a>Service优点</h3><p>很明显，上述两种 <strong>直接调用</strong> 和 <strong>Input 和 Output</strong> 组件间的通讯方式有一定的局限，即组件间的关系必须是父组件和子组件。在完整 <code>Angular</code> 项目中，组件与组件之间可能不存在直接关系，但组件之间需要进行通讯，这时就需要使用 <code>Angular</code> 提供的 <code>service</code> 功能，使用 <code>service</code> ，在同一个项目中，各个组件之间都可以进行通讯。</p>\n<h3 id=\"版本区别\"><a href=\"#版本区别\" class=\"headerlink\" title=\"版本区别\"></a>版本区别</h3><p>在 <code>Angular6</code> 版本以前，<code>Angular</code> 的服务（<code>service</code>）采用的是 <code>依赖注入</code> 方式，而 <code>Angular6</code> 版本采用的是 <code>相依注入</code> 方式。</p>\n<h3 id=\"依赖注入（Angular5）\"><a href=\"#依赖注入（Angular5）\" class=\"headerlink\" title=\"依赖注入（Angular5）\"></a>依赖注入（Angular5）</h3><p>由于依赖注入存在于 <code>Angular6</code> 版本以前，而且 <code>Angular7</code> 版本也出来不久，一般开发项目都是采用最新技术，所以关于 <code>依赖注入</code> 可以了解一下，看其使用机制。代码如下所示<br>定义一个服务 <code>CommunicateService</code><br>communicate.service.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Subject &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/Subject'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/Observable'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CommunicateService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> eventBus=<span class=\"keyword\">new</span> Subject&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在组件中使用该服务需要在组件所在模块中配置注入器（也可以在组件中配置），其代码如下所示<br>app.module.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./communicate.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">providers: [CommunicateService],</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure></p>\n<p>在A组件中，使用该服务（<code>service</code>）<br>A.component.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../communicate.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> setEventBus():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.communicateService.eventBus.next(<span class=\"string\">\"触发service\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>A组件模板代码如下所示<br>A.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"setEventBus()\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-success\"</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在B组件中，使用该服务（<code>service</code>）<br>B.component.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../communicate.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> communicateService:CommunicateService</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ngOnInit() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.communicateService.eventBus.subscribe(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>点击A组件模板中的 <code>点击</code> 按钮，可以在控制台输出 <code>触发service</code> ，而且这是由B组件输出A组件中定义的值，即实现了通讯。</p>\n<h3 id=\"相依注入（Angular6）\"><a href=\"#相依注入（Angular6）\" class=\"headerlink\" title=\"相依注入（Angular6）\"></a>相依注入（Angular6）</h3><p>在 <code>Angular6</code> 版本中，对于 <code>Service</code> ，框架采用了相依注入的模式。即在 <code>Angular5</code> 版本中的配置注入器由框架自动完成。其代码如下所示<br>communicate.service.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Subject &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/Subject'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  providedIn: <span class=\"string\">'root'</span> <span class=\"comment\">//与Angular5版本的区别</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CommunicateService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> eventBus=<span class=\"keyword\">new</span> Subject&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上述代码中，<code>provideIn</code> 为 <code>root</code>，即在项目中各个组件都可以使用该服务，若只想在某个模块中使用该服务，在服务中引入模块名，将代码中的 <code>root</code> 改成 <code>模块名</code> 即可。<br>在A组件中，使用该服务（<code>service</code>）<br>A.component.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../communicate.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> setEventBus():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.communicateService.eventBus.next(<span class=\"string\">\"触发service\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>A组件模板代码如下所示<br>A.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"setEventBus()\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-success\"</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在B组件中，使用该服务（<code>service</code>）<br>B.component.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../communicate.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> communicateService:CommunicateService</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ngOnInit() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.communicateService.eventBus.subscribe(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>点击 <code>A组件</code> 模板中的 <code>点击</code> 按钮，可以在控制台输出 <code>触发service</code> ，而且这是由 <code>B组件</code> 输出 <code>A组件</code> 中定义的值，即实现了通讯。</p>\n<h2 id=\"cookie-或-localstorage\"><a href=\"#cookie-或-localstorage\" class=\"headerlink\" title=\"cookie 或 localstorage\"></a>cookie 或 localstorage</h2><p>组件与组件间的通讯也可以使用浏览器的自带功能，即 <code>cookie</code> 或 <code>localstorage</code>，其模式如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/angular-cl.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在A组件中写入 <code>cookie</code> 或 <code>localstorage</code> 代码如下所示<br>A.component.ts<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> setLocal():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.localStorage.setItem(<span class=\"string\">\"json\"</span>,<span class=\"built_in\">JSON</span>.stringify(&#123;name:<span class=\"string\">'jack'</span>,age:<span class=\"number\">24</span>&#125;));</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>A模板代码如下所示<br>A.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"setLocal()\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-success\"</span>&gt;</span>设置localstorage<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在B组件中获取 <code>cookie</code> 或 <code>localstorage</code> 代码如下所示<br>B.component.ts<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> conLocal():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> json=<span class=\"built_in\">window</span>.localStorage.getItem(<span class=\"string\">\"json\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj=<span class=\"built_in\">JSON</span>.parse(json);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>B组件模板代码如下所示<br>B.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"conLocal()\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-success\"</span>&gt;</span>输出localstorage<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在浏览器中，点击A组件中 <code>设置localstorage</code> 按钮，然后点击B组件中 <code>输出localstorage</code> 按钮，可以在控制台输出A组件中设置的 <code>json</code> 对象，即采用 <code>cookie</code> 或 <code>localstorage</code> 的通讯方式成功。</p>\n<h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><p>利用session在组件间的通讯模式如下图所示</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/angular-session.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p><code>Session</code>:在计算机中，尤其是在网络应用中，称为“会话控制”。<code>Session</code>  对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 <code>Web</code> 页之间跳转时，存储在 <code>Session</code>  对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>组件就像是一个个的零件，我们需要按照 <code>Angular</code>  定义的规则将它们组装起来，而且它们之间可以进行交流通讯，这样才组成一个有机的完整系统。<br>在一个完整的系统中，组件会形成树形结构，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/com-tree.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p><code>Angular</code> 组件间的典型通讯方式有以下几种：</p>\n<blockquote>\n<ul>\n<li>直接的父子关系：父组件访问子组件的public属性和方法</li>\n<li>直接的父子关系：子组件借助于Input和Output和父组件进行通讯</li>\n<li>没有直接关系：借助于service单例进行通讯</li>\n<li>利用浏览器的cookie和localStorage存储进行通讯</li>\n<li>利用session进行通讯</li>\n</ul>\n</blockquote>\n<p>其它前端框架的组件间通讯方式也和上面几种方式差不多，比如 <code>vue</code> 和 <code>react</code> </p>\n<h2 id=\"直接调用\"><a href=\"#直接调用\" class=\"headerlink\" title=\"直接调用\"></a>直接调用</h2><p>对于组件间的关系是父子关系，父组件可以直接访问子组件里面的 <code>public</code> 方法和属性。其父组件代码如下<br>parent.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> #<span class=\"attr\">child</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"child.childFn()\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-success\"</span>&gt;</span>调用子组件</span><br><span class=\"line\">方法<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>通过在模板里面定义局部变量的方式来直接调用子组件里面的 <code>public</code> 型方法，该段代码表达的意思是父组件中点击 <code>调用子组件方法</code>  按钮，调用 <code>child</code> 中的 <code>public</code> 方法 <code>childFn()</code>。而子组件代码如下<br>child.component.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> childFn():<span class=\"built_in\">void</span>&#123; <span class=\"comment\">//public可以要，可以不用，</span></span><br><span class=\"line\">                       <span class=\"comment\">//angular变量和方法默认为public类型</span></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"点击事件发生在父组件\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行该项目，在浏览器中，点击 <code>调用子组件方法</code> 按钮，按 <code>f12</code> 查看控制台，可以看到输出 <code>点击事件发生在父组件</code><br>该方式是在组件的模板 <code>parent.compontent.html</code> 中调用子组件，如果需要在父组件本身 <code>parent.compontent.ts</code> 中调用子组件，在父组件中需要引入 <code>ViewChild</code> 装饰器，代码如下所示<br>parent.component.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ViewChild &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ChildComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../child/child.component.ts'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">..... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ViewChild</span>(ChildComponent)</span><br><span class=\"line\"><span class=\"keyword\">private</span> child: ChildComponent;</span><br></pre></td></tr></table></figure></p>\n<p>在父组件的ts文件中，<code>child</code> 代表的是子组件，这样就可以调用子组件的 <code>public</code> 方法或属性，关于 <code>@viewChild</code> 装饰器以后会详细介绍。</p>\n<h2 id=\"Input-和-Output\"><a href=\"#Input-和-Output\" class=\"headerlink\" title=\"@Input 和 @Output\"></a>@Input 和 @Output</h2><p><code>@Input</code> 和 <code>@Output</code> 是 <code>Angular</code> 提供的装饰器，子组件和父组件之间的通讯可以用到这两个装饰器，并且在 <code>Angular</code> 项目的 <code>通用组件</code>（即将多处相似的模板提取出来，重写成一个组件，这个组件在项目中多处被使用） 中经常被使用。</p>\n<h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"@Input\"></a>@Input</h3><p><code>@Input</code> 装饰器是子组件获取父组件的属性，代码如下所示<br>parent.component.html（父组件模板）<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> <span class=\"attr\">comVar</span>=<span class=\"string\">\"父组件模板变量\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>child.component.ts（子组件）<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; OnInit, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">..... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Input</span>() comVar: <span class=\"built_in\">string</span>=<span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ngOnInit()&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.comVar);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以在浏览器控制台中看到输出 <code>父组件模板变量</code><br>上面的变量是在模板中定义，也可以采用 <code>Angular</code> 的属性绑定机制，在父组件 <code>parent.component.ts</code> 中定义数据，在模板 <code>parent.component.html</code> 中使用，代码如下所示<br>parent.component.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">..... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">comVar=<span class=\"string\">'父组件变量'</span></span><br></pre></td></tr></table></figure></p>\n<p>parent.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> [<span class=\"attr\">varParent</span>]=<span class=\"string\">\"comVar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>其子组件代码如下所示<br>child.component.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; OnInit, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">..... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Input</span>() varParent: <span class=\"built_in\">string</span>=<span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ngOnInit()&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.varParent);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以在浏览器的控制台中看到输出 <code>父组件变量</code></p>\n<h3 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"@Output\"></a>@Output</h3><p><code>@Output</code> 的本质是事件机制，我们用它来监听子组件中的事件，即子组件发生了某个事件，通知父组件，代码如下所示<br>child.component.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; EventEmitter, Output &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">childStr:<span class=\"built_in\">string</span>= <span class=\"string\">'子组件字符串'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Output</span>() childEvent=<span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\"></span><br><span class=\"line\">doEmit()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.childEvent.emit(<span class=\"keyword\">this</span>.childStr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>child.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"doEmit()\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-success\"</span>&gt;</span>派发事件<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其父组件代码如下所示<br>parent.component.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> (<span class=\"attr\">event</span>)=<span class=\"string\">\"childEvent($event)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>parent.component.ts</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">childEvent(event)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在浏览器中，点击子组件的 <code>派发事件</code> 按钮，可以在控制台看到输出 <code>子组件字符串</code> ，并且每点击一次，其父组件就会在控制台输出一次。</p>\n<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h2><p>服务（<code>Angular6</code> 版本）通讯模式如下图所示</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/angular-service.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"Service优点\"><a href=\"#Service优点\" class=\"headerlink\" title=\"Service优点\"></a>Service优点</h3><p>很明显，上述两种 <strong>直接调用</strong> 和 <strong>Input 和 Output</strong> 组件间的通讯方式有一定的局限，即组件间的关系必须是父组件和子组件。在完整 <code>Angular</code> 项目中，组件与组件之间可能不存在直接关系，但组件之间需要进行通讯，这时就需要使用 <code>Angular</code> 提供的 <code>service</code> 功能，使用 <code>service</code> ，在同一个项目中，各个组件之间都可以进行通讯。</p>\n<h3 id=\"版本区别\"><a href=\"#版本区别\" class=\"headerlink\" title=\"版本区别\"></a>版本区别</h3><p>在 <code>Angular6</code> 版本以前，<code>Angular</code> 的服务（<code>service</code>）采用的是 <code>依赖注入</code> 方式，而 <code>Angular6</code> 版本采用的是 <code>相依注入</code> 方式。</p>\n<h3 id=\"依赖注入（Angular5）\"><a href=\"#依赖注入（Angular5）\" class=\"headerlink\" title=\"依赖注入（Angular5）\"></a>依赖注入（Angular5）</h3><p>由于依赖注入存在于 <code>Angular6</code> 版本以前，而且 <code>Angular7</code> 版本也出来不久，一般开发项目都是采用最新技术，所以关于 <code>依赖注入</code> 可以了解一下，看其使用机制。代码如下所示<br>定义一个服务 <code>CommunicateService</code><br>communicate.service.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Subject &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/Subject'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/Observable'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CommunicateService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> eventBus=<span class=\"keyword\">new</span> Subject&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在组件中使用该服务需要在组件所在模块中配置注入器（也可以在组件中配置），其代码如下所示<br>app.module.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./communicate.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">providers: [CommunicateService],</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br></pre></td></tr></table></figure></p>\n<p>在A组件中，使用该服务（<code>service</code>）<br>A.component.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../communicate.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> setEventBus():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.communicateService.eventBus.next(<span class=\"string\">\"触发service\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>A组件模板代码如下所示<br>A.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"setEventBus()\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-success\"</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在B组件中，使用该服务（<code>service</code>）<br>B.component.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../communicate.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> communicateService:CommunicateService</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ngOnInit() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.communicateService.eventBus.subscribe(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>点击A组件模板中的 <code>点击</code> 按钮，可以在控制台输出 <code>触发service</code> ，而且这是由B组件输出A组件中定义的值，即实现了通讯。</p>\n<h3 id=\"相依注入（Angular6）\"><a href=\"#相依注入（Angular6）\" class=\"headerlink\" title=\"相依注入（Angular6）\"></a>相依注入（Angular6）</h3><p>在 <code>Angular6</code> 版本中，对于 <code>Service</code> ，框架采用了相依注入的模式。即在 <code>Angular5</code> 版本中的配置注入器由框架自动完成。其代码如下所示<br>communicate.service.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Subject &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/Subject'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  providedIn: <span class=\"string\">'root'</span> <span class=\"comment\">//与Angular5版本的区别</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CommunicateService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> eventBus=<span class=\"keyword\">new</span> Subject&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在上述代码中，<code>provideIn</code> 为 <code>root</code>，即在项目中各个组件都可以使用该服务，若只想在某个模块中使用该服务，在服务中引入模块名，将代码中的 <code>root</code> 改成 <code>模块名</code> 即可。<br>在A组件中，使用该服务（<code>service</code>）<br>A.component.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../communicate.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> setEventBus():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.communicateService.eventBus.next(<span class=\"string\">\"触发service\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>A组件模板代码如下所示<br>A.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"setEventBus()\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-success\"</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在B组件中，使用该服务（<code>service</code>）<br>B.component.ts<br><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommunicateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../communicate.service'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> communicateService:CommunicateService</span>) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ngOnInit() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.communicateService.eventBus.subscribe(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>点击 <code>A组件</code> 模板中的 <code>点击</code> 按钮，可以在控制台输出 <code>触发service</code> ，而且这是由 <code>B组件</code> 输出 <code>A组件</code> 中定义的值，即实现了通讯。</p>\n<h2 id=\"cookie-或-localstorage\"><a href=\"#cookie-或-localstorage\" class=\"headerlink\" title=\"cookie 或 localstorage\"></a>cookie 或 localstorage</h2><p>组件与组件间的通讯也可以使用浏览器的自带功能，即 <code>cookie</code> 或 <code>localstorage</code>，其模式如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/angular-cl.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在A组件中写入 <code>cookie</code> 或 <code>localstorage</code> 代码如下所示<br>A.component.ts<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">.... <span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> setLocal():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.localStorage.setItem(<span class=\"string\">\"json\"</span>,<span class=\"built_in\">JSON</span>.stringify(&#123;name:<span class=\"string\">'jack'</span>,age:<span class=\"number\">24</span>&#125;));</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>A模板代码如下所示<br>A.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"setLocal()\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-success\"</span>&gt;</span>设置localstorage<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在B组件中获取 <code>cookie</code> 或 <code>localstorage</code> 代码如下所示<br>B.component.ts<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> conLocal():<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> json=<span class=\"built_in\">window</span>.localStorage.getItem(<span class=\"string\">\"json\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj=<span class=\"built_in\">JSON</span>.parse(json);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>B组件模板代码如下所示<br>B.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"conLocal()\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-success\"</span>&gt;</span>输出localstorage<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在浏览器中，点击A组件中 <code>设置localstorage</code> 按钮，然后点击B组件中 <code>输出localstorage</code> 按钮，可以在控制台输出A组件中设置的 <code>json</code> 对象，即采用 <code>cookie</code> 或 <code>localstorage</code> 的通讯方式成功。</p>\n<h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><p>利用session在组件间的通讯模式如下图所示</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/angular-session.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p><code>Session</code>:在计算机中，尤其是在网络应用中，称为“会话控制”。<code>Session</code>  对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 <code>Web</code> 页之间跳转时，存储在 <code>Session</code>  对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。</p>\n"},{"title":"Angular教程-3-生命周期钩子","_content":"在`Angular` 中，每个组件都有一个被 `Angular` 管理的生命周期。\n\n`Angular` 提供了生命周期钩子，把这些关键生命时刻（新建、更新和销毁）暴露出来，赋予开发者在它们发生时采取行动的能力。\n\n除了组件具有生命周期钩子外，指令同样也具有生命周期钩子。\n\n**注意：**指令不能实现带有 `content` 和 `view` 相关的钩子，因为在 `Angular2` 以后，指令不存在UI视图，即和 `content` 以及 `view` 没有关系。\n`Angular` 组件的生命周期钩子如下图所示。\n\n![](https://bingolil.github.io/images/angular-gouzi.png)\n\n如图所示，`Angular` 组件的生命周期钩子执行顺序从图中的1到8，但没有一个组件或指令会实现全部的生命周期钩子。\n其中青色的钩子可能在生命周期中执行多次，紫色的钩子在生命周期中只能执行一次。\n## ngOnChanges\n> 适用于组件和指令\n\n`ngOnChanges` 钩子只有存在输入属性（`@Input`）时才能调用，如果不存在该属性，则不能调用该钩子。`ngOnChanges` 钩子在生命周期中可以被多次调用，但其第一次被调用发生 `ngOnInit` 钩子之前。\n### 触发条件\n一旦检测到该组件(或指令)的**输入属性**（`@Input`）发生了变化，`Angular` 组件就会调用 `ngOnChanges` 钩子 。\n**注意：**若输入属性是一个对象，对象的某个属性的值变化时，不会触发这个钩子，只有该对象引用发生变化时，才会触发这个钩子。\n### 用处\n`ngOnChanges` 在项目中用到地方不多。其相当于实现了 `angularjs` 的 `$scope.watch()` 功能。\n### 示例\n1，组件中有且只有1个 `@Input` 输入属性，且不为对象\n\n代码如下所示\nparent.component.html\n```HTML\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"parVar\">\n</div>\n<hr>\n<app-child [comVar]=\"parVar\"></app-child>\n```\n\nchild.component.ts\n```typescript\nimport { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\n\n....//代码块\n                    //使用钩子，需要继承钩子的接口\nexport class ChildComponent implements OnInit,OnChanges {\n  @Input() comVar:string;\n  constructor() { }\n  ngOnInit() {\n    console.log('A')\n  }\n  //ngOnChanges钩子变化的信息存储在SimpleChanges对象里面\n  ngOnChanges(changes: SimpleChanges) {\n    console.log(changes);\n  }\n}\n```\n\n在浏览器中打开本地4200端口地址，按键盘上的 `f12`进入浏览器控制台，可以看见先输出 `SimpleChanges` 对象，该对象有一个 `comVar` 属性，这个`comVar` 属性的值是一个对象，该对象存储了3个属性，即 `comVar` 变量的当前值，前一个值和 `firstChange`（是否第一次改变，`boolean` 类型，`true` 代表第一次改变，`false` 代表不是第一次），然后才输出 `ngOnIint` 钩子中的 `A` 。\n\n当在页面中的 `input框` 输入值的时候，`app-child` 组件的输入值发生了改变，触发了 `ngOnChanges` 钩子，控制台会出 `SimpleChanges` 对象，其属性 `comVar` 的值还是3个，即 `comVar` 的当前值，前一个值和 `firstChange`。\n\n**即 `ngOnChanges` 钩子第一次被调用发生调用 `ngOnInit` 钩子之前，`ngOnChanges` 钩子可能被多次调用**\n\n2，组件中有且只有多个 `@Input` 输入属性，且不为对象\n其代码如下所示\nparent.component.html\n```HTML\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"parVar1\">\n</div>\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"parVar2\">\n</div>\n<hr>\n<app-child [comVar1]=\"parVar1\" [comVar2]=\"parVar2\"></app-child>\n```\n\nchild.component.ts\n```typescript\nimport { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\n\n..../代码块\n\nexport class ChildComponent implements OnInit,OnChanges {\n  @Input() comVar1:string;\n  @Input() comVar2:string;\n  constructor() { }\n  ngOnInit() {\n  }\n  ngOnChanges(changes: SimpleChanges) {\n    console.log(changes);\n  }\n}\n```\n\n在浏览器控制台中，可以看到输出的 `SimpleChanges` 对象，该对象有两个属性，分别是 `comVar1` 和 `comVar2` ，这两个属性的值为对象，分别存放着输入属性 `comVar1` 和 `comVar2` 的当前值，前一个值和 `firstChange`。\n\n**注意：** 在 `input` 改变时，控制台输出的 `SimpleChanges` 对象只有当前绑定的值的属性，不会输出其它绑定绑定值的属性，因为其它绑定值的没有发生变化。\n\n## ngOnInit\n> 适用于组件和指令\n\n`ngOnInit` 钩子在组件中已经被 `Angular` 默认实现了，`ngOnInit` 在 `Angular` 中被使用的次数最多，其在第一次 `ngOnChanges` 之后被调用。\n\n在 `Angular` 中，`ngOnInit` 钩子主要的作用就是：\n1. 在构造函数后马上执行复杂的初始化逻辑；\n2. 在 `Angular` 设置完输入属性之后，对该组件进行准备。\n\n## ngDoCheck\n> 适用于组件和指令\n\n### 变更检测\n变更检测就是 `Angular` 检测视图和数据模型之间绑定的值是否发生了改变，当检测到模型中绑定的值发生改变时，同步到UI视图上。\n>* `Angular` 的变更检测是通过 zone.js 库来实现的，保证组件的变化和UI视图一致\n>* 组件中的任何异步事件都会触发变更检测\n>* 每个组件都有独属于自己的变更检测器，当任何一个变更检测器检测到变化，zone.js 库会根据 `变更检测策略` 来检测组件，以判断组件是否需要更新模板。\n\n### Angular变更检测策略\n\n`Angular` 有两种变更检测策略，分别是 `Default` 策略和 `OnPush` 策略。\n\n>Default策略\n    `Default` 策略是 `Angular` 默认的变更检测策略，该策略会在发生变更时，`zone.js` 会检测所有的组件。\n\n>OnPush策略\n    `Onpush`策略的组件只有输入属性（@Input）发生改变时，才会检测该组件及其子组件。如果所有的组件都采用 `Default` 策略，当某个组件的变更检测器检测到变化，`zone.js` 会检测整个组件树，但它会跳过使用 `OnPush` 策略的组件。\n### ngDoCheck和变更检测\n>触发变更检测机制时会调用 `ngDoCheck` 钩子\n\n### 示例\n在 `ngOnChanges` 钩子中，若 `@Input` 输入属性是一个对象，修改该对象某个属性的值，不会触发 `ngOnChanges` 钩子，但其会触发 `ngDoCheck` 钩子，开发者可以利用这个钩子做开发者需要做的事情。其代码如下所示\npar.component.ts\n```typescript\n....//代码块\n  User={ //定义一个对象\n    par1:null,\n    par2:null\n  }\n```\n\npar.component.html\n```HTML\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"User.parVar1\">\n</div>\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"User.parVar2\">\n</div>\n<hr>\n<app-child [comObj]=\"User\"></app-child>\n```\n\nchild.component.ts\n```typescript\nimport { Component, OnInit, Input, OnChanges, DoCheck } from '@angular/core';\n\n....//代码块\n\nexport class ChildComponent implements OnInit,OnChanges,DoCheck {\n  @Input() comObj:any;\n \n ....//代码块\n \n  ngOnChanges() {\n    console.log('触发了ngOnChanges钩子')\n  }\n  ngDoCheck(){\n    console.log('发生了变更检测');\n  }\n}\n```\n\n在浏览器中打开本地4200端口地址，进入浏览器控制台，可以看到在浏览器中输出了 `触发了ngOnChanges钩子` 和 `发生了变更检测` ，不断改变页面中 `input` 框（两个 `input` ，随便哪一个都可以）的值，可以看到在控制台中，不断的输出 `发生了变更检测` ，但控制台中不会再输出 `触发了ngOnChanges钩子`，因为 `User` 输入对象引用没有发生改变，不会 `ngOnChanges` 钩子。\n\n**注意：** 虽然 `Angular` 暴露了 `ngDoCheck` 钩子，但是由于 `ngDocheck` 钩子调用频繁，所以开发者尽量不要在 `ngDoCheck` 钩子中写入复杂的逻辑，否则会降低 `Angular` 项目的性能，影响用户体验。\n\n## ngAfterContentInit\n> 适用于组件\n\n在 `Angular` 的8个生命周期钩子中，带有 `view` 和 `content` 的4个钩子只适用于组件。其它的4个钩子适用于指令和组件。\n`ngAfterContentInit` 钩子只执行一次，在当把内容投影进组件之后调用这个钩子，在这个钩子里面可以访问被投影进来的组件。\n**注意：** 在组件中，若没有发生组件投影，`ngAfterContentInit`  钩子还是会执行。\n### 意义\n在传统的HTML页面中，标签可以嵌套标签，而在 `Angular` 中，可以把组件看成是标签，一般情况下是不能直接组件嵌套组件。`内容投影shadow` 实现了在 `Angular` 中可以组件嵌套组件。在投影组件时，开发者可能需要在组件投影后马上进行一些操作，可以使用 `ngAfterContentInit` 钩子。\n### 示例\napp.component.html\n```HTML\n<app-shadow-wrap> \n  <app-content-child></app-content-child> //被投影的组件\n</app-shadow-wrap>\n```\n\n在根组件中，页面UI代码如上所示，这时在页面中不会展示和 `app-content-child` 组件有关的UI内容\nshadow-wrap.conponent.html\n```HTML\n<div class=\"container\">\n  <h1>内容投影</h1>\n  <ng-content select=\"app-content-child\"></ng-content> \n</div>\n```\n\n在 `app-shadow-wrap` 组件的UI代码中， `<ng-content select=\"app-content-child\"></ng-content> ` 是占位符，这个占位符存放的就是根组件UI代码中的 `<app-content-child></app-content-child>` 组件，其通过 `<ng-content select=\"app-content-child\"></ng-content> ` 中的 `select` 属性的值来确定这个占位符展示组件投影中的哪一个组件。\n**注意：** `ng-content` 占位符中 `select` 属性还可以为类名，标签名和属性等。在该占位符中不应该有任何内容，若存在内容，也会被投影的组件内容覆盖。\n如下所示：\n```HTML\n<ng-content select=\".blue\"></ng-content>//匹配class名为blue的显示内容 \n<ng-content select=\"header\"></ng-content>//匹配header标签的显示内容 \n<ng-content select=\"[name]=red\"></ng-content>//匹配name属性值为red的显示内容\n```\n\ncontent-child.component.html\n```HTML\n<p>这儿是content-child组件</p>\n```\n\ncontent-child.component.ts\n\n```typescript\n....//代码块\npublic comVar(){\n  console.log(\"A\");\n}\n```\n\n到此，最基本的内容投影完成（关于内容投影，后面会讲解），假如开发者需要在 `shadow-wrap` 组件中访问 `content-child` 组件的值或者方法，可以通过调用 `ngAfterConentInit` 钩子实现。\n\nshadow-wrap.component.ts\n```typescript\nimport { Component, OnInit, ContentChild, AfterContentInit } from '@angular/core';\nimport { ContentChildComponent } from '../content-child/content-child.component';\n\n....//代码块\nexport class ShadowWrapComponent implements OnInit,AfterContentInit {\n  \n  @ContentChild(ContentChildComponent) child1:ContentChildComponent;\n\n  ....//代码块\n\n  ngAfterContentInit(){\n    this.child1.comVar();\n  }\n}\n\n```\n\n可以在控制台看到输出了 `A`，即在 `shadow-wrap` 组件中访问了 `content-child` 组件的public值或者方法。\n**注意：**如果组件中没有发生组件投影，那么就不需要实现这个生命周期钩子。\n\n### AfterContent 和 AfterView\n`AfterContent` 钩子和 `AfterView` 相似。关键的不同点是子组件的类型不同。\n\n>`AfterView 钩子`所关心的是 `ViewChildren`，这些子组件的元素标签会出现在该组件的模板里面。\n>`AfterContent 钩子` 所关心的是 `ContentChildren`，这些子组件被 `Angular` 投影进该组件中。\n\n## ngAfterContentChecked\n> 适用于组件\n\n代码结构和 `ngAfterContentInit` 相同，若被投影的组件发生了变更检测，需要在 `shadow-wrap` 组件中访问被投影组件 `content-child` 的公共属性或方法，这时开发者可以使用 `ngAfterContentChecked` 钩子查看被被投影组件的公共方法或属性。\n\n## ngAfterViewInit\n> 适用于组件\n\n在组件和其所有子组件相应的 `视图` 初始化之后执行 `ngAfterViewInit` 钩子，只执行一次。\n**注意：** 在执行 `ngAfterViewInit` 钩子时，说明组件的 `视图` 已经组装完毕，开发者不能在该钩子中修改和 `组件UI视图` 有关的属性。虽然在UI视图中显示修改成功，但浏览器控制台会报错。\n### 错误示例1-修改组件属性\n view-init.component.ts\n \n```typescript\n....//代码块\n  look:string='jackyy';\n  ngAfterViewInit(){\n    this.look='loook at';\n  }\n```\n\nview-init.component.html\n```HTML\n<div>{{look}}</div>\n```\n\n其控制台台报错如下图所示\n\n![](https://bingolil.github.io/images/angular-ngVInitError.png)\n\n**结论：** 在一个变更检测周期中禁止一个视图被组装好之后再去更新视图。\n\n在带有 `view` 的生命周期钩子（`ngAfterViewInit` 和 `ngAfterViewChecked`）中，禁止更新视图。在上面的 `示例` 中，若属性 `look` 没有出现在 `组件UI视图` 中，即修改 `look` 属性，不会更新 `组件UI视图`，那么浏览器控制台不会报错。\n \n## ngAfterViewChecked\n> 适用于组件\n\n在 `Angular` 检查完组件中的绑定后调用 `ngAfterViewChecked` 钩子，在该钩子中，和 `ngAfterViewInit` 钩子一样，禁止开发者更新视图。\n\n**注意：** 当父组和子组件都有该钩子时，子组件的该钩子先于父组件的该钩子执行。\n\n每次执行该钩子，组件的 `UI视图` 更新完一次，可以在这个钩子中实时获取组件中某个 `DOM` 元素的信息，比如其在页面中的位置，高度或宽度等。\n## ngOnDestory\n> 适用于组件和指令\n\n在 `ngOnDestory` 钩子中，代表组件或指令的生命周期来到了销毁之前，在该钩子中，开发者一般都是解绑事件或者取消订阅，或者清除定时器。\n> **解绑事件：** 比如开发者在某个组件中使用了 `jquery` 绑定了一个点击页面 `body` 事件，路由进入到其它页面中时，不需要这个点击事件，但由于 `Angular` 路由切换机制，会保留这个点击事件，这就需要在组件中的 `ngOnDestory` 钩子里面解除绑定的点击事件，即该组件被销毁后，不会存在点击 `body` 事件。清除定时器的思路和解绑事件的思路一样。\n\n> **取消订阅：** 在 `Angular` 项目中，组件间的通讯有一部分是 `订阅对象` 完成，为了提升用户体验和项目性能，需要取消订阅。\n\n取消订阅代码如下所示：\n\n```typescript\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router'\nimport { Subscription } from 'rxjs';\n\n....//代码块\n  \n  subscription:Subscription\n  constructor(private routeInfo: ActivatedRoute, private){}\n  ngOnInit(){                         //订阅路由参数\n    this.subscription = this.routeInfo.queryParams.subscribe((data)=>{\n      ....//代码块\n    })\n  }\n  ngOnDestroy() { //取消订阅\n    this.subscription.unsubscribe();\n  }\n\n```\n\n## 生命周期钩子总结\n### 初始化阶段\n在组件的生命周期中，组件的初始化由一个构造函数3个生命周期钩子完成\n> `构造函数`：初始化对象\n> `ngOnChanges`：初始化组件输入属性 (@Input)\n> `ngOnInit`：初始化除了输入属性外的所有属性\n> `ngDoCheck`：做一次变更检查\n\n### 渲染阶段\n组件初始化完成后，开始渲染UI视图，首先渲染的就是被投影进来的内容，如果被投影的内容渲染完毕后，会调用 `ngAfterContentInit` 钩子和 `ngAfterContentChecked` 钩子，被投影的内容渲染完毕后，开始渲染组件的内容，当组件内容也渲染完毕后，会调用 `ngAfterViewInit` 钩子和 `ngAfterViewChecked`钩子。\n\n至此，组件的渲染完毕，组件进入存活阶段，即与用户的交互阶段。\n\n### 存活阶段\n在组件的存活阶段，由于用户和组件发生了交互，该阶段主要由4个生命周期钩子完成。\n\n> `ngOnChanges`：发生交互，组件的输入属性改变，会触发该钩子。\n> `ngDoCheck`：数据每发生一个变化，会触发一次变更检测，会调用一次该钩子。\n> `ngAfterContentChecked`：被投影的内容每发生一次变更检测，会调用一次该钩子。\n> `ngAfterViewChecked`：每发生一次视图更新，会调用一次该钩子。\n\n### 销毁阶段\n组件进入销毁阶段，就只有一个钩子 `ngOnDestory` 被调用，在该钩子中，一般都是销毁一些引用的资源，比如取消订阅，清除定时器，解除绑定事件等。","source":"_posts/angular/learn-3.md","raw":"title: Angular教程-3-生命周期钩子\n\ncategories: Angular\n\ntags: [Angular,Angular生命周期钩子]\n\n---\n在`Angular` 中，每个组件都有一个被 `Angular` 管理的生命周期。\n\n`Angular` 提供了生命周期钩子，把这些关键生命时刻（新建、更新和销毁）暴露出来，赋予开发者在它们发生时采取行动的能力。\n\n除了组件具有生命周期钩子外，指令同样也具有生命周期钩子。\n\n**注意：**指令不能实现带有 `content` 和 `view` 相关的钩子，因为在 `Angular2` 以后，指令不存在UI视图，即和 `content` 以及 `view` 没有关系。\n`Angular` 组件的生命周期钩子如下图所示。\n\n![](https://bingolil.github.io/images/angular-gouzi.png)\n\n如图所示，`Angular` 组件的生命周期钩子执行顺序从图中的1到8，但没有一个组件或指令会实现全部的生命周期钩子。\n其中青色的钩子可能在生命周期中执行多次，紫色的钩子在生命周期中只能执行一次。\n## ngOnChanges\n> 适用于组件和指令\n\n`ngOnChanges` 钩子只有存在输入属性（`@Input`）时才能调用，如果不存在该属性，则不能调用该钩子。`ngOnChanges` 钩子在生命周期中可以被多次调用，但其第一次被调用发生 `ngOnInit` 钩子之前。\n### 触发条件\n一旦检测到该组件(或指令)的**输入属性**（`@Input`）发生了变化，`Angular` 组件就会调用 `ngOnChanges` 钩子 。\n**注意：**若输入属性是一个对象，对象的某个属性的值变化时，不会触发这个钩子，只有该对象引用发生变化时，才会触发这个钩子。\n### 用处\n`ngOnChanges` 在项目中用到地方不多。其相当于实现了 `angularjs` 的 `$scope.watch()` 功能。\n### 示例\n1，组件中有且只有1个 `@Input` 输入属性，且不为对象\n\n代码如下所示\nparent.component.html\n```HTML\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"parVar\">\n</div>\n<hr>\n<app-child [comVar]=\"parVar\"></app-child>\n```\n\nchild.component.ts\n```typescript\nimport { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\n\n....//代码块\n                    //使用钩子，需要继承钩子的接口\nexport class ChildComponent implements OnInit,OnChanges {\n  @Input() comVar:string;\n  constructor() { }\n  ngOnInit() {\n    console.log('A')\n  }\n  //ngOnChanges钩子变化的信息存储在SimpleChanges对象里面\n  ngOnChanges(changes: SimpleChanges) {\n    console.log(changes);\n  }\n}\n```\n\n在浏览器中打开本地4200端口地址，按键盘上的 `f12`进入浏览器控制台，可以看见先输出 `SimpleChanges` 对象，该对象有一个 `comVar` 属性，这个`comVar` 属性的值是一个对象，该对象存储了3个属性，即 `comVar` 变量的当前值，前一个值和 `firstChange`（是否第一次改变，`boolean` 类型，`true` 代表第一次改变，`false` 代表不是第一次），然后才输出 `ngOnIint` 钩子中的 `A` 。\n\n当在页面中的 `input框` 输入值的时候，`app-child` 组件的输入值发生了改变，触发了 `ngOnChanges` 钩子，控制台会出 `SimpleChanges` 对象，其属性 `comVar` 的值还是3个，即 `comVar` 的当前值，前一个值和 `firstChange`。\n\n**即 `ngOnChanges` 钩子第一次被调用发生调用 `ngOnInit` 钩子之前，`ngOnChanges` 钩子可能被多次调用**\n\n2，组件中有且只有多个 `@Input` 输入属性，且不为对象\n其代码如下所示\nparent.component.html\n```HTML\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"parVar1\">\n</div>\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"parVar2\">\n</div>\n<hr>\n<app-child [comVar1]=\"parVar1\" [comVar2]=\"parVar2\"></app-child>\n```\n\nchild.component.ts\n```typescript\nimport { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\n\n..../代码块\n\nexport class ChildComponent implements OnInit,OnChanges {\n  @Input() comVar1:string;\n  @Input() comVar2:string;\n  constructor() { }\n  ngOnInit() {\n  }\n  ngOnChanges(changes: SimpleChanges) {\n    console.log(changes);\n  }\n}\n```\n\n在浏览器控制台中，可以看到输出的 `SimpleChanges` 对象，该对象有两个属性，分别是 `comVar1` 和 `comVar2` ，这两个属性的值为对象，分别存放着输入属性 `comVar1` 和 `comVar2` 的当前值，前一个值和 `firstChange`。\n\n**注意：** 在 `input` 改变时，控制台输出的 `SimpleChanges` 对象只有当前绑定的值的属性，不会输出其它绑定绑定值的属性，因为其它绑定值的没有发生变化。\n\n## ngOnInit\n> 适用于组件和指令\n\n`ngOnInit` 钩子在组件中已经被 `Angular` 默认实现了，`ngOnInit` 在 `Angular` 中被使用的次数最多，其在第一次 `ngOnChanges` 之后被调用。\n\n在 `Angular` 中，`ngOnInit` 钩子主要的作用就是：\n1. 在构造函数后马上执行复杂的初始化逻辑；\n2. 在 `Angular` 设置完输入属性之后，对该组件进行准备。\n\n## ngDoCheck\n> 适用于组件和指令\n\n### 变更检测\n变更检测就是 `Angular` 检测视图和数据模型之间绑定的值是否发生了改变，当检测到模型中绑定的值发生改变时，同步到UI视图上。\n>* `Angular` 的变更检测是通过 zone.js 库来实现的，保证组件的变化和UI视图一致\n>* 组件中的任何异步事件都会触发变更检测\n>* 每个组件都有独属于自己的变更检测器，当任何一个变更检测器检测到变化，zone.js 库会根据 `变更检测策略` 来检测组件，以判断组件是否需要更新模板。\n\n### Angular变更检测策略\n\n`Angular` 有两种变更检测策略，分别是 `Default` 策略和 `OnPush` 策略。\n\n>Default策略\n    `Default` 策略是 `Angular` 默认的变更检测策略，该策略会在发生变更时，`zone.js` 会检测所有的组件。\n\n>OnPush策略\n    `Onpush`策略的组件只有输入属性（@Input）发生改变时，才会检测该组件及其子组件。如果所有的组件都采用 `Default` 策略，当某个组件的变更检测器检测到变化，`zone.js` 会检测整个组件树，但它会跳过使用 `OnPush` 策略的组件。\n### ngDoCheck和变更检测\n>触发变更检测机制时会调用 `ngDoCheck` 钩子\n\n### 示例\n在 `ngOnChanges` 钩子中，若 `@Input` 输入属性是一个对象，修改该对象某个属性的值，不会触发 `ngOnChanges` 钩子，但其会触发 `ngDoCheck` 钩子，开发者可以利用这个钩子做开发者需要做的事情。其代码如下所示\npar.component.ts\n```typescript\n....//代码块\n  User={ //定义一个对象\n    par1:null,\n    par2:null\n  }\n```\n\npar.component.html\n```HTML\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"User.parVar1\">\n</div>\n<div class=\"form-group\">\n  <input type=\"text\" class=\"form-control\" [(ngModel)]=\"User.parVar2\">\n</div>\n<hr>\n<app-child [comObj]=\"User\"></app-child>\n```\n\nchild.component.ts\n```typescript\nimport { Component, OnInit, Input, OnChanges, DoCheck } from '@angular/core';\n\n....//代码块\n\nexport class ChildComponent implements OnInit,OnChanges,DoCheck {\n  @Input() comObj:any;\n \n ....//代码块\n \n  ngOnChanges() {\n    console.log('触发了ngOnChanges钩子')\n  }\n  ngDoCheck(){\n    console.log('发生了变更检测');\n  }\n}\n```\n\n在浏览器中打开本地4200端口地址，进入浏览器控制台，可以看到在浏览器中输出了 `触发了ngOnChanges钩子` 和 `发生了变更检测` ，不断改变页面中 `input` 框（两个 `input` ，随便哪一个都可以）的值，可以看到在控制台中，不断的输出 `发生了变更检测` ，但控制台中不会再输出 `触发了ngOnChanges钩子`，因为 `User` 输入对象引用没有发生改变，不会 `ngOnChanges` 钩子。\n\n**注意：** 虽然 `Angular` 暴露了 `ngDoCheck` 钩子，但是由于 `ngDocheck` 钩子调用频繁，所以开发者尽量不要在 `ngDoCheck` 钩子中写入复杂的逻辑，否则会降低 `Angular` 项目的性能，影响用户体验。\n\n## ngAfterContentInit\n> 适用于组件\n\n在 `Angular` 的8个生命周期钩子中，带有 `view` 和 `content` 的4个钩子只适用于组件。其它的4个钩子适用于指令和组件。\n`ngAfterContentInit` 钩子只执行一次，在当把内容投影进组件之后调用这个钩子，在这个钩子里面可以访问被投影进来的组件。\n**注意：** 在组件中，若没有发生组件投影，`ngAfterContentInit`  钩子还是会执行。\n### 意义\n在传统的HTML页面中，标签可以嵌套标签，而在 `Angular` 中，可以把组件看成是标签，一般情况下是不能直接组件嵌套组件。`内容投影shadow` 实现了在 `Angular` 中可以组件嵌套组件。在投影组件时，开发者可能需要在组件投影后马上进行一些操作，可以使用 `ngAfterContentInit` 钩子。\n### 示例\napp.component.html\n```HTML\n<app-shadow-wrap> \n  <app-content-child></app-content-child> //被投影的组件\n</app-shadow-wrap>\n```\n\n在根组件中，页面UI代码如上所示，这时在页面中不会展示和 `app-content-child` 组件有关的UI内容\nshadow-wrap.conponent.html\n```HTML\n<div class=\"container\">\n  <h1>内容投影</h1>\n  <ng-content select=\"app-content-child\"></ng-content> \n</div>\n```\n\n在 `app-shadow-wrap` 组件的UI代码中， `<ng-content select=\"app-content-child\"></ng-content> ` 是占位符，这个占位符存放的就是根组件UI代码中的 `<app-content-child></app-content-child>` 组件，其通过 `<ng-content select=\"app-content-child\"></ng-content> ` 中的 `select` 属性的值来确定这个占位符展示组件投影中的哪一个组件。\n**注意：** `ng-content` 占位符中 `select` 属性还可以为类名，标签名和属性等。在该占位符中不应该有任何内容，若存在内容，也会被投影的组件内容覆盖。\n如下所示：\n```HTML\n<ng-content select=\".blue\"></ng-content>//匹配class名为blue的显示内容 \n<ng-content select=\"header\"></ng-content>//匹配header标签的显示内容 \n<ng-content select=\"[name]=red\"></ng-content>//匹配name属性值为red的显示内容\n```\n\ncontent-child.component.html\n```HTML\n<p>这儿是content-child组件</p>\n```\n\ncontent-child.component.ts\n\n```typescript\n....//代码块\npublic comVar(){\n  console.log(\"A\");\n}\n```\n\n到此，最基本的内容投影完成（关于内容投影，后面会讲解），假如开发者需要在 `shadow-wrap` 组件中访问 `content-child` 组件的值或者方法，可以通过调用 `ngAfterConentInit` 钩子实现。\n\nshadow-wrap.component.ts\n```typescript\nimport { Component, OnInit, ContentChild, AfterContentInit } from '@angular/core';\nimport { ContentChildComponent } from '../content-child/content-child.component';\n\n....//代码块\nexport class ShadowWrapComponent implements OnInit,AfterContentInit {\n  \n  @ContentChild(ContentChildComponent) child1:ContentChildComponent;\n\n  ....//代码块\n\n  ngAfterContentInit(){\n    this.child1.comVar();\n  }\n}\n\n```\n\n可以在控制台看到输出了 `A`，即在 `shadow-wrap` 组件中访问了 `content-child` 组件的public值或者方法。\n**注意：**如果组件中没有发生组件投影，那么就不需要实现这个生命周期钩子。\n\n### AfterContent 和 AfterView\n`AfterContent` 钩子和 `AfterView` 相似。关键的不同点是子组件的类型不同。\n\n>`AfterView 钩子`所关心的是 `ViewChildren`，这些子组件的元素标签会出现在该组件的模板里面。\n>`AfterContent 钩子` 所关心的是 `ContentChildren`，这些子组件被 `Angular` 投影进该组件中。\n\n## ngAfterContentChecked\n> 适用于组件\n\n代码结构和 `ngAfterContentInit` 相同，若被投影的组件发生了变更检测，需要在 `shadow-wrap` 组件中访问被投影组件 `content-child` 的公共属性或方法，这时开发者可以使用 `ngAfterContentChecked` 钩子查看被被投影组件的公共方法或属性。\n\n## ngAfterViewInit\n> 适用于组件\n\n在组件和其所有子组件相应的 `视图` 初始化之后执行 `ngAfterViewInit` 钩子，只执行一次。\n**注意：** 在执行 `ngAfterViewInit` 钩子时，说明组件的 `视图` 已经组装完毕，开发者不能在该钩子中修改和 `组件UI视图` 有关的属性。虽然在UI视图中显示修改成功，但浏览器控制台会报错。\n### 错误示例1-修改组件属性\n view-init.component.ts\n \n```typescript\n....//代码块\n  look:string='jackyy';\n  ngAfterViewInit(){\n    this.look='loook at';\n  }\n```\n\nview-init.component.html\n```HTML\n<div>{{look}}</div>\n```\n\n其控制台台报错如下图所示\n\n![](https://bingolil.github.io/images/angular-ngVInitError.png)\n\n**结论：** 在一个变更检测周期中禁止一个视图被组装好之后再去更新视图。\n\n在带有 `view` 的生命周期钩子（`ngAfterViewInit` 和 `ngAfterViewChecked`）中，禁止更新视图。在上面的 `示例` 中，若属性 `look` 没有出现在 `组件UI视图` 中，即修改 `look` 属性，不会更新 `组件UI视图`，那么浏览器控制台不会报错。\n \n## ngAfterViewChecked\n> 适用于组件\n\n在 `Angular` 检查完组件中的绑定后调用 `ngAfterViewChecked` 钩子，在该钩子中，和 `ngAfterViewInit` 钩子一样，禁止开发者更新视图。\n\n**注意：** 当父组和子组件都有该钩子时，子组件的该钩子先于父组件的该钩子执行。\n\n每次执行该钩子，组件的 `UI视图` 更新完一次，可以在这个钩子中实时获取组件中某个 `DOM` 元素的信息，比如其在页面中的位置，高度或宽度等。\n## ngOnDestory\n> 适用于组件和指令\n\n在 `ngOnDestory` 钩子中，代表组件或指令的生命周期来到了销毁之前，在该钩子中，开发者一般都是解绑事件或者取消订阅，或者清除定时器。\n> **解绑事件：** 比如开发者在某个组件中使用了 `jquery` 绑定了一个点击页面 `body` 事件，路由进入到其它页面中时，不需要这个点击事件，但由于 `Angular` 路由切换机制，会保留这个点击事件，这就需要在组件中的 `ngOnDestory` 钩子里面解除绑定的点击事件，即该组件被销毁后，不会存在点击 `body` 事件。清除定时器的思路和解绑事件的思路一样。\n\n> **取消订阅：** 在 `Angular` 项目中，组件间的通讯有一部分是 `订阅对象` 完成，为了提升用户体验和项目性能，需要取消订阅。\n\n取消订阅代码如下所示：\n\n```typescript\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router'\nimport { Subscription } from 'rxjs';\n\n....//代码块\n  \n  subscription:Subscription\n  constructor(private routeInfo: ActivatedRoute, private){}\n  ngOnInit(){                         //订阅路由参数\n    this.subscription = this.routeInfo.queryParams.subscribe((data)=>{\n      ....//代码块\n    })\n  }\n  ngOnDestroy() { //取消订阅\n    this.subscription.unsubscribe();\n  }\n\n```\n\n## 生命周期钩子总结\n### 初始化阶段\n在组件的生命周期中，组件的初始化由一个构造函数3个生命周期钩子完成\n> `构造函数`：初始化对象\n> `ngOnChanges`：初始化组件输入属性 (@Input)\n> `ngOnInit`：初始化除了输入属性外的所有属性\n> `ngDoCheck`：做一次变更检查\n\n### 渲染阶段\n组件初始化完成后，开始渲染UI视图，首先渲染的就是被投影进来的内容，如果被投影的内容渲染完毕后，会调用 `ngAfterContentInit` 钩子和 `ngAfterContentChecked` 钩子，被投影的内容渲染完毕后，开始渲染组件的内容，当组件内容也渲染完毕后，会调用 `ngAfterViewInit` 钩子和 `ngAfterViewChecked`钩子。\n\n至此，组件的渲染完毕，组件进入存活阶段，即与用户的交互阶段。\n\n### 存活阶段\n在组件的存活阶段，由于用户和组件发生了交互，该阶段主要由4个生命周期钩子完成。\n\n> `ngOnChanges`：发生交互，组件的输入属性改变，会触发该钩子。\n> `ngDoCheck`：数据每发生一个变化，会触发一次变更检测，会调用一次该钩子。\n> `ngAfterContentChecked`：被投影的内容每发生一次变更检测，会调用一次该钩子。\n> `ngAfterViewChecked`：每发生一次视图更新，会调用一次该钩子。\n\n### 销毁阶段\n组件进入销毁阶段，就只有一个钩子 `ngOnDestory` 被调用，在该钩子中，一般都是销毁一些引用的资源，比如取消订阅，清除定时器，解除绑定事件等。","slug":"angular/learn-3","published":1,"date":"2018-11-23T03:28:19.396Z","updated":"2018-11-23T08:14:35.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjozdt9mw0006bgvcsnysu6nb","content":"<p>在<code>Angular</code> 中，每个组件都有一个被 <code>Angular</code> 管理的生命周期。</p>\n<p><code>Angular</code> 提供了生命周期钩子，把这些关键生命时刻（新建、更新和销毁）暴露出来，赋予开发者在它们发生时采取行动的能力。</p>\n<p>除了组件具有生命周期钩子外，指令同样也具有生命周期钩子。</p>\n<p><strong>注意：</strong>指令不能实现带有 <code>content</code> 和 <code>view</code> 相关的钩子，因为在 <code>Angular2</code> 以后，指令不存在UI视图，即和 <code>content</code> 以及 <code>view</code> 没有关系。<br><code>Angular</code> 组件的生命周期钩子如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/angular-gouzi.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>如图所示，<code>Angular</code> 组件的生命周期钩子执行顺序从图中的1到8，但没有一个组件或指令会实现全部的生命周期钩子。<br>其中青色的钩子可能在生命周期中执行多次，紫色的钩子在生命周期中只能执行一次。</p>\n<h2 id=\"ngOnChanges\"><a href=\"#ngOnChanges\" class=\"headerlink\" title=\"ngOnChanges\"></a>ngOnChanges</h2><blockquote>\n<p>适用于组件和指令</p>\n</blockquote>\n<p><code>ngOnChanges</code> 钩子只有存在输入属性（<code>@Input</code>）时才能调用，如果不存在该属性，则不能调用该钩子。<code>ngOnChanges</code> 钩子在生命周期中可以被多次调用，但其第一次被调用发生 <code>ngOnInit</code> 钩子之前。</p>\n<h3 id=\"触发条件\"><a href=\"#触发条件\" class=\"headerlink\" title=\"触发条件\"></a>触发条件</h3><p>一旦检测到该组件(或指令)的<strong>输入属性</strong>（<code>@Input</code>）发生了变化，<code>Angular</code> 组件就会调用 <code>ngOnChanges</code> 钩子 。<br><strong>注意：</strong>若输入属性是一个对象，对象的某个属性的值变化时，不会触发这个钩子，只有该对象引用发生变化时，才会触发这个钩子。</p>\n<h3 id=\"用处\"><a href=\"#用处\" class=\"headerlink\" title=\"用处\"></a>用处</h3><p><code>ngOnChanges</code> 在项目中用到地方不多。其相当于实现了 <code>angularjs</code> 的 <code>$scope.watch()</code> 功能。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>1，组件中有且只有1个 <code>@Input</code> 输入属性，且不为对象</p>\n<p>代码如下所示<br>parent.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"parVar\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> [<span class=\"attr\">comVar</span>]=<span class=\"string\">\"parVar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>child.component.ts<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, Input, OnChanges, SimpleChanges &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">                    <span class=\"comment\">//使用钩子，需要继承钩子的接口</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ChildComponent <span class=\"keyword\">implements</span> OnInit,OnChanges &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() comVar:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'A'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//ngOnChanges钩子变化的信息存储在SimpleChanges对象里面</span></span><br><span class=\"line\">  ngOnChanges(changes: SimpleChanges) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(changes);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器中打开本地4200端口地址，按键盘上的 <code>f12</code>进入浏览器控制台，可以看见先输出 <code>SimpleChanges</code> 对象，该对象有一个 <code>comVar</code> 属性，这个<code>comVar</code> 属性的值是一个对象，该对象存储了3个属性，即 <code>comVar</code> 变量的当前值，前一个值和 <code>firstChange</code>（是否第一次改变，<code>boolean</code> 类型，<code>true</code> 代表第一次改变，<code>false</code> 代表不是第一次），然后才输出 <code>ngOnIint</code> 钩子中的 <code>A</code> 。</p>\n<p>当在页面中的 <code>input框</code> 输入值的时候，<code>app-child</code> 组件的输入值发生了改变，触发了 <code>ngOnChanges</code> 钩子，控制台会出 <code>SimpleChanges</code> 对象，其属性 <code>comVar</code> 的值还是3个，即 <code>comVar</code> 的当前值，前一个值和 <code>firstChange</code>。</p>\n<p><strong>即 <code>ngOnChanges</code> 钩子第一次被调用发生调用 <code>ngOnInit</code> 钩子之前，<code>ngOnChanges</code> 钩子可能被多次调用</strong></p>\n<p>2，组件中有且只有多个 <code>@Input</code> 输入属性，且不为对象<br>其代码如下所示<br>parent.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"parVar1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"parVar2\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> [<span class=\"attr\">comVar1</span>]=<span class=\"string\">\"parVar1\"</span> [<span class=\"attr\">comVar2</span>]=<span class=\"string\">\"parVar2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>child.component.ts<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, Input, OnChanges, SimpleChanges &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">..../代码块</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ChildComponent <span class=\"keyword\">implements</span> OnInit,OnChanges &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() comVar1:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() comVar2:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  ngOnInit() &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ngOnChanges(changes: SimpleChanges) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(changes);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器控制台中，可以看到输出的 <code>SimpleChanges</code> 对象，该对象有两个属性，分别是 <code>comVar1</code> 和 <code>comVar2</code> ，这两个属性的值为对象，分别存放着输入属性 <code>comVar1</code> 和 <code>comVar2</code> 的当前值，前一个值和 <code>firstChange</code>。</p>\n<p><strong>注意：</strong> 在 <code>input</code> 改变时，控制台输出的 <code>SimpleChanges</code> 对象只有当前绑定的值的属性，不会输出其它绑定绑定值的属性，因为其它绑定值的没有发生变化。</p>\n<h2 id=\"ngOnInit\"><a href=\"#ngOnInit\" class=\"headerlink\" title=\"ngOnInit\"></a>ngOnInit</h2><blockquote>\n<p>适用于组件和指令</p>\n</blockquote>\n<p><code>ngOnInit</code> 钩子在组件中已经被 <code>Angular</code> 默认实现了，<code>ngOnInit</code> 在 <code>Angular</code> 中被使用的次数最多，其在第一次 <code>ngOnChanges</code> 之后被调用。</p>\n<p>在 <code>Angular</code> 中，<code>ngOnInit</code> 钩子主要的作用就是：</p>\n<ol>\n<li>在构造函数后马上执行复杂的初始化逻辑；</li>\n<li>在 <code>Angular</code> 设置完输入属性之后，对该组件进行准备。</li>\n</ol>\n<h2 id=\"ngDoCheck\"><a href=\"#ngDoCheck\" class=\"headerlink\" title=\"ngDoCheck\"></a>ngDoCheck</h2><blockquote>\n<p>适用于组件和指令</p>\n</blockquote>\n<h3 id=\"变更检测\"><a href=\"#变更检测\" class=\"headerlink\" title=\"变更检测\"></a>变更检测</h3><p>变更检测就是 <code>Angular</code> 检测视图和数据模型之间绑定的值是否发生了改变，当检测到模型中绑定的值发生改变时，同步到UI视图上。</p>\n<blockquote>\n<ul>\n<li><code>Angular</code> 的变更检测是通过 zone.js 库来实现的，保证组件的变化和UI视图一致</li>\n<li>组件中的任何异步事件都会触发变更检测</li>\n<li>每个组件都有独属于自己的变更检测器，当任何一个变更检测器检测到变化，zone.js 库会根据 <code>变更检测策略</code> 来检测组件，以判断组件是否需要更新模板。</li>\n</ul>\n</blockquote>\n<h3 id=\"Angular变更检测策略\"><a href=\"#Angular变更检测策略\" class=\"headerlink\" title=\"Angular变更检测策略\"></a>Angular变更检测策略</h3><p><code>Angular</code> 有两种变更检测策略，分别是 <code>Default</code> 策略和 <code>OnPush</code> 策略。</p>\n<blockquote>\n<p>Default策略<br>    <code>Default</code> 策略是 <code>Angular</code> 默认的变更检测策略，该策略会在发生变更时，<code>zone.js</code> 会检测所有的组件。</p>\n</blockquote>\n<blockquote>\n<p>OnPush策略<br>    <code>Onpush</code>策略的组件只有输入属性（@Input）发生改变时，才会检测该组件及其子组件。如果所有的组件都采用 <code>Default</code> 策略，当某个组件的变更检测器检测到变化，<code>zone.js</code> 会检测整个组件树，但它会跳过使用 <code>OnPush</code> 策略的组件。</p>\n</blockquote>\n<h3 id=\"ngDoCheck和变更检测\"><a href=\"#ngDoCheck和变更检测\" class=\"headerlink\" title=\"ngDoCheck和变更检测\"></a>ngDoCheck和变更检测</h3><blockquote>\n<p>触发变更检测机制时会调用 <code>ngDoCheck</code> 钩子</p>\n</blockquote>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>在 <code>ngOnChanges</code> 钩子中，若 <code>@Input</code> 输入属性是一个对象，修改该对象某个属性的值，不会触发 <code>ngOnChanges</code> 钩子，但其会触发 <code>ngDoCheck</code> 钩子，开发者可以利用这个钩子做开发者需要做的事情。其代码如下所示<br>par.component.ts<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">  User=&#123; <span class=\"comment\">//定义一个对象</span></span><br><span class=\"line\">    par1:<span class=\"literal\">null</span>,</span><br><span class=\"line\">    par2:<span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>par.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"User.parVar1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"User.parVar2\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> [<span class=\"attr\">comObj</span>]=<span class=\"string\">\"User\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>child.component.ts<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, Input, OnChanges, DoCheck &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ChildComponent <span class=\"keyword\">implements</span> OnInit,OnChanges,DoCheck &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() comObj:<span class=\"built_in\">any</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"> ....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  ngOnChanges() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发了ngOnChanges钩子'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ngDoCheck()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'发生了变更检测'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器中打开本地4200端口地址，进入浏览器控制台，可以看到在浏览器中输出了 <code>触发了ngOnChanges钩子</code> 和 <code>发生了变更检测</code> ，不断改变页面中 <code>input</code> 框（两个 <code>input</code> ，随便哪一个都可以）的值，可以看到在控制台中，不断的输出 <code>发生了变更检测</code> ，但控制台中不会再输出 <code>触发了ngOnChanges钩子</code>，因为 <code>User</code> 输入对象引用没有发生改变，不会 <code>ngOnChanges</code> 钩子。</p>\n<p><strong>注意：</strong> 虽然 <code>Angular</code> 暴露了 <code>ngDoCheck</code> 钩子，但是由于 <code>ngDocheck</code> 钩子调用频繁，所以开发者尽量不要在 <code>ngDoCheck</code> 钩子中写入复杂的逻辑，否则会降低 <code>Angular</code> 项目的性能，影响用户体验。</p>\n<h2 id=\"ngAfterContentInit\"><a href=\"#ngAfterContentInit\" class=\"headerlink\" title=\"ngAfterContentInit\"></a>ngAfterContentInit</h2><blockquote>\n<p>适用于组件</p>\n</blockquote>\n<p>在 <code>Angular</code> 的8个生命周期钩子中，带有 <code>view</code> 和 <code>content</code> 的4个钩子只适用于组件。其它的4个钩子适用于指令和组件。<br><code>ngAfterContentInit</code> 钩子只执行一次，在当把内容投影进组件之后调用这个钩子，在这个钩子里面可以访问被投影进来的组件。<br><strong>注意：</strong> 在组件中，若没有发生组件投影，<code>ngAfterContentInit</code>  钩子还是会执行。</p>\n<h3 id=\"意义\"><a href=\"#意义\" class=\"headerlink\" title=\"意义\"></a>意义</h3><p>在传统的HTML页面中，标签可以嵌套标签，而在 <code>Angular</code> 中，可以把组件看成是标签，一般情况下是不能直接组件嵌套组件。<code>内容投影shadow</code> 实现了在 <code>Angular</code> 中可以组件嵌套组件。在投影组件时，开发者可能需要在组件投影后马上进行一些操作，可以使用 <code>ngAfterContentInit</code> 钩子。</p>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>app.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-shadow-wrap</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-content-child</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-content-child</span>&gt;</span> //被投影的组件</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-shadow-wrap</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在根组件中，页面UI代码如上所示，这时在页面中不会展示和 <code>app-content-child</code> 组件有关的UI内容<br>shadow-wrap.conponent.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>内容投影<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">\"app-content-child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在 <code>app-shadow-wrap</code> 组件的UI代码中， <code>&lt;ng-content select=&quot;app-content-child&quot;&gt;&lt;/ng-content&gt;</code> 是占位符，这个占位符存放的就是根组件UI代码中的 <code>&lt;app-content-child&gt;&lt;/app-content-child&gt;</code> 组件，其通过 <code>&lt;ng-content select=&quot;app-content-child&quot;&gt;&lt;/ng-content&gt;</code> 中的 <code>select</code> 属性的值来确定这个占位符展示组件投影中的哪一个组件。<br><strong>注意：</strong> <code>ng-content</code> 占位符中 <code>select</code> 属性还可以为类名，标签名和属性等。在该占位符中不应该有任何内容，若存在内容，也会被投影的组件内容覆盖。<br>如下所示：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">\".blue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span>//匹配class名为blue的显示内容 </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span>//匹配header标签的显示内容 </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">\"[name]=red\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span>//匹配name属性值为red的显示内容</span><br></pre></td></tr></table></figure></p>\n<p>content-child.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这儿是content-child组件<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>content-child.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> comVar()&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到此，最基本的内容投影完成（关于内容投影，后面会讲解），假如开发者需要在 <code>shadow-wrap</code> 组件中访问 <code>content-child</code> 组件的值或者方法，可以通过调用 <code>ngAfterConentInit</code> 钩子实现。</p>\n<p>shadow-wrap.component.ts<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, ContentChild, AfterContentInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ContentChildComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../content-child/content-child.component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ShadowWrapComponent <span class=\"keyword\">implements</span> OnInit,AfterContentInit &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@ContentChild</span>(ContentChildComponent) child1:ContentChildComponent;</span><br><span class=\"line\"></span><br><span class=\"line\">  ....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">  ngAfterContentInit()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.child1.comVar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以在控制台看到输出了 <code>A</code>，即在 <code>shadow-wrap</code> 组件中访问了 <code>content-child</code> 组件的public值或者方法。<br><strong>注意：</strong>如果组件中没有发生组件投影，那么就不需要实现这个生命周期钩子。</p>\n<h3 id=\"AfterContent-和-AfterView\"><a href=\"#AfterContent-和-AfterView\" class=\"headerlink\" title=\"AfterContent 和 AfterView\"></a>AfterContent 和 AfterView</h3><p><code>AfterContent</code> 钩子和 <code>AfterView</code> 相似。关键的不同点是子组件的类型不同。</p>\n<blockquote>\n<p><code>AfterView 钩子</code>所关心的是 <code>ViewChildren</code>，这些子组件的元素标签会出现在该组件的模板里面。<br><code>AfterContent 钩子</code> 所关心的是 <code>ContentChildren</code>，这些子组件被 <code>Angular</code> 投影进该组件中。</p>\n</blockquote>\n<h2 id=\"ngAfterContentChecked\"><a href=\"#ngAfterContentChecked\" class=\"headerlink\" title=\"ngAfterContentChecked\"></a>ngAfterContentChecked</h2><blockquote>\n<p>适用于组件</p>\n</blockquote>\n<p>代码结构和 <code>ngAfterContentInit</code> 相同，若被投影的组件发生了变更检测，需要在 <code>shadow-wrap</code> 组件中访问被投影组件 <code>content-child</code> 的公共属性或方法，这时开发者可以使用 <code>ngAfterContentChecked</code> 钩子查看被被投影组件的公共方法或属性。</p>\n<h2 id=\"ngAfterViewInit\"><a href=\"#ngAfterViewInit\" class=\"headerlink\" title=\"ngAfterViewInit\"></a>ngAfterViewInit</h2><blockquote>\n<p>适用于组件</p>\n</blockquote>\n<p>在组件和其所有子组件相应的 <code>视图</code> 初始化之后执行 <code>ngAfterViewInit</code> 钩子，只执行一次。<br><strong>注意：</strong> 在执行 <code>ngAfterViewInit</code> 钩子时，说明组件的 <code>视图</code> 已经组装完毕，开发者不能在该钩子中修改和 <code>组件UI视图</code> 有关的属性。虽然在UI视图中显示修改成功，但浏览器控制台会报错。</p>\n<h3 id=\"错误示例1-修改组件属性\"><a href=\"#错误示例1-修改组件属性\" class=\"headerlink\" title=\"错误示例1-修改组件属性\"></a>错误示例1-修改组件属性</h3><p> view-init.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">  look:<span class=\"built_in\">string</span>=<span class=\"string\">'jackyy'</span>;</span><br><span class=\"line\">  ngAfterViewInit()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.look=<span class=\"string\">'loook at'</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>view-init.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;look&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>其控制台台报错如下图所示</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/angular-ngVInitError.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p><strong>结论：</strong> 在一个变更检测周期中禁止一个视图被组装好之后再去更新视图。</p>\n<p>在带有 <code>view</code> 的生命周期钩子（<code>ngAfterViewInit</code> 和 <code>ngAfterViewChecked</code>）中，禁止更新视图。在上面的 <code>示例</code> 中，若属性 <code>look</code> 没有出现在 <code>组件UI视图</code> 中，即修改 <code>look</code> 属性，不会更新 <code>组件UI视图</code>，那么浏览器控制台不会报错。</p>\n<h2 id=\"ngAfterViewChecked\"><a href=\"#ngAfterViewChecked\" class=\"headerlink\" title=\"ngAfterViewChecked\"></a>ngAfterViewChecked</h2><blockquote>\n<p>适用于组件</p>\n</blockquote>\n<p>在 <code>Angular</code> 检查完组件中的绑定后调用 <code>ngAfterViewChecked</code> 钩子，在该钩子中，和 <code>ngAfterViewInit</code> 钩子一样，禁止开发者更新视图。</p>\n<p><strong>注意：</strong> 当父组和子组件都有该钩子时，子组件的该钩子先于父组件的该钩子执行。</p>\n<p>每次执行该钩子，组件的 <code>UI视图</code> 更新完一次，可以在这个钩子中实时获取组件中某个 <code>DOM</code> 元素的信息，比如其在页面中的位置，高度或宽度等。</p>\n<h2 id=\"ngOnDestory\"><a href=\"#ngOnDestory\" class=\"headerlink\" title=\"ngOnDestory\"></a>ngOnDestory</h2><blockquote>\n<p>适用于组件和指令</p>\n</blockquote>\n<p>在 <code>ngOnDestory</code> 钩子中，代表组件或指令的生命周期来到了销毁之前，在该钩子中，开发者一般都是解绑事件或者取消订阅，或者清除定时器。</p>\n<blockquote>\n<p><strong>解绑事件：</strong> 比如开发者在某个组件中使用了 <code>jquery</code> 绑定了一个点击页面 <code>body</code> 事件，路由进入到其它页面中时，不需要这个点击事件，但由于 <code>Angular</code> 路由切换机制，会保留这个点击事件，这就需要在组件中的 <code>ngOnDestory</code> 钩子里面解除绑定的点击事件，即该组件被销毁后，不会存在点击 <code>body</code> 事件。清除定时器的思路和解绑事件的思路一样。</p>\n</blockquote>\n<blockquote>\n<p><strong>取消订阅：</strong> 在 <code>Angular</code> 项目中，组件间的通讯有一部分是 <code>订阅对象</code> 完成，为了提升用户体验和项目性能，需要取消订阅。</p>\n</blockquote>\n<p>取消订阅代码如下所示：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, OnDestroy &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Subscription &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  subscription:Subscription</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> routeInfo: ActivatedRoute, <span class=\"keyword\">private</span></span>)&#123;&#125;</span><br><span class=\"line\">  ngOnInit()&#123;                         <span class=\"comment\">//订阅路由参数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subscription = <span class=\"keyword\">this</span>.routeInfo.queryParams.subscribe(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      ....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ngOnDestroy() &#123; <span class=\"comment\">//取消订阅</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subscription.unsubscribe();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"生命周期钩子总结\"><a href=\"#生命周期钩子总结\" class=\"headerlink\" title=\"生命周期钩子总结\"></a>生命周期钩子总结</h2><h3 id=\"初始化阶段\"><a href=\"#初始化阶段\" class=\"headerlink\" title=\"初始化阶段\"></a>初始化阶段</h3><p>在组件的生命周期中，组件的初始化由一个构造函数3个生命周期钩子完成</p>\n<blockquote>\n<p><code>构造函数</code>：初始化对象<br><code>ngOnChanges</code>：初始化组件输入属性 (@Input)<br><code>ngOnInit</code>：初始化除了输入属性外的所有属性<br><code>ngDoCheck</code>：做一次变更检查</p>\n</blockquote>\n<h3 id=\"渲染阶段\"><a href=\"#渲染阶段\" class=\"headerlink\" title=\"渲染阶段\"></a>渲染阶段</h3><p>组件初始化完成后，开始渲染UI视图，首先渲染的就是被投影进来的内容，如果被投影的内容渲染完毕后，会调用 <code>ngAfterContentInit</code> 钩子和 <code>ngAfterContentChecked</code> 钩子，被投影的内容渲染完毕后，开始渲染组件的内容，当组件内容也渲染完毕后，会调用 <code>ngAfterViewInit</code> 钩子和 <code>ngAfterViewChecked</code>钩子。</p>\n<p>至此，组件的渲染完毕，组件进入存活阶段，即与用户的交互阶段。</p>\n<h3 id=\"存活阶段\"><a href=\"#存活阶段\" class=\"headerlink\" title=\"存活阶段\"></a>存活阶段</h3><p>在组件的存活阶段，由于用户和组件发生了交互，该阶段主要由4个生命周期钩子完成。</p>\n<blockquote>\n<p><code>ngOnChanges</code>：发生交互，组件的输入属性改变，会触发该钩子。<br><code>ngDoCheck</code>：数据每发生一个变化，会触发一次变更检测，会调用一次该钩子。<br><code>ngAfterContentChecked</code>：被投影的内容每发生一次变更检测，会调用一次该钩子。<br><code>ngAfterViewChecked</code>：每发生一次视图更新，会调用一次该钩子。</p>\n</blockquote>\n<h3 id=\"销毁阶段\"><a href=\"#销毁阶段\" class=\"headerlink\" title=\"销毁阶段\"></a>销毁阶段</h3><p>组件进入销毁阶段，就只有一个钩子 <code>ngOnDestory</code> 被调用，在该钩子中，一般都是销毁一些引用的资源，比如取消订阅，清除定时器，解除绑定事件等。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在<code>Angular</code> 中，每个组件都有一个被 <code>Angular</code> 管理的生命周期。</p>\n<p><code>Angular</code> 提供了生命周期钩子，把这些关键生命时刻（新建、更新和销毁）暴露出来，赋予开发者在它们发生时采取行动的能力。</p>\n<p>除了组件具有生命周期钩子外，指令同样也具有生命周期钩子。</p>\n<p><strong>注意：</strong>指令不能实现带有 <code>content</code> 和 <code>view</code> 相关的钩子，因为在 <code>Angular2</code> 以后，指令不存在UI视图，即和 <code>content</code> 以及 <code>view</code> 没有关系。<br><code>Angular</code> 组件的生命周期钩子如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/angular-gouzi.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>如图所示，<code>Angular</code> 组件的生命周期钩子执行顺序从图中的1到8，但没有一个组件或指令会实现全部的生命周期钩子。<br>其中青色的钩子可能在生命周期中执行多次，紫色的钩子在生命周期中只能执行一次。</p>\n<h2 id=\"ngOnChanges\"><a href=\"#ngOnChanges\" class=\"headerlink\" title=\"ngOnChanges\"></a>ngOnChanges</h2><blockquote>\n<p>适用于组件和指令</p>\n</blockquote>\n<p><code>ngOnChanges</code> 钩子只有存在输入属性（<code>@Input</code>）时才能调用，如果不存在该属性，则不能调用该钩子。<code>ngOnChanges</code> 钩子在生命周期中可以被多次调用，但其第一次被调用发生 <code>ngOnInit</code> 钩子之前。</p>\n<h3 id=\"触发条件\"><a href=\"#触发条件\" class=\"headerlink\" title=\"触发条件\"></a>触发条件</h3><p>一旦检测到该组件(或指令)的<strong>输入属性</strong>（<code>@Input</code>）发生了变化，<code>Angular</code> 组件就会调用 <code>ngOnChanges</code> 钩子 。<br><strong>注意：</strong>若输入属性是一个对象，对象的某个属性的值变化时，不会触发这个钩子，只有该对象引用发生变化时，才会触发这个钩子。</p>\n<h3 id=\"用处\"><a href=\"#用处\" class=\"headerlink\" title=\"用处\"></a>用处</h3><p><code>ngOnChanges</code> 在项目中用到地方不多。其相当于实现了 <code>angularjs</code> 的 <code>$scope.watch()</code> 功能。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>1，组件中有且只有1个 <code>@Input</code> 输入属性，且不为对象</p>\n<p>代码如下所示<br>parent.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"parVar\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> [<span class=\"attr\">comVar</span>]=<span class=\"string\">\"parVar\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>child.component.ts<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, Input, OnChanges, SimpleChanges &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">                    <span class=\"comment\">//使用钩子，需要继承钩子的接口</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ChildComponent <span class=\"keyword\">implements</span> OnInit,OnChanges &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() comVar:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  ngOnInit() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'A'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//ngOnChanges钩子变化的信息存储在SimpleChanges对象里面</span></span><br><span class=\"line\">  ngOnChanges(changes: SimpleChanges) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(changes);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器中打开本地4200端口地址，按键盘上的 <code>f12</code>进入浏览器控制台，可以看见先输出 <code>SimpleChanges</code> 对象，该对象有一个 <code>comVar</code> 属性，这个<code>comVar</code> 属性的值是一个对象，该对象存储了3个属性，即 <code>comVar</code> 变量的当前值，前一个值和 <code>firstChange</code>（是否第一次改变，<code>boolean</code> 类型，<code>true</code> 代表第一次改变，<code>false</code> 代表不是第一次），然后才输出 <code>ngOnIint</code> 钩子中的 <code>A</code> 。</p>\n<p>当在页面中的 <code>input框</code> 输入值的时候，<code>app-child</code> 组件的输入值发生了改变，触发了 <code>ngOnChanges</code> 钩子，控制台会出 <code>SimpleChanges</code> 对象，其属性 <code>comVar</code> 的值还是3个，即 <code>comVar</code> 的当前值，前一个值和 <code>firstChange</code>。</p>\n<p><strong>即 <code>ngOnChanges</code> 钩子第一次被调用发生调用 <code>ngOnInit</code> 钩子之前，<code>ngOnChanges</code> 钩子可能被多次调用</strong></p>\n<p>2，组件中有且只有多个 <code>@Input</code> 输入属性，且不为对象<br>其代码如下所示<br>parent.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"parVar1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"parVar2\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> [<span class=\"attr\">comVar1</span>]=<span class=\"string\">\"parVar1\"</span> [<span class=\"attr\">comVar2</span>]=<span class=\"string\">\"parVar2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>child.component.ts<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, Input, OnChanges, SimpleChanges &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">..../代码块</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ChildComponent <span class=\"keyword\">implements</span> OnInit,OnChanges &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() comVar1:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() comVar2:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  ngOnInit() &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ngOnChanges(changes: SimpleChanges) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(changes);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器控制台中，可以看到输出的 <code>SimpleChanges</code> 对象，该对象有两个属性，分别是 <code>comVar1</code> 和 <code>comVar2</code> ，这两个属性的值为对象，分别存放着输入属性 <code>comVar1</code> 和 <code>comVar2</code> 的当前值，前一个值和 <code>firstChange</code>。</p>\n<p><strong>注意：</strong> 在 <code>input</code> 改变时，控制台输出的 <code>SimpleChanges</code> 对象只有当前绑定的值的属性，不会输出其它绑定绑定值的属性，因为其它绑定值的没有发生变化。</p>\n<h2 id=\"ngOnInit\"><a href=\"#ngOnInit\" class=\"headerlink\" title=\"ngOnInit\"></a>ngOnInit</h2><blockquote>\n<p>适用于组件和指令</p>\n</blockquote>\n<p><code>ngOnInit</code> 钩子在组件中已经被 <code>Angular</code> 默认实现了，<code>ngOnInit</code> 在 <code>Angular</code> 中被使用的次数最多，其在第一次 <code>ngOnChanges</code> 之后被调用。</p>\n<p>在 <code>Angular</code> 中，<code>ngOnInit</code> 钩子主要的作用就是：</p>\n<ol>\n<li>在构造函数后马上执行复杂的初始化逻辑；</li>\n<li>在 <code>Angular</code> 设置完输入属性之后，对该组件进行准备。</li>\n</ol>\n<h2 id=\"ngDoCheck\"><a href=\"#ngDoCheck\" class=\"headerlink\" title=\"ngDoCheck\"></a>ngDoCheck</h2><blockquote>\n<p>适用于组件和指令</p>\n</blockquote>\n<h3 id=\"变更检测\"><a href=\"#变更检测\" class=\"headerlink\" title=\"变更检测\"></a>变更检测</h3><p>变更检测就是 <code>Angular</code> 检测视图和数据模型之间绑定的值是否发生了改变，当检测到模型中绑定的值发生改变时，同步到UI视图上。</p>\n<blockquote>\n<ul>\n<li><code>Angular</code> 的变更检测是通过 zone.js 库来实现的，保证组件的变化和UI视图一致</li>\n<li>组件中的任何异步事件都会触发变更检测</li>\n<li>每个组件都有独属于自己的变更检测器，当任何一个变更检测器检测到变化，zone.js 库会根据 <code>变更检测策略</code> 来检测组件，以判断组件是否需要更新模板。</li>\n</ul>\n</blockquote>\n<h3 id=\"Angular变更检测策略\"><a href=\"#Angular变更检测策略\" class=\"headerlink\" title=\"Angular变更检测策略\"></a>Angular变更检测策略</h3><p><code>Angular</code> 有两种变更检测策略，分别是 <code>Default</code> 策略和 <code>OnPush</code> 策略。</p>\n<blockquote>\n<p>Default策略<br>    <code>Default</code> 策略是 <code>Angular</code> 默认的变更检测策略，该策略会在发生变更时，<code>zone.js</code> 会检测所有的组件。</p>\n</blockquote>\n<blockquote>\n<p>OnPush策略<br>    <code>Onpush</code>策略的组件只有输入属性（@Input）发生改变时，才会检测该组件及其子组件。如果所有的组件都采用 <code>Default</code> 策略，当某个组件的变更检测器检测到变化，<code>zone.js</code> 会检测整个组件树，但它会跳过使用 <code>OnPush</code> 策略的组件。</p>\n</blockquote>\n<h3 id=\"ngDoCheck和变更检测\"><a href=\"#ngDoCheck和变更检测\" class=\"headerlink\" title=\"ngDoCheck和变更检测\"></a>ngDoCheck和变更检测</h3><blockquote>\n<p>触发变更检测机制时会调用 <code>ngDoCheck</code> 钩子</p>\n</blockquote>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>在 <code>ngOnChanges</code> 钩子中，若 <code>@Input</code> 输入属性是一个对象，修改该对象某个属性的值，不会触发 <code>ngOnChanges</code> 钩子，但其会触发 <code>ngDoCheck</code> 钩子，开发者可以利用这个钩子做开发者需要做的事情。其代码如下所示<br>par.component.ts<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">  User=&#123; <span class=\"comment\">//定义一个对象</span></span><br><span class=\"line\">    par1:<span class=\"literal\">null</span>,</span><br><span class=\"line\">    par2:<span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>par.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"User.parVar1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control\"</span> [(<span class=\"attr\">ngModel</span>)]=<span class=\"string\">\"User.parVar2\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-child</span> [<span class=\"attr\">comObj</span>]=<span class=\"string\">\"User\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>child.component.ts<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, Input, OnChanges, DoCheck &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ChildComponent <span class=\"keyword\">implements</span> OnInit,OnChanges,DoCheck &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Input</span>() comObj:<span class=\"built_in\">any</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"> ....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  ngOnChanges() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'触发了ngOnChanges钩子'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ngDoCheck()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'发生了变更检测'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在浏览器中打开本地4200端口地址，进入浏览器控制台，可以看到在浏览器中输出了 <code>触发了ngOnChanges钩子</code> 和 <code>发生了变更检测</code> ，不断改变页面中 <code>input</code> 框（两个 <code>input</code> ，随便哪一个都可以）的值，可以看到在控制台中，不断的输出 <code>发生了变更检测</code> ，但控制台中不会再输出 <code>触发了ngOnChanges钩子</code>，因为 <code>User</code> 输入对象引用没有发生改变，不会 <code>ngOnChanges</code> 钩子。</p>\n<p><strong>注意：</strong> 虽然 <code>Angular</code> 暴露了 <code>ngDoCheck</code> 钩子，但是由于 <code>ngDocheck</code> 钩子调用频繁，所以开发者尽量不要在 <code>ngDoCheck</code> 钩子中写入复杂的逻辑，否则会降低 <code>Angular</code> 项目的性能，影响用户体验。</p>\n<h2 id=\"ngAfterContentInit\"><a href=\"#ngAfterContentInit\" class=\"headerlink\" title=\"ngAfterContentInit\"></a>ngAfterContentInit</h2><blockquote>\n<p>适用于组件</p>\n</blockquote>\n<p>在 <code>Angular</code> 的8个生命周期钩子中，带有 <code>view</code> 和 <code>content</code> 的4个钩子只适用于组件。其它的4个钩子适用于指令和组件。<br><code>ngAfterContentInit</code> 钩子只执行一次，在当把内容投影进组件之后调用这个钩子，在这个钩子里面可以访问被投影进来的组件。<br><strong>注意：</strong> 在组件中，若没有发生组件投影，<code>ngAfterContentInit</code>  钩子还是会执行。</p>\n<h3 id=\"意义\"><a href=\"#意义\" class=\"headerlink\" title=\"意义\"></a>意义</h3><p>在传统的HTML页面中，标签可以嵌套标签，而在 <code>Angular</code> 中，可以把组件看成是标签，一般情况下是不能直接组件嵌套组件。<code>内容投影shadow</code> 实现了在 <code>Angular</code> 中可以组件嵌套组件。在投影组件时，开发者可能需要在组件投影后马上进行一些操作，可以使用 <code>ngAfterContentInit</code> 钩子。</p>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>app.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">app-shadow-wrap</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-content-child</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-content-child</span>&gt;</span> //被投影的组件</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">app-shadow-wrap</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在根组件中，页面UI代码如上所示，这时在页面中不会展示和 <code>app-content-child</code> 组件有关的UI内容<br>shadow-wrap.conponent.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>内容投影<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">\"app-content-child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在 <code>app-shadow-wrap</code> 组件的UI代码中， <code>&lt;ng-content select=&quot;app-content-child&quot;&gt;&lt;/ng-content&gt;</code> 是占位符，这个占位符存放的就是根组件UI代码中的 <code>&lt;app-content-child&gt;&lt;/app-content-child&gt;</code> 组件，其通过 <code>&lt;ng-content select=&quot;app-content-child&quot;&gt;&lt;/ng-content&gt;</code> 中的 <code>select</code> 属性的值来确定这个占位符展示组件投影中的哪一个组件。<br><strong>注意：</strong> <code>ng-content</code> 占位符中 <code>select</code> 属性还可以为类名，标签名和属性等。在该占位符中不应该有任何内容，若存在内容，也会被投影的组件内容覆盖。<br>如下所示：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">\".blue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span>//匹配class名为blue的显示内容 </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span>//匹配header标签的显示内容 </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ng-content</span> <span class=\"attr\">select</span>=<span class=\"string\">\"[name]=red\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ng-content</span>&gt;</span>//匹配name属性值为red的显示内容</span><br></pre></td></tr></table></figure></p>\n<p>content-child.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这儿是content-child组件<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>content-child.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> comVar()&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到此，最基本的内容投影完成（关于内容投影，后面会讲解），假如开发者需要在 <code>shadow-wrap</code> 组件中访问 <code>content-child</code> 组件的值或者方法，可以通过调用 <code>ngAfterConentInit</code> 钩子实现。</p>\n<p>shadow-wrap.component.ts<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, ContentChild, AfterContentInit &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ContentChildComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../content-child/content-child.component'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ShadowWrapComponent <span class=\"keyword\">implements</span> OnInit,AfterContentInit &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@ContentChild</span>(ContentChildComponent) child1:ContentChildComponent;</span><br><span class=\"line\"></span><br><span class=\"line\">  ....<span class=\"comment\">//代码块</span></span><br><span class=\"line\"></span><br><span class=\"line\">  ngAfterContentInit()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.child1.comVar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以在控制台看到输出了 <code>A</code>，即在 <code>shadow-wrap</code> 组件中访问了 <code>content-child</code> 组件的public值或者方法。<br><strong>注意：</strong>如果组件中没有发生组件投影，那么就不需要实现这个生命周期钩子。</p>\n<h3 id=\"AfterContent-和-AfterView\"><a href=\"#AfterContent-和-AfterView\" class=\"headerlink\" title=\"AfterContent 和 AfterView\"></a>AfterContent 和 AfterView</h3><p><code>AfterContent</code> 钩子和 <code>AfterView</code> 相似。关键的不同点是子组件的类型不同。</p>\n<blockquote>\n<p><code>AfterView 钩子</code>所关心的是 <code>ViewChildren</code>，这些子组件的元素标签会出现在该组件的模板里面。<br><code>AfterContent 钩子</code> 所关心的是 <code>ContentChildren</code>，这些子组件被 <code>Angular</code> 投影进该组件中。</p>\n</blockquote>\n<h2 id=\"ngAfterContentChecked\"><a href=\"#ngAfterContentChecked\" class=\"headerlink\" title=\"ngAfterContentChecked\"></a>ngAfterContentChecked</h2><blockquote>\n<p>适用于组件</p>\n</blockquote>\n<p>代码结构和 <code>ngAfterContentInit</code> 相同，若被投影的组件发生了变更检测，需要在 <code>shadow-wrap</code> 组件中访问被投影组件 <code>content-child</code> 的公共属性或方法，这时开发者可以使用 <code>ngAfterContentChecked</code> 钩子查看被被投影组件的公共方法或属性。</p>\n<h2 id=\"ngAfterViewInit\"><a href=\"#ngAfterViewInit\" class=\"headerlink\" title=\"ngAfterViewInit\"></a>ngAfterViewInit</h2><blockquote>\n<p>适用于组件</p>\n</blockquote>\n<p>在组件和其所有子组件相应的 <code>视图</code> 初始化之后执行 <code>ngAfterViewInit</code> 钩子，只执行一次。<br><strong>注意：</strong> 在执行 <code>ngAfterViewInit</code> 钩子时，说明组件的 <code>视图</code> 已经组装完毕，开发者不能在该钩子中修改和 <code>组件UI视图</code> 有关的属性。虽然在UI视图中显示修改成功，但浏览器控制台会报错。</p>\n<h3 id=\"错误示例1-修改组件属性\"><a href=\"#错误示例1-修改组件属性\" class=\"headerlink\" title=\"错误示例1-修改组件属性\"></a>错误示例1-修改组件属性</h3><p> view-init.component.ts</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">  look:<span class=\"built_in\">string</span>=<span class=\"string\">'jackyy'</span>;</span><br><span class=\"line\">  ngAfterViewInit()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.look=<span class=\"string\">'loook at'</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>view-init.component.html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;look&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>其控制台台报错如下图所示</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/angular-ngVInitError.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p><strong>结论：</strong> 在一个变更检测周期中禁止一个视图被组装好之后再去更新视图。</p>\n<p>在带有 <code>view</code> 的生命周期钩子（<code>ngAfterViewInit</code> 和 <code>ngAfterViewChecked</code>）中，禁止更新视图。在上面的 <code>示例</code> 中，若属性 <code>look</code> 没有出现在 <code>组件UI视图</code> 中，即修改 <code>look</code> 属性，不会更新 <code>组件UI视图</code>，那么浏览器控制台不会报错。</p>\n<h2 id=\"ngAfterViewChecked\"><a href=\"#ngAfterViewChecked\" class=\"headerlink\" title=\"ngAfterViewChecked\"></a>ngAfterViewChecked</h2><blockquote>\n<p>适用于组件</p>\n</blockquote>\n<p>在 <code>Angular</code> 检查完组件中的绑定后调用 <code>ngAfterViewChecked</code> 钩子，在该钩子中，和 <code>ngAfterViewInit</code> 钩子一样，禁止开发者更新视图。</p>\n<p><strong>注意：</strong> 当父组和子组件都有该钩子时，子组件的该钩子先于父组件的该钩子执行。</p>\n<p>每次执行该钩子，组件的 <code>UI视图</code> 更新完一次，可以在这个钩子中实时获取组件中某个 <code>DOM</code> 元素的信息，比如其在页面中的位置，高度或宽度等。</p>\n<h2 id=\"ngOnDestory\"><a href=\"#ngOnDestory\" class=\"headerlink\" title=\"ngOnDestory\"></a>ngOnDestory</h2><blockquote>\n<p>适用于组件和指令</p>\n</blockquote>\n<p>在 <code>ngOnDestory</code> 钩子中，代表组件或指令的生命周期来到了销毁之前，在该钩子中，开发者一般都是解绑事件或者取消订阅，或者清除定时器。</p>\n<blockquote>\n<p><strong>解绑事件：</strong> 比如开发者在某个组件中使用了 <code>jquery</code> 绑定了一个点击页面 <code>body</code> 事件，路由进入到其它页面中时，不需要这个点击事件，但由于 <code>Angular</code> 路由切换机制，会保留这个点击事件，这就需要在组件中的 <code>ngOnDestory</code> 钩子里面解除绑定的点击事件，即该组件被销毁后，不会存在点击 <code>body</code> 事件。清除定时器的思路和解绑事件的思路一样。</p>\n</blockquote>\n<blockquote>\n<p><strong>取消订阅：</strong> 在 <code>Angular</code> 项目中，组件间的通讯有一部分是 <code>订阅对象</code> 完成，为了提升用户体验和项目性能，需要取消订阅。</p>\n</blockquote>\n<p>取消订阅代码如下所示：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Component, OnInit, OnDestroy &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Subscription &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  subscription:Subscription</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> routeInfo: ActivatedRoute, <span class=\"keyword\">private</span></span>)&#123;&#125;</span><br><span class=\"line\">  ngOnInit()&#123;                         <span class=\"comment\">//订阅路由参数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subscription = <span class=\"keyword\">this</span>.routeInfo.queryParams.subscribe(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      ....<span class=\"comment\">//代码块</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ngOnDestroy() &#123; <span class=\"comment\">//取消订阅</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subscription.unsubscribe();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"生命周期钩子总结\"><a href=\"#生命周期钩子总结\" class=\"headerlink\" title=\"生命周期钩子总结\"></a>生命周期钩子总结</h2><h3 id=\"初始化阶段\"><a href=\"#初始化阶段\" class=\"headerlink\" title=\"初始化阶段\"></a>初始化阶段</h3><p>在组件的生命周期中，组件的初始化由一个构造函数3个生命周期钩子完成</p>\n<blockquote>\n<p><code>构造函数</code>：初始化对象<br><code>ngOnChanges</code>：初始化组件输入属性 (@Input)<br><code>ngOnInit</code>：初始化除了输入属性外的所有属性<br><code>ngDoCheck</code>：做一次变更检查</p>\n</blockquote>\n<h3 id=\"渲染阶段\"><a href=\"#渲染阶段\" class=\"headerlink\" title=\"渲染阶段\"></a>渲染阶段</h3><p>组件初始化完成后，开始渲染UI视图，首先渲染的就是被投影进来的内容，如果被投影的内容渲染完毕后，会调用 <code>ngAfterContentInit</code> 钩子和 <code>ngAfterContentChecked</code> 钩子，被投影的内容渲染完毕后，开始渲染组件的内容，当组件内容也渲染完毕后，会调用 <code>ngAfterViewInit</code> 钩子和 <code>ngAfterViewChecked</code>钩子。</p>\n<p>至此，组件的渲染完毕，组件进入存活阶段，即与用户的交互阶段。</p>\n<h3 id=\"存活阶段\"><a href=\"#存活阶段\" class=\"headerlink\" title=\"存活阶段\"></a>存活阶段</h3><p>在组件的存活阶段，由于用户和组件发生了交互，该阶段主要由4个生命周期钩子完成。</p>\n<blockquote>\n<p><code>ngOnChanges</code>：发生交互，组件的输入属性改变，会触发该钩子。<br><code>ngDoCheck</code>：数据每发生一个变化，会触发一次变更检测，会调用一次该钩子。<br><code>ngAfterContentChecked</code>：被投影的内容每发生一次变更检测，会调用一次该钩子。<br><code>ngAfterViewChecked</code>：每发生一次视图更新，会调用一次该钩子。</p>\n</blockquote>\n<h3 id=\"销毁阶段\"><a href=\"#销毁阶段\" class=\"headerlink\" title=\"销毁阶段\"></a>销毁阶段</h3><p>组件进入销毁阶段，就只有一个钩子 <code>ngOnDestory</code> 被调用，在该钩子中，一般都是销毁一些引用的资源，比如取消订阅，清除定时器，解除绑定事件等。</p>\n"},{"title":"个人网页搭建流程-1","_content":"## 需求与准备\n### 需求\n本人想做一个个人网页,类似于博客，数据量不大，不涉及到数据库和后台，可以做静态网页，由于个人经济所限，不会花费资金购买域名和服务器\n### 准备\n根据需求，个人网页使用的域名是 `GitHub` 为每个用户提供的唯一域名(用户名.xxxx.github.io),由于个人网页类似于博客，采用hexo框架，选用 `hexo` 的主题是 `indigo`。\n需要的准备有：`node.js`，`hexo框架`，`git`，`GitHub的账号`\n## 安装\n### 安装node.js\n进入英文版本的[node.js官网](https://nodejs.org/en/download/)，如果打开速度太慢，可以进入中文版本的[node.js官网](http://nodejs.cn/download/)，根据个人电脑选择下载 `node.js` 的安装包。\n\n![](https://bingolil.github.io/images/node-down.png)\n\n点击下载后的 `node.js` 的安装包。\n\n![](https://bingolil.github.io/images/node-msi.png)\n\n然后一直跟着窗口点击，最后在电脑的 `cmd` 目录行里面验证 `ndoe.js` 是否安装成功，`npm` 是 `node.js` 自带的包管理工具。\n\n![](https://bingolil.github.io/images/node-validate.png)\n### 安装git\n\n进入[git官网](https://git-scm.com/downloads)下载 `git` 的安装包。\n\n![](https://bingolil.github.io/images/git-down.png)\n\n下载安装包后，点击安装包进行安装，一直跟着安装程序的提示点击下去。安装完成后，在window10自带搜索处输入 `git`。出现下图。\n\n![](https://bingolil.github.io/images/git-validate.png)\n\n点击图中 Git Bash，出现下图，说明git安装成功。\n\n![](https://bingolil.github.io/images/git-cmd.png)\n\n 安装 `git` 成功后为 `git` 设置用户名和邮箱，如下图。\n\n![](https://bingolil.github.io/images/git-config.png)\n\n### 安装hexo\n安装 `hexo` 可以查看[hexo官网](https://hexo.io/zh-cn/docs/)安装教程。在电脑的 `cmd` 命令行环境下，运行 `npm install -g hexo-cli` 命令，电脑会自动全局安装 `hexo框架`。安装完成后，运行 `hexo -version` 命令，出现下图，证明 `hexo` 安装成功。\n\n![](https://bingolil.github.io/images/hexo-version.png)\n\n### GitHub账号\n进入[GitHub官网](https://github.com)首页，点击导航栏中的 `Sign up` 进入到[注册页面](https://github.com/join?source=header-home)（如下图），在页面中填写用户名，密码和邮箱。\n\n![](https://bingolil.github.io/images/github-join.png)\n\n注意：`GitHub账号` 的用户名是唯一的\n","source":"_posts/web/person-web-1.md","raw":"title: 个人网页搭建流程-1\ncategories: 个人网页\ntags: [hexo,git,github,node.js]\n---\n## 需求与准备\n### 需求\n本人想做一个个人网页,类似于博客，数据量不大，不涉及到数据库和后台，可以做静态网页，由于个人经济所限，不会花费资金购买域名和服务器\n### 准备\n根据需求，个人网页使用的域名是 `GitHub` 为每个用户提供的唯一域名(用户名.xxxx.github.io),由于个人网页类似于博客，采用hexo框架，选用 `hexo` 的主题是 `indigo`。\n需要的准备有：`node.js`，`hexo框架`，`git`，`GitHub的账号`\n## 安装\n### 安装node.js\n进入英文版本的[node.js官网](https://nodejs.org/en/download/)，如果打开速度太慢，可以进入中文版本的[node.js官网](http://nodejs.cn/download/)，根据个人电脑选择下载 `node.js` 的安装包。\n\n![](https://bingolil.github.io/images/node-down.png)\n\n点击下载后的 `node.js` 的安装包。\n\n![](https://bingolil.github.io/images/node-msi.png)\n\n然后一直跟着窗口点击，最后在电脑的 `cmd` 目录行里面验证 `ndoe.js` 是否安装成功，`npm` 是 `node.js` 自带的包管理工具。\n\n![](https://bingolil.github.io/images/node-validate.png)\n### 安装git\n\n进入[git官网](https://git-scm.com/downloads)下载 `git` 的安装包。\n\n![](https://bingolil.github.io/images/git-down.png)\n\n下载安装包后，点击安装包进行安装，一直跟着安装程序的提示点击下去。安装完成后，在window10自带搜索处输入 `git`。出现下图。\n\n![](https://bingolil.github.io/images/git-validate.png)\n\n点击图中 Git Bash，出现下图，说明git安装成功。\n\n![](https://bingolil.github.io/images/git-cmd.png)\n\n 安装 `git` 成功后为 `git` 设置用户名和邮箱，如下图。\n\n![](https://bingolil.github.io/images/git-config.png)\n\n### 安装hexo\n安装 `hexo` 可以查看[hexo官网](https://hexo.io/zh-cn/docs/)安装教程。在电脑的 `cmd` 命令行环境下，运行 `npm install -g hexo-cli` 命令，电脑会自动全局安装 `hexo框架`。安装完成后，运行 `hexo -version` 命令，出现下图，证明 `hexo` 安装成功。\n\n![](https://bingolil.github.io/images/hexo-version.png)\n\n### GitHub账号\n进入[GitHub官网](https://github.com)首页，点击导航栏中的 `Sign up` 进入到[注册页面](https://github.com/join?source=header-home)（如下图），在页面中填写用户名，密码和邮箱。\n\n![](https://bingolil.github.io/images/github-join.png)\n\n注意：`GitHub账号` 的用户名是唯一的\n","slug":"web/person-web-1","published":1,"date":"2018-11-02T10:25:09.191Z","updated":"2018-11-22T08:14:14.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjozdt9mx0007bgvcq2ua6om3","content":"<h2 id=\"需求与准备\"><a href=\"#需求与准备\" class=\"headerlink\" title=\"需求与准备\"></a>需求与准备</h2><h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>本人想做一个个人网页,类似于博客，数据量不大，不涉及到数据库和后台，可以做静态网页，由于个人经济所限，不会花费资金购买域名和服务器</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>根据需求，个人网页使用的域名是 <code>GitHub</code> 为每个用户提供的唯一域名(用户名.xxxx.github.io),由于个人网页类似于博客，采用hexo框架，选用 <code>hexo</code> 的主题是 <code>indigo</code>。<br>需要的准备有：<code>node.js</code>，<code>hexo框架</code>，<code>git</code>，<code>GitHub的账号</code></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><p>进入英文版本的<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">node.js官网</a>，如果打开速度太慢，可以进入中文版本的<a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"noopener\">node.js官网</a>，根据个人电脑选择下载 <code>node.js</code> 的安装包。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/node-down.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>点击下载后的 <code>node.js</code> 的安装包。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/node-msi.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>然后一直跟着窗口点击，最后在电脑的 <code>cmd</code> 目录行里面验证 <code>ndoe.js</code> 是否安装成功，<code>npm</code> 是 <code>node.js</code> 自带的包管理工具。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/node-validate.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>进入<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">git官网</a>下载 <code>git</code> 的安装包。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/git-down.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>下载安装包后，点击安装包进行安装，一直跟着安装程序的提示点击下去。安装完成后，在window10自带搜索处输入 <code>git</code>。出现下图。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/git-validate.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>点击图中 Git Bash，出现下图，说明git安装成功。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/git-cmd.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p> 安装 <code>git</code> 成功后为 <code>git</code> 设置用户名和邮箱，如下图。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/git-config.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>安装 <code>hexo</code> 可以查看<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">hexo官网</a>安装教程。在电脑的 <code>cmd</code> 命令行环境下，运行 <code>npm install -g hexo-cli</code> 命令，电脑会自动全局安装 <code>hexo框架</code>。安装完成后，运行 <code>hexo -version</code> 命令，出现下图，证明 <code>hexo</code> 安装成功。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-version.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"GitHub账号\"><a href=\"#GitHub账号\" class=\"headerlink\" title=\"GitHub账号\"></a>GitHub账号</h3><p>进入<a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">GitHub官网</a>首页，点击导航栏中的 <code>Sign up</code> 进入到<a href=\"https://github.com/join?source=header-home\" target=\"_blank\" rel=\"noopener\">注册页面</a>（如下图），在页面中填写用户名，密码和邮箱。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-join.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>注意：<code>GitHub账号</code> 的用户名是唯一的</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"需求与准备\"><a href=\"#需求与准备\" class=\"headerlink\" title=\"需求与准备\"></a>需求与准备</h2><h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>本人想做一个个人网页,类似于博客，数据量不大，不涉及到数据库和后台，可以做静态网页，由于个人经济所限，不会花费资金购买域名和服务器</p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>根据需求，个人网页使用的域名是 <code>GitHub</code> 为每个用户提供的唯一域名(用户名.xxxx.github.io),由于个人网页类似于博客，采用hexo框架，选用 <code>hexo</code> 的主题是 <code>indigo</code>。<br>需要的准备有：<code>node.js</code>，<code>hexo框架</code>，<code>git</code>，<code>GitHub的账号</code></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h3><p>进入英文版本的<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">node.js官网</a>，如果打开速度太慢，可以进入中文版本的<a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"noopener\">node.js官网</a>，根据个人电脑选择下载 <code>node.js</code> 的安装包。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/node-down.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>点击下载后的 <code>node.js</code> 的安装包。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/node-msi.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>然后一直跟着窗口点击，最后在电脑的 <code>cmd</code> 目录行里面验证 <code>ndoe.js</code> 是否安装成功，<code>npm</code> 是 <code>node.js</code> 自带的包管理工具。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/node-validate.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>进入<a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">git官网</a>下载 <code>git</code> 的安装包。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/git-down.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>下载安装包后，点击安装包进行安装，一直跟着安装程序的提示点击下去。安装完成后，在window10自带搜索处输入 <code>git</code>。出现下图。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/git-validate.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>点击图中 Git Bash，出现下图，说明git安装成功。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/git-cmd.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p> 安装 <code>git</code> 成功后为 <code>git</code> 设置用户名和邮箱，如下图。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/git-config.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>安装 <code>hexo</code> 可以查看<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">hexo官网</a>安装教程。在电脑的 <code>cmd</code> 命令行环境下，运行 <code>npm install -g hexo-cli</code> 命令，电脑会自动全局安装 <code>hexo框架</code>。安装完成后，运行 <code>hexo -version</code> 命令，出现下图，证明 <code>hexo</code> 安装成功。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-version.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"GitHub账号\"><a href=\"#GitHub账号\" class=\"headerlink\" title=\"GitHub账号\"></a>GitHub账号</h3><p>进入<a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">GitHub官网</a>首页，点击导航栏中的 <code>Sign up</code> 进入到<a href=\"https://github.com/join?source=header-home\" target=\"_blank\" rel=\"noopener\">注册页面</a>（如下图），在页面中填写用户名，密码和邮箱。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-join.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>注意：<code>GitHub账号</code> 的用户名是唯一的</p>\n"},{"title":"个人网页搭建流程-2","_content":"## 搭建本地项目\n### hexo初始化项目\n\n进入电脑 `cmd` 命令行，在某个目录下使用 `hexo init` 命令，生成 `hexo` 初始化项目，如下图所示。\n\n![](https://bingolil.github.io/images/hexo-init.png)\n\n使用 `hexo s` 命令，在浏览器中打开 `localhost:4000` 地址，可以看到 `hexo` 新建的初始化项目页面，如下图所示。\n\n![](https://bingolil.github.io/images/hexo-index.png)\n\n### hexo主题下载\n\n新建 `hexo` 项目自带默认主题 `landscape` ，样式不是特别好看，可去[hexo主题](https://hexo.io/themes/)查看自己喜欢的主题风格，一般在主题风格的页面都有到该主题源码的 `GitHub` 链接，进入到 `GitHub` 下载，复制 `git` 库的地址，在本地的 `git` 命令行下 克隆 `hexo主题`。本个人网页使用的主题地址是`https://github.com/yscoder/hexo-theme-indigo`\n\n### 使用indigo主题\n\n将下载好的 `indigo` 主题放到本地 `hexo` 初始化项目的 `/项目名/themes/` 下，将 `项目名/_config.yml'`文件中的 `themes` 属性由 `landscape` 改成 `indigo`（如果是其它主题，`themes` 的属性修改成其它主题名)，如下图所示。\n\n![](https://bingolil.github.io/images/theme-name.png)\n\n在该主题的[GitHub页面](https://github.com/yscoder/hexo-theme-indigo/wiki/%E5%AE%89%E8%A3%85)，查看使用该主题的教程，在电脑的 `cmd` 环境下跟着教程添加插件。\n\n在 `cmd` 命令行本地项目中使用 `hexo s` 命令，打开浏览器 `localhost:4000` 地址，可以看见 `hexo` 的 `indigo` 主题被使用\n\n### 修改indigo主题\n\n在本地项目中，修改 `indigo/_config.yml` 文件，如下图所示。\n\n去掉 `menu` 中的 `weibo` 和 `测试`\n\n![](https://bingolil.github.io/images/update-1.png)\n\n关闭打赏功能\n\n![](https://bingolil.github.io/images/update-2.png)\n\n去掉title变化功能\n\n![](https://bingolil.github.io/images/update-3.png)\n\n使用自定义样式\n\n![](https://bingolil.github.io/images/update-4.png)\n\n## 搭建GitHub项目\n\n使用账号登录 `GitHub` 后，进入创建[仓库页面](https://github.com/new)，创建仓库，仓库名为 '账号用户名.github.io'（这就是为什么账号的用户名是唯一的），如下图所示。\n\n![GitHub-new](https://bingolil.github.io/images/github-new.png)\n\n打开浏览器，输入地址 'GitHub用户名.github.io'，可以看见如下图页面。\n\n![](https://bingolil.github.io/images/github-csh.png)\n\n进入新搭建的 `GitHub` 项目的 `setting` 设置页面，有一个 `Git Pages` 属性，点击 `choice a theme` 按钮，进入 `GitHub` 自带主题页面，可以更换  `GitHub` 账号.github.io' 页面的主题，如下图所示。\n\n![](https://bingolil.github.io/images/github-themes.png)\n\n## 将本地项目传送的GitHub上\n\n### 本地git和Github的连接\n\n将本地 `git` 和 `GitHub` 连接需要将本地 `git` 的公钥发送的 `GitHub` 上。\n\n[官网的教程](https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5)生成本地公钥。进入 `git bash` 命令行下，运行命令 `ssh-keygen`，在电脑的C盘里面生成了 .ssh 文件夹，如下图所示。\n\n![](https://bingolil.github.io/images/git-key.png)\n\n进入到 `GitHub` 上的添加 `ssh key` 的页面，如下图。\n\n![](https://bingolil.github.io/images/github-newssh-1.png)\n\n![](https://bingolil.github.io/images/github-newssh-2.png)\n\n打开 `id_rsa.pub` 文件（该文件为公钥，`id_rsa` 为私钥），将文件中的内容复制粘贴到上图中，点击 `Add SSH key` 按钮，这样本地的 `git` 和 `GitHub` 连接完成。\n\n### 传送本地项目\n\n在 `hexo` 官网教材中提供了关于hexo项目的[部署方案](https://hexo.io/zh-cn/docs/deployment)，将新建 `GitHub` 项目地址复制，在编辑器中打开本地的 `hexo` 项目，打开 `项目名/_config.yml` 文件，将 `GitHub` 项目地址粘贴到 `_config.yml` 文件中的 `deplay` 属性下的 `git` 属性上，如下图所示。\n\n![](https://bingolil.github.io/images/hexo-config1.png)\n\n在电脑 `cmd` 命令到项目地址下，使用命令 `npm install hexo-deployer-git --save` 下载插件，如下图所示。\n\n![](https://bingolil.github.io/images/hexo-deploy.png)\n\n然后运行 `hexo g -d` 或 `hexo d -g` 命令，可以看到，已经将本地git项目传送到新建的 `GitHub` 项目上，如下图所示。\n\n![](https://bingolil.github.io/images/hexo-g-d.png)\n\n打开浏览器，在地址栏输入 'GitHub用户名.github.io' 可以看到，本地的项目已经在 `GitHub`上了。\n\n\n\n","source":"_posts/web/person-web-2.md","raw":"title: 个人网页搭建流程-2\ncategories: 个人网页\ntags: [hexo,git,github,node.js]\n---\n## 搭建本地项目\n### hexo初始化项目\n\n进入电脑 `cmd` 命令行，在某个目录下使用 `hexo init` 命令，生成 `hexo` 初始化项目，如下图所示。\n\n![](https://bingolil.github.io/images/hexo-init.png)\n\n使用 `hexo s` 命令，在浏览器中打开 `localhost:4000` 地址，可以看到 `hexo` 新建的初始化项目页面，如下图所示。\n\n![](https://bingolil.github.io/images/hexo-index.png)\n\n### hexo主题下载\n\n新建 `hexo` 项目自带默认主题 `landscape` ，样式不是特别好看，可去[hexo主题](https://hexo.io/themes/)查看自己喜欢的主题风格，一般在主题风格的页面都有到该主题源码的 `GitHub` 链接，进入到 `GitHub` 下载，复制 `git` 库的地址，在本地的 `git` 命令行下 克隆 `hexo主题`。本个人网页使用的主题地址是`https://github.com/yscoder/hexo-theme-indigo`\n\n### 使用indigo主题\n\n将下载好的 `indigo` 主题放到本地 `hexo` 初始化项目的 `/项目名/themes/` 下，将 `项目名/_config.yml'`文件中的 `themes` 属性由 `landscape` 改成 `indigo`（如果是其它主题，`themes` 的属性修改成其它主题名)，如下图所示。\n\n![](https://bingolil.github.io/images/theme-name.png)\n\n在该主题的[GitHub页面](https://github.com/yscoder/hexo-theme-indigo/wiki/%E5%AE%89%E8%A3%85)，查看使用该主题的教程，在电脑的 `cmd` 环境下跟着教程添加插件。\n\n在 `cmd` 命令行本地项目中使用 `hexo s` 命令，打开浏览器 `localhost:4000` 地址，可以看见 `hexo` 的 `indigo` 主题被使用\n\n### 修改indigo主题\n\n在本地项目中，修改 `indigo/_config.yml` 文件，如下图所示。\n\n去掉 `menu` 中的 `weibo` 和 `测试`\n\n![](https://bingolil.github.io/images/update-1.png)\n\n关闭打赏功能\n\n![](https://bingolil.github.io/images/update-2.png)\n\n去掉title变化功能\n\n![](https://bingolil.github.io/images/update-3.png)\n\n使用自定义样式\n\n![](https://bingolil.github.io/images/update-4.png)\n\n## 搭建GitHub项目\n\n使用账号登录 `GitHub` 后，进入创建[仓库页面](https://github.com/new)，创建仓库，仓库名为 '账号用户名.github.io'（这就是为什么账号的用户名是唯一的），如下图所示。\n\n![GitHub-new](https://bingolil.github.io/images/github-new.png)\n\n打开浏览器，输入地址 'GitHub用户名.github.io'，可以看见如下图页面。\n\n![](https://bingolil.github.io/images/github-csh.png)\n\n进入新搭建的 `GitHub` 项目的 `setting` 设置页面，有一个 `Git Pages` 属性，点击 `choice a theme` 按钮，进入 `GitHub` 自带主题页面，可以更换  `GitHub` 账号.github.io' 页面的主题，如下图所示。\n\n![](https://bingolil.github.io/images/github-themes.png)\n\n## 将本地项目传送的GitHub上\n\n### 本地git和Github的连接\n\n将本地 `git` 和 `GitHub` 连接需要将本地 `git` 的公钥发送的 `GitHub` 上。\n\n[官网的教程](https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5)生成本地公钥。进入 `git bash` 命令行下，运行命令 `ssh-keygen`，在电脑的C盘里面生成了 .ssh 文件夹，如下图所示。\n\n![](https://bingolil.github.io/images/git-key.png)\n\n进入到 `GitHub` 上的添加 `ssh key` 的页面，如下图。\n\n![](https://bingolil.github.io/images/github-newssh-1.png)\n\n![](https://bingolil.github.io/images/github-newssh-2.png)\n\n打开 `id_rsa.pub` 文件（该文件为公钥，`id_rsa` 为私钥），将文件中的内容复制粘贴到上图中，点击 `Add SSH key` 按钮，这样本地的 `git` 和 `GitHub` 连接完成。\n\n### 传送本地项目\n\n在 `hexo` 官网教材中提供了关于hexo项目的[部署方案](https://hexo.io/zh-cn/docs/deployment)，将新建 `GitHub` 项目地址复制，在编辑器中打开本地的 `hexo` 项目，打开 `项目名/_config.yml` 文件，将 `GitHub` 项目地址粘贴到 `_config.yml` 文件中的 `deplay` 属性下的 `git` 属性上，如下图所示。\n\n![](https://bingolil.github.io/images/hexo-config1.png)\n\n在电脑 `cmd` 命令到项目地址下，使用命令 `npm install hexo-deployer-git --save` 下载插件，如下图所示。\n\n![](https://bingolil.github.io/images/hexo-deploy.png)\n\n然后运行 `hexo g -d` 或 `hexo d -g` 命令，可以看到，已经将本地git项目传送到新建的 `GitHub` 项目上，如下图所示。\n\n![](https://bingolil.github.io/images/hexo-g-d.png)\n\n打开浏览器，在地址栏输入 'GitHub用户名.github.io' 可以看到，本地的项目已经在 `GitHub`上了。\n\n\n\n","slug":"web/person-web-2","published":1,"date":"2018-11-02T10:25:09.199Z","updated":"2018-11-22T08:22:52.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjozdt9ng000ybgvcf0crdqmn","content":"<h2 id=\"搭建本地项目\"><a href=\"#搭建本地项目\" class=\"headerlink\" title=\"搭建本地项目\"></a>搭建本地项目</h2><h3 id=\"hexo初始化项目\"><a href=\"#hexo初始化项目\" class=\"headerlink\" title=\"hexo初始化项目\"></a>hexo初始化项目</h3><p>进入电脑 <code>cmd</code> 命令行，在某个目录下使用 <code>hexo init</code> 命令，生成 <code>hexo</code> 初始化项目，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-init.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>使用 <code>hexo s</code> 命令，在浏览器中打开 <code>localhost:4000</code> 地址，可以看到 <code>hexo</code> 新建的初始化项目页面，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-index.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"hexo主题下载\"><a href=\"#hexo主题下载\" class=\"headerlink\" title=\"hexo主题下载\"></a>hexo主题下载</h3><p>新建 <code>hexo</code> 项目自带默认主题 <code>landscape</code> ，样式不是特别好看，可去<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo主题</a>查看自己喜欢的主题风格，一般在主题风格的页面都有到该主题源码的 <code>GitHub</code> 链接，进入到 <code>GitHub</code> 下载，复制 <code>git</code> 库的地址，在本地的 <code>git</code> 命令行下 克隆 <code>hexo主题</code>。本个人网页使用的主题地址是<code>https://github.com/yscoder/hexo-theme-indigo</code></p>\n<h3 id=\"使用indigo主题\"><a href=\"#使用indigo主题\" class=\"headerlink\" title=\"使用indigo主题\"></a>使用indigo主题</h3><p>将下载好的 <code>indigo</code> 主题放到本地 <code>hexo</code> 初始化项目的 <code>/项目名/themes/</code> 下，将 <code>项目名/_config.yml&#39;</code>文件中的 <code>themes</code> 属性由 <code>landscape</code> 改成 <code>indigo</code>（如果是其它主题，<code>themes</code> 的属性修改成其它主题名)，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/theme-name.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在该主题的<a href=\"https://github.com/yscoder/hexo-theme-indigo/wiki/%E5%AE%89%E8%A3%85\" target=\"_blank\" rel=\"noopener\">GitHub页面</a>，查看使用该主题的教程，在电脑的 <code>cmd</code> 环境下跟着教程添加插件。</p>\n<p>在 <code>cmd</code> 命令行本地项目中使用 <code>hexo s</code> 命令，打开浏览器 <code>localhost:4000</code> 地址，可以看见 <code>hexo</code> 的 <code>indigo</code> 主题被使用</p>\n<h3 id=\"修改indigo主题\"><a href=\"#修改indigo主题\" class=\"headerlink\" title=\"修改indigo主题\"></a>修改indigo主题</h3><p>在本地项目中，修改 <code>indigo/_config.yml</code> 文件，如下图所示。</p>\n<p>去掉 <code>menu</code> 中的 <code>weibo</code> 和 <code>测试</code></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/update-1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>关闭打赏功能</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/update-2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>去掉title变化功能</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/update-3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>使用自定义样式</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/update-4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"搭建GitHub项目\"><a href=\"#搭建GitHub项目\" class=\"headerlink\" title=\"搭建GitHub项目\"></a>搭建GitHub项目</h2><p>使用账号登录 <code>GitHub</code> 后，进入创建<a href=\"https://github.com/new\" target=\"_blank\" rel=\"noopener\">仓库页面</a>，创建仓库，仓库名为 ‘账号用户名.github.io’（这就是为什么账号的用户名是唯一的），如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-new.png\" alt=\"GitHub-new\" title=\"\">\n                </div>\n                <div class=\"image-caption\">GitHub-new</div>\n            </figure>\n<p>打开浏览器，输入地址 ‘GitHub用户名.github.io’，可以看见如下图页面。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-csh.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>进入新搭建的 <code>GitHub</code> 项目的 <code>setting</code> 设置页面，有一个 <code>Git Pages</code> 属性，点击 <code>choice a theme</code> 按钮，进入 <code>GitHub</code> 自带主题页面，可以更换  <code>GitHub</code> 账号.github.io’ 页面的主题，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-themes.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"将本地项目传送的GitHub上\"><a href=\"#将本地项目传送的GitHub上\" class=\"headerlink\" title=\"将本地项目传送的GitHub上\"></a>将本地项目传送的GitHub上</h2><h3 id=\"本地git和Github的连接\"><a href=\"#本地git和Github的连接\" class=\"headerlink\" title=\"本地git和Github的连接\"></a>本地git和Github的连接</h3><p>将本地 <code>git</code> 和 <code>GitHub</code> 连接需要将本地 <code>git</code> 的公钥发送的 <code>GitHub</code> 上。</p>\n<p><a href=\"https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5\" target=\"_blank\" rel=\"noopener\">官网的教程</a>生成本地公钥。进入 <code>git bash</code> 命令行下，运行命令 <code>ssh-keygen</code>，在电脑的C盘里面生成了 .ssh 文件夹，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/git-key.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>进入到 <code>GitHub</code> 上的添加 <code>ssh key</code> 的页面，如下图。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-newssh-1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-newssh-2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>打开 <code>id_rsa.pub</code> 文件（该文件为公钥，<code>id_rsa</code> 为私钥），将文件中的内容复制粘贴到上图中，点击 <code>Add SSH key</code> 按钮，这样本地的 <code>git</code> 和 <code>GitHub</code> 连接完成。</p>\n<h3 id=\"传送本地项目\"><a href=\"#传送本地项目\" class=\"headerlink\" title=\"传送本地项目\"></a>传送本地项目</h3><p>在 <code>hexo</code> 官网教材中提供了关于hexo项目的<a href=\"https://hexo.io/zh-cn/docs/deployment\" target=\"_blank\" rel=\"noopener\">部署方案</a>，将新建 <code>GitHub</code> 项目地址复制，在编辑器中打开本地的 <code>hexo</code> 项目，打开 <code>项目名/_config.yml</code> 文件，将 <code>GitHub</code> 项目地址粘贴到 <code>_config.yml</code> 文件中的 <code>deplay</code> 属性下的 <code>git</code> 属性上，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-config1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在电脑 <code>cmd</code> 命令到项目地址下，使用命令 <code>npm install hexo-deployer-git --save</code> 下载插件，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-deploy.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>然后运行 <code>hexo g -d</code> 或 <code>hexo d -g</code> 命令，可以看到，已经将本地git项目传送到新建的 <code>GitHub</code> 项目上，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-g-d.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>打开浏览器，在地址栏输入 ‘GitHub用户名.github.io’ 可以看到，本地的项目已经在 <code>GitHub</code>上了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"搭建本地项目\"><a href=\"#搭建本地项目\" class=\"headerlink\" title=\"搭建本地项目\"></a>搭建本地项目</h2><h3 id=\"hexo初始化项目\"><a href=\"#hexo初始化项目\" class=\"headerlink\" title=\"hexo初始化项目\"></a>hexo初始化项目</h3><p>进入电脑 <code>cmd</code> 命令行，在某个目录下使用 <code>hexo init</code> 命令，生成 <code>hexo</code> 初始化项目，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-init.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>使用 <code>hexo s</code> 命令，在浏览器中打开 <code>localhost:4000</code> 地址，可以看到 <code>hexo</code> 新建的初始化项目页面，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-index.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"hexo主题下载\"><a href=\"#hexo主题下载\" class=\"headerlink\" title=\"hexo主题下载\"></a>hexo主题下载</h3><p>新建 <code>hexo</code> 项目自带默认主题 <code>landscape</code> ，样式不是特别好看，可去<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo主题</a>查看自己喜欢的主题风格，一般在主题风格的页面都有到该主题源码的 <code>GitHub</code> 链接，进入到 <code>GitHub</code> 下载，复制 <code>git</code> 库的地址，在本地的 <code>git</code> 命令行下 克隆 <code>hexo主题</code>。本个人网页使用的主题地址是<code>https://github.com/yscoder/hexo-theme-indigo</code></p>\n<h3 id=\"使用indigo主题\"><a href=\"#使用indigo主题\" class=\"headerlink\" title=\"使用indigo主题\"></a>使用indigo主题</h3><p>将下载好的 <code>indigo</code> 主题放到本地 <code>hexo</code> 初始化项目的 <code>/项目名/themes/</code> 下，将 <code>项目名/_config.yml&#39;</code>文件中的 <code>themes</code> 属性由 <code>landscape</code> 改成 <code>indigo</code>（如果是其它主题，<code>themes</code> 的属性修改成其它主题名)，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/theme-name.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在该主题的<a href=\"https://github.com/yscoder/hexo-theme-indigo/wiki/%E5%AE%89%E8%A3%85\" target=\"_blank\" rel=\"noopener\">GitHub页面</a>，查看使用该主题的教程，在电脑的 <code>cmd</code> 环境下跟着教程添加插件。</p>\n<p>在 <code>cmd</code> 命令行本地项目中使用 <code>hexo s</code> 命令，打开浏览器 <code>localhost:4000</code> 地址，可以看见 <code>hexo</code> 的 <code>indigo</code> 主题被使用</p>\n<h3 id=\"修改indigo主题\"><a href=\"#修改indigo主题\" class=\"headerlink\" title=\"修改indigo主题\"></a>修改indigo主题</h3><p>在本地项目中，修改 <code>indigo/_config.yml</code> 文件，如下图所示。</p>\n<p>去掉 <code>menu</code> 中的 <code>weibo</code> 和 <code>测试</code></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/update-1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>关闭打赏功能</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/update-2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>去掉title变化功能</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/update-3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>使用自定义样式</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/update-4.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"搭建GitHub项目\"><a href=\"#搭建GitHub项目\" class=\"headerlink\" title=\"搭建GitHub项目\"></a>搭建GitHub项目</h2><p>使用账号登录 <code>GitHub</code> 后，进入创建<a href=\"https://github.com/new\" target=\"_blank\" rel=\"noopener\">仓库页面</a>，创建仓库，仓库名为 ‘账号用户名.github.io’（这就是为什么账号的用户名是唯一的），如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-new.png\" alt=\"GitHub-new\" title=\"\">\n                </div>\n                <div class=\"image-caption\">GitHub-new</div>\n            </figure>\n<p>打开浏览器，输入地址 ‘GitHub用户名.github.io’，可以看见如下图页面。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-csh.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>进入新搭建的 <code>GitHub</code> 项目的 <code>setting</code> 设置页面，有一个 <code>Git Pages</code> 属性，点击 <code>choice a theme</code> 按钮，进入 <code>GitHub</code> 自带主题页面，可以更换  <code>GitHub</code> 账号.github.io’ 页面的主题，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-themes.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"将本地项目传送的GitHub上\"><a href=\"#将本地项目传送的GitHub上\" class=\"headerlink\" title=\"将本地项目传送的GitHub上\"></a>将本地项目传送的GitHub上</h2><h3 id=\"本地git和Github的连接\"><a href=\"#本地git和Github的连接\" class=\"headerlink\" title=\"本地git和Github的连接\"></a>本地git和Github的连接</h3><p>将本地 <code>git</code> 和 <code>GitHub</code> 连接需要将本地 <code>git</code> 的公钥发送的 <code>GitHub</code> 上。</p>\n<p><a href=\"https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5\" target=\"_blank\" rel=\"noopener\">官网的教程</a>生成本地公钥。进入 <code>git bash</code> 命令行下，运行命令 <code>ssh-keygen</code>，在电脑的C盘里面生成了 .ssh 文件夹，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/git-key.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>进入到 <code>GitHub</code> 上的添加 <code>ssh key</code> 的页面，如下图。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-newssh-1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/github-newssh-2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>打开 <code>id_rsa.pub</code> 文件（该文件为公钥，<code>id_rsa</code> 为私钥），将文件中的内容复制粘贴到上图中，点击 <code>Add SSH key</code> 按钮，这样本地的 <code>git</code> 和 <code>GitHub</code> 连接完成。</p>\n<h3 id=\"传送本地项目\"><a href=\"#传送本地项目\" class=\"headerlink\" title=\"传送本地项目\"></a>传送本地项目</h3><p>在 <code>hexo</code> 官网教材中提供了关于hexo项目的<a href=\"https://hexo.io/zh-cn/docs/deployment\" target=\"_blank\" rel=\"noopener\">部署方案</a>，将新建 <code>GitHub</code> 项目地址复制，在编辑器中打开本地的 <code>hexo</code> 项目，打开 <code>项目名/_config.yml</code> 文件，将 <code>GitHub</code> 项目地址粘贴到 <code>_config.yml</code> 文件中的 <code>deplay</code> 属性下的 <code>git</code> 属性上，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-config1.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在电脑 <code>cmd</code> 命令到项目地址下，使用命令 <code>npm install hexo-deployer-git --save</code> 下载插件，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-deploy.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>然后运行 <code>hexo g -d</code> 或 <code>hexo d -g</code> 命令，可以看到，已经将本地git项目传送到新建的 <code>GitHub</code> 项目上，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://bingolil.github.io/images/hexo-g-d.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>打开浏览器，在地址栏输入 ‘GitHub用户名.github.io’ 可以看到，本地的项目已经在 <code>GitHub</code>上了。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjozdt9mn0002bgvch06pag30","category_id":"cjozdt9mu0004bgvceriais9c","_id":"cjozdt9n0000bbgvcag609imy"},{"post_id":"cjozdt9ms0003bgvc6552tl5z","category_id":"cjozdt9mu0004bgvceriais9c","_id":"cjozdt9n3000fbgvckcx4tswo"},{"post_id":"cjozdt9mw0006bgvcsnysu6nb","category_id":"cjozdt9mu0004bgvceriais9c","_id":"cjozdt9n3000ibgvc4v43duuh"},{"post_id":"cjozdt9mx0007bgvcq2ua6om3","category_id":"cjozdt9n2000ebgvcilsxer2v","_id":"cjozdt9n4000lbgvc8cwxwv43"},{"post_id":"cjozdt9ng000ybgvcf0crdqmn","category_id":"cjozdt9n2000ebgvcilsxer2v","_id":"cjozdt9nh0011bgvc60zei3r1"}],"PostTag":[{"post_id":"cjozdt9mn0002bgvch06pag30","tag_id":"cjozdt9mw0005bgvc2l4eyb67","_id":"cjozdt9n2000dbgvcagyhuxh6"},{"post_id":"cjozdt9mn0002bgvch06pag30","tag_id":"cjozdt9mz0009bgvc6zyma0j9","_id":"cjozdt9n3000gbgvcljfi8yj2"},{"post_id":"cjozdt9ms0003bgvc6552tl5z","tag_id":"cjozdt9mz0009bgvc6zyma0j9","_id":"cjozdt9n4000kbgvcoixvuw9k"},{"post_id":"cjozdt9ms0003bgvc6552tl5z","tag_id":"cjozdt9n3000hbgvci1xeja6d","_id":"cjozdt9n4000mbgvcd91tk57u"},{"post_id":"cjozdt9mw0006bgvcsnysu6nb","tag_id":"cjozdt9mz0009bgvc6zyma0j9","_id":"cjozdt9n5000pbgvcixttfn7h"},{"post_id":"cjozdt9mw0006bgvcsnysu6nb","tag_id":"cjozdt9n5000nbgvca0w416ub","_id":"cjozdt9n5000qbgvc30m4366o"},{"post_id":"cjozdt9mx0007bgvcq2ua6om3","tag_id":"cjozdt9n5000obgvcjjrphnpw","_id":"cjozdt9n6000ubgvcvx7h64t2"},{"post_id":"cjozdt9mx0007bgvcq2ua6om3","tag_id":"cjozdt9n5000rbgvcm3v5covn","_id":"cjozdt9n6000vbgvc23f14y8z"},{"post_id":"cjozdt9mx0007bgvcq2ua6om3","tag_id":"cjozdt9n6000sbgvclpbu0u84","_id":"cjozdt9n7000wbgvcuommykpj"},{"post_id":"cjozdt9mx0007bgvcq2ua6om3","tag_id":"cjozdt9n6000tbgvcpggwt3yi","_id":"cjozdt9n7000xbgvcbvay64b0"},{"post_id":"cjozdt9ng000ybgvcf0crdqmn","tag_id":"cjozdt9n5000obgvcjjrphnpw","_id":"cjozdt9nh000zbgvcunlve1ww"},{"post_id":"cjozdt9ng000ybgvcf0crdqmn","tag_id":"cjozdt9n5000rbgvcm3v5covn","_id":"cjozdt9nh0010bgvc48tcduiq"},{"post_id":"cjozdt9ng000ybgvcf0crdqmn","tag_id":"cjozdt9n6000sbgvclpbu0u84","_id":"cjozdt9ni0012bgvc3jdsdbrj"},{"post_id":"cjozdt9ng000ybgvcf0crdqmn","tag_id":"cjozdt9n6000tbgvcpggwt3yi","_id":"cjozdt9nj0013bgvcwu8ehji1"}],"Tag":[{"name":"Angular安装","_id":"cjozdt9mw0005bgvc2l4eyb67"},{"name":"Angular","_id":"cjozdt9mz0009bgvc6zyma0j9"},{"name":"Angular组件通讯","_id":"cjozdt9n3000hbgvci1xeja6d"},{"name":"Angular生命周期钩子","_id":"cjozdt9n5000nbgvca0w416ub"},{"name":"hexo","_id":"cjozdt9n5000obgvcjjrphnpw"},{"name":"git","_id":"cjozdt9n5000rbgvcm3v5covn"},{"name":"github","_id":"cjozdt9n6000sbgvclpbu0u84"},{"name":"node.js","_id":"cjozdt9n6000tbgvcpggwt3yi"}]}}